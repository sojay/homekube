apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-26T08:36:31Z"
    generateName: cert-manager-6d6f549b9c-
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      pod-template-hash: 6d6f549b9c
    name: cert-manager-6d6f549b9c-x5w6f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-6d6f549b9c
      uid: a1746c18-2116-4043-a5e0-c5e19d22ccbd
    resourceVersion: "102241986"
    uid: 2261b783-0c38-49f9-976f-33c26384918b
  spec:
    containers:
    - args:
      - --v=2
      - --cluster-resource-namespace=$(POD_NAMESPACE)
      - --leader-election-namespace=kube-system
      - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.17.2
      - --max-concurrent-challenges=60
      - --dns01-recursive-nameservers-only=true
      - --dns01-recursive-nameservers=https://1.1.1.1:443/dns-query,https://1.0.0.1:443/dns-query
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-controller:v1.17.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          path: /livez
          port: http-healthz
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: cert-manager-controller
      ports:
      - containerPort: 9402
        name: http-metrics
        protocol: TCP
      - containerPort: 9403
        name: http-healthz
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mmsct
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager
    serviceAccountName: cert-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-mmsct
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:30Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-26T08:36:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-26T08:36:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://794a99ec76caf6fd00e06b82290a5a99129dcb597beb4b5a4ceeae4afd20b249
      image: quay.io/jetstack/cert-manager-controller:v1.17.2
      imageID: quay.io/jetstack/cert-manager-controller@sha256:2c314feeb5e8b1a250a93be96542f086abc9df2de8e1a0cd7bd491cc7cc7ac08
      lastState:
        terminated:
          containerID: containerd://28ad2301d788bf8814441291e193e247d50d1d72eebca490573d434b2510d145
          exitCode: 0
          finishedAt: "2025-05-07T02:52:15Z"
          reason: Completed
          startedAt: "2025-05-07T02:50:33Z"
      name: cert-manager-controller
      ready: true
      restartCount: 14
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:52:29Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mmsct
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.81
    podIPs:
    - ip: 10.69.2.81
    qosClass: BestEffort
    startTime: "2025-04-26T08:36:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-26T08:36:31Z"
    generateName: cert-manager-cainjector-7cc5fd9895-
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      pod-template-hash: 7cc5fd9895
    name: cert-manager-cainjector-7cc5fd9895-fzncm
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-7cc5fd9895
      uid: 86a775be-01f6-43a5-babf-e038c00ed5ba
    resourceVersion: "102241708"
    uid: ffa0d3dd-bed0-433c-a9e9-3d1334e0cbe5
  spec:
    containers:
    - args:
      - --v=2
      - --leader-election-namespace=kube-system
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-cainjector:v1.17.2
      imagePullPolicy: IfNotPresent
      name: cert-manager-cainjector
      ports:
      - containerPort: 9402
        name: http-metrics
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gtr5c
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager-cainjector
    serviceAccountName: cert-manager-cainjector
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-gtr5c
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-26T08:36:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-26T08:36:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f326c5a93f386b19906883b2c5248684c98d1c7abf80b0809437483c3a219d8f
      image: quay.io/jetstack/cert-manager-cainjector:v1.17.2
      imageID: quay.io/jetstack/cert-manager-cainjector@sha256:ec56edb1161dbcdcb60b5408dd040c877b9f70161b71270c6439ad185796b5b7
      lastState:
        terminated:
          containerID: containerd://88d349e912a058cb4f32ddae5abfa25525c6aad6d7f46d3325ce1c7014bdde3d
          exitCode: 124
          finishedAt: "2025-05-07T02:39:08Z"
          reason: Error
          startedAt: "2025-05-07T02:38:37Z"
      name: cert-manager-cainjector
      ready: true
      restartCount: 359
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:51:24Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gtr5c
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 10.69.3.231
    podIPs:
    - ip: 10.69.3.231
    qosClass: BestEffort
    startTime: "2025-04-26T08:36:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-26T08:36:32Z"
    generateName: cert-manager-webhook-7996dff45d-
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      pod-template-hash: 7996dff45d
    name: cert-manager-webhook-7996dff45d-7bcbc
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-7996dff45d
      uid: 4d51dedf-4aee-4166-9bf8-6a5fd349a6ff
    resourceVersion: "102242244"
    uid: 39db14a0-f4f7-46eb-a75d-88e6a2e9de26
  spec:
    containers:
    - args:
      - --v=2
      - --secure-port=10250
      - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
      - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
      - --dynamic-serving-dns-names=cert-manager-webhook
      - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
      - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-webhook:v1.17.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: cert-manager-webhook
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      - containerPort: 6080
        name: healthcheck
        protocol: TCP
      - containerPort: 9402
        name: http-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-46dtr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager-webhook
    serviceAccountName: cert-manager-webhook
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-46dtr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:28Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-26T08:36:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:53:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:53:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-26T08:36:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://52fdc27a444103eb8cc7f185332daec5c4a2701ba3ce655acda00cc2ac0a69a1
      image: quay.io/jetstack/cert-manager-webhook:v1.17.2
      imageID: quay.io/jetstack/cert-manager-webhook@sha256:37b16a9dff004a755e5be11a4369aea4d5dd5895f98e1f7def886adca7f5c7b6
      lastState:
        terminated:
          containerID: containerd://5a9b6b66fd41f3886e32848e1286d1659395d0aab84647f1f7e162b1a03272bd
          exitCode: 0
          finishedAt: "2025-05-07T02:52:50Z"
          reason: Completed
          startedAt: "2025-05-07T02:51:27Z"
      name: cert-manager-webhook
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:52:57Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-46dtr
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 10.69.3.60
    podIPs:
    - ip: 10.69.3.60
    qosClass: BestEffort
    startTime: "2025-04-26T08:36:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-15T20:02:58Z"
    generateName: reflector-dcc5cf554-
    labels:
      app.kubernetes.io/instance: reflector
      app.kubernetes.io/name: reflector
      pod-template-hash: dcc5cf554
    name: reflector-dcc5cf554-6jc6g
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: reflector-dcc5cf554
      uid: 29adb112-d75e-49d9-a967-681fec107d9d
    resourceVersion: "102240368"
    uid: 0031c664-36ca-4efe-b1d6-8559d7bb2876
  spec:
    containers:
    - env:
      - name: ES_Serilog__MinimumLevel__Default
        value: Information
      - name: ES_Reflector__Watcher__Timeout
      - name: ES_Reflector__Kubernetes__SkipTlsVerify
        value: "false"
      image: docker.io/emberstack/kubernetes-reflector:9.0.318
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health/live
          port: http
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: reflector
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /health/ready
          port: http
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
      startupProbe:
        failureThreshold: 5
        httpGet:
          path: /health/ready
          port: http
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4pfl6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 2000
    serviceAccount: reflector
    serviceAccountName: reflector
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-4pfl6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:41Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9af37677a85efb215db71d720f09b3cff0de896d57a49c9d7f1b24643319006c
      image: docker.io/emberstack/kubernetes-reflector:9.0.318
      imageID: docker.io/emberstack/kubernetes-reflector@sha256:3092d761141f41cb1f97e30e1405f0094371ac92179a6959769443a26152839a
      lastState:
        terminated:
          containerID: containerd://6bc251e01dd1a2576db3a99bab1fb5d9e96eb232633d6dfe05be16acc8961256
          exitCode: 1
          finishedAt: "2025-05-07T02:45:41Z"
          reason: Error
          startedAt: "2025-05-07T02:44:25Z"
      name: reflector
      ready: true
      restartCount: 6
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:46:51Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4pfl6
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.3
    podIPs:
    - ip: 10.69.0.3
    qosClass: BestEffort
    startTime: "2025-03-15T20:02:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-04-21T14:31:26Z"
    generateName: helm-controller-965c76748-
    labels:
      app: helm-controller
      pod-template-hash: 965c76748
    name: helm-controller-965c76748-js2b7
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: helm-controller-965c76748
      uid: be248554-fcd8-4587-b6f6-2233b992cc2c
    resourceVersion: "102660722"
    uid: 02c9f9f7-93f4-4d29-8839-9b3f1734b49c
  spec:
    containers:
    - args:
      - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
      - --watch-all-namespaces=true
      - --log-level=info
      - --log-encoding=json
      - --enable-leader-election
      - --concurrent=8
      - --kube-api-qps=500
      - --kube-api-burst=1000
      - --requeue-dependency=5s
      - --feature-gates=OOMWatch=true
      - --oom-watch-memory-threshold=95
      - --oom-watch-interval=500ms
      env:
      - name: RUNTIME_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.memory
      image: ghcr.io/fluxcd/helm-controller:v1.2.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 8080
        name: http-prom
        protocol: TCP
      - containerPort: 9440
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "2"
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2nwcn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: helm-controller
    serviceAccountName: helm-controller
    terminationGracePeriodSeconds: 600
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: temp
    - name: kube-api-access-2nwcn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:22Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:54Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:54Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4e088287cbb2f870f5a9af9e5c33959ea5500973521448df6b92ba34d1d90a4c
      image: ghcr.io/fluxcd/helm-controller:v1.2.0
      imageID: ghcr.io/fluxcd/helm-controller@sha256:62eaa9c9a9296a22684f9a77befa4f7fbf850fc314da47b3d6c28ad2e34ba965
      lastState:
        terminated:
          containerID: containerd://204066acbb224aca3945149361a97d6205722e7c617cf40b55efe06da8403e95
          exitCode: 1
          finishedAt: "2025-05-07T19:01:39Z"
          reason: Error
          startedAt: "2025-05-07T02:52:40Z"
      name: manager
      ready: true
      restartCount: 370
      started: true
      state:
        running:
          startedAt: "2025-05-07T19:01:53Z"
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2nwcn
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 10.69.3.26
    podIPs:
    - ip: 10.69.3.26
    qosClass: Burstable
    startTime: "2025-04-21T14:34:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-04-21T14:31:26Z"
    generateName: image-automation-controller-8697d7cb68-
    labels:
      app: image-automation-controller
      pod-template-hash: 8697d7cb68
    name: image-automation-controller-8697d7cb68-mc2dz
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: image-automation-controller-8697d7cb68
      uid: dca5f91b-eab7-45cc-9463-43b0c7cc9ec3
    resourceVersion: "102660655"
    uid: d44e3bd6-31ce-4ca7-a8c8-99b850b7c5e9
  spec:
    containers:
    - args:
      - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
      - --watch-all-namespaces=true
      - --log-level=info
      - --log-encoding=json
      - --enable-leader-election
      env:
      - name: RUNTIME_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.memory
      image: ghcr.io/fluxcd/image-automation-controller:v0.40.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 8080
        name: http-prom
        protocol: TCP
      - containerPort: 9440
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4tztx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: image-automation-controller
    serviceAccountName: image-automation-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: temp
    - name: kube-api-access-4tztx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:23Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://472558e40bb65566b2fe759685ed244dd27864b67ae1bb7279f4256e141d0120
      image: ghcr.io/fluxcd/image-automation-controller:v0.40.0
      imageID: ghcr.io/fluxcd/image-automation-controller@sha256:8c9de4b247271d6b02293f0cbc901e79b14b57b7ef0d8989dfdf3ec6151df8d5
      lastState:
        terminated:
          containerID: containerd://76915f2ff41e2386f6eeb27a39e8c5ce2de2e1f3d035f783d05383bd56e1fb78
          exitCode: 1
          finishedAt: "2025-05-07T19:01:39Z"
          reason: Error
          startedAt: "2025-05-07T02:52:34Z"
      name: manager
      ready: true
      restartCount: 370
      started: true
      state:
        running:
          startedAt: "2025-05-07T19:01:51Z"
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4tztx
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.53
    podIPs:
    - ip: 10.69.2.53
    qosClass: Burstable
    startTime: "2025-04-21T14:34:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-24T08:03:28Z"
    generateName: image-automation-controller-bc8787464-
    labels:
      app: image-automation-controller
      pod-template-hash: bc8787464
    name: image-automation-controller-bc8787464-4dcpk
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: image-automation-controller-bc8787464
      uid: 483be5e8-a9f4-417f-870b-442adaae6004
    resourceVersion: "4464742"
    uid: bcfabcf6-a36c-4664-b199-bda8ddf897ee
  spec:
    containers:
    - args:
      - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
      - --watch-all-namespaces=true
      - --log-level=info
      - --log-encoding=json
      - --enable-leader-election
      env:
      - name: RUNTIME_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.memory
      image: ghcr.io/fluxcd/image-automation-controller:v0.39.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 8080
        name: http-prom
        protocol: TCP
      - containerPort: 9440
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v5h8t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: image-automation-controller
    serviceAccountName: image-automation-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: temp
    - name: kube-api-access-v5h8t
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:46Z"
      message: Pod was terminated in response to imminent node shutdown.
      reason: TerminationByKubelet
      status: "True"
      type: DisruptionTarget
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:43Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T08:03:49Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:43Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:43Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T08:03:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5510f7ee2df6fefff82aa6c38abb50955559cdd41752d695f0c40259a64c6918
      image: ghcr.io/fluxcd/image-automation-controller:v0.39.0
      imageID: ghcr.io/fluxcd/image-automation-controller@sha256:5b6c2e97055cfe69fe8996f48b53db039c136210dbc98c5631864a9e573d0e20
      lastState: {}
      name: manager
      ready: false
      restartCount: 8
      started: false
      state:
        terminated:
          containerID: containerd://5510f7ee2df6fefff82aa6c38abb50955559cdd41752d695f0c40259a64c6918
          exitCode: 0
          finishedAt: "2024-11-02T04:42:41Z"
          reason: Completed
          startedAt: "2024-11-01T16:03:43Z"
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v5h8t
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Succeeded
    qosClass: Burstable
    startTime: "2024-10-24T08:03:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-04-21T14:31:26Z"
    generateName: image-reflector-controller-6cf5d6c6b8-
    labels:
      app: image-reflector-controller
      pod-template-hash: 6cf5d6c6b8
    name: image-reflector-controller-6cf5d6c6b8-bzxzp
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: image-reflector-controller-6cf5d6c6b8
      uid: f5602c0f-9a23-4211-831f-da8125d15398
    resourceVersion: "102660710"
    uid: c5d6ec4f-6c8e-4eee-8212-573ba5868ce4
  spec:
    containers:
    - args:
      - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
      - --watch-all-namespaces=true
      - --log-level=info
      - --log-encoding=json
      - --enable-leader-election
      env:
      - name: RUNTIME_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.memory
      image: ghcr.io/fluxcd/image-reflector-controller:v0.34.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 8080
        name: http-prom
        protocol: TCP
      - containerPort: 9440
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vk724
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: image-reflector-controller
    serviceAccountName: image-reflector-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: temp
    - emptyDir: {}
      name: data
    - name: kube-api-access-vk724
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:28Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:55Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:55Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://46ae8039a0f75a416e311f627aa4c610d8fac7a30e70e7ca6355cca7e0515b26
      image: ghcr.io/fluxcd/image-reflector-controller:v0.34.0
      imageID: ghcr.io/fluxcd/image-reflector-controller@sha256:d002d16ab3bd4b370b23d989525182c19a068d5c1d63764acb14e43709d1949b
      lastState:
        terminated:
          containerID: containerd://1cd9ce2e6704577080f0c42de9d3fd3e59a26ee11bfd5e3403feef33058376fb
          exitCode: 1
          finishedAt: "2025-05-07T19:01:39Z"
          reason: Error
          startedAt: "2025-05-07T02:52:35Z"
      name: manager
      ready: true
      restartCount: 371
      started: true
      state:
        running:
          startedAt: "2025-05-07T19:01:54Z"
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vk724
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 10.69.3.37
    podIPs:
    - ip: 10.69.3.37
    qosClass: Burstable
    startTime: "2025-04-21T14:34:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-24T08:03:29Z"
    generateName: image-reflector-controller-7cdc88c5c7-
    labels:
      app: image-reflector-controller
      pod-template-hash: 7cdc88c5c7
    name: image-reflector-controller-7cdc88c5c7-gjp9w
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: image-reflector-controller-7cdc88c5c7
      uid: dab82c09-639a-44f4-870c-ba0a716577d8
    resourceVersion: "4464760"
    uid: 6bad3617-3a74-4d55-8bf0-22cae8a89e7c
  spec:
    containers:
    - args:
      - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
      - --watch-all-namespaces=true
      - --log-level=info
      - --log-encoding=json
      - --enable-leader-election
      env:
      - name: RUNTIME_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.memory
      image: ghcr.io/fluxcd/image-reflector-controller:v0.33.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 8080
        name: http-prom
        protocol: TCP
      - containerPort: 9440
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6787h
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: image-reflector-controller
    serviceAccountName: image-reflector-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: temp
    - emptyDir: {}
      name: data
    - name: kube-api-access-6787h
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:45Z"
      message: Pod was terminated in response to imminent node shutdown.
      reason: TerminationByKubelet
      status: "True"
      type: DisruptionTarget
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:43Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T08:03:49Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:43Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:43Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T08:03:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://dd8139be315c577bfa517e6bac996705071f1c424f2cf3a87f5f06c22913a9eb
      image: ghcr.io/fluxcd/image-reflector-controller:v0.33.0
      imageID: ghcr.io/fluxcd/image-reflector-controller@sha256:c6864684f96cfbb3a91c816084032bb019b302af8b63b0e06b12b4018a9a8242
      lastState: {}
      name: manager
      ready: false
      restartCount: 9
      started: false
      state:
        terminated:
          containerID: containerd://dd8139be315c577bfa517e6bac996705071f1c424f2cf3a87f5f06c22913a9eb
          exitCode: 0
          finishedAt: "2024-11-02T04:42:41Z"
          reason: Completed
          startedAt: "2024-11-01T16:03:42Z"
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /data
        name: data
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6787h
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Succeeded
    qosClass: Burstable
    startTime: "2024-10-24T08:03:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-04-21T14:31:26Z"
    generateName: kustomize-controller-66f7cb4d86-
    labels:
      app: kustomize-controller
      pod-template-hash: 66f7cb4d86
    name: kustomize-controller-66f7cb4d86-mn5l6
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kustomize-controller-66f7cb4d86
      uid: 58c8f13d-77d3-4a66-a0ad-aaec163ca8df
    resourceVersion: "102660680"
    uid: d54d92c0-14af-4d97-a147-86bd42776a97
  spec:
    containers:
    - args:
      - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
      - --watch-all-namespaces=true
      - --log-level=info
      - --log-encoding=json
      - --enable-leader-election
      - --concurrent=8
      - --kube-api-qps=500
      - --kube-api-burst=1000
      - --requeue-dependency=5s
      env:
      - name: RUNTIME_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.memory
      image: ghcr.io/fluxcd/kustomize-controller:v1.5.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 8080
        name: http-prom
        protocol: TCP
      - containerPort: 9440
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "2"
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2sqhr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: kustomize-controller
    serviceAccountName: kustomize-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: temp
    - name: kube-api-access-2sqhr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:02Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:55Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:55Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://097c63d2fe2441202c409ebd329f1b9da196cdb35b0d0f5e078280b260333137
      image: ghcr.io/fluxcd/kustomize-controller:v1.5.1
      imageID: ghcr.io/fluxcd/kustomize-controller@sha256:b89935f9428764c389c5192fdb8f6c53b66e365fa09ac8cec597e82273e9f518
      lastState:
        terminated:
          containerID: containerd://e73e5bccb9eacae79284adb3be74be5df3fb978dd5e7cfeb90014a272eca9793
          exitCode: 1
          finishedAt: "2025-05-07T19:01:39Z"
          reason: Error
          startedAt: "2025-05-07T02:52:51Z"
      name: manager
      ready: true
      restartCount: 371
      started: true
      state:
        running:
          startedAt: "2025-05-07T19:01:54Z"
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2sqhr
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 10.69.3.36
    podIPs:
    - ip: 10.69.3.36
    qosClass: Burstable
    startTime: "2025-04-21T14:34:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-04-21T14:31:26Z"
    generateName: notification-controller-f9dc675b9-
    labels:
      app: notification-controller
      pod-template-hash: f9dc675b9
    name: notification-controller-f9dc675b9-8r9z7
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: notification-controller-f9dc675b9
      uid: 1ec5baae-61c1-4a4b-8c50-392509223d84
    resourceVersion: "102660671"
    uid: f160a8f5-d3a3-4478-bd2f-680a17126f18
  spec:
    containers:
    - args:
      - --watch-all-namespaces=true
      - --log-level=info
      - --log-encoding=json
      - --enable-leader-election
      env:
      - name: RUNTIME_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.memory
      image: ghcr.io/fluxcd/notification-controller:v1.5.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 9090
        name: http
        protocol: TCP
      - containerPort: 9292
        name: http-webhook
        protocol: TCP
      - containerPort: 8080
        name: http-prom
        protocol: TCP
      - containerPort: 9440
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jwjf7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: notification-controller
    serviceAccountName: notification-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: temp
    - name: kube-api-access-jwjf7
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:13Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:54Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:54Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1c097b6d6db8ffb44b9a175228fb4b7e3b52a18cb04e089ee67c0fe3490b7bb2
      image: ghcr.io/fluxcd/notification-controller:v1.5.0
      imageID: ghcr.io/fluxcd/notification-controller@sha256:9fe4b5fb312eace22e43969975938deca08d64282c9a1e2783afe91be3da2869
      lastState:
        terminated:
          containerID: containerd://98b6952375590ab20b23843a6a70e1f7779aedbed2f55792136ad427e004de93
          exitCode: 1
          finishedAt: "2025-05-07T19:01:39Z"
          reason: Error
          startedAt: "2025-05-07T02:53:01Z"
      name: manager
      ready: true
      restartCount: 370
      started: true
      state:
        running:
          startedAt: "2025-05-07T19:01:52Z"
      volumeMounts:
      - mountPath: /tmp
        name: temp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jwjf7
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.110
    podIPs:
    - ip: 10.69.2.110
    qosClass: Burstable
    startTime: "2025-04-21T14:34:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-04-21T14:32:54Z"
    generateName: source-controller-7ddc4d4f4c-
    labels:
      app: source-controller
      pod-template-hash: 7ddc4d4f4c
    name: source-controller-7ddc4d4f4c-wgwb2
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: source-controller-7ddc4d4f4c
      uid: 8f1a1556-6fca-4dfa-ac3f-04511f988635
    resourceVersion: "102660702"
    uid: 23401f1a-2f45-428f-89e8-5ae6900ffcd4
  spec:
    containers:
    - args:
      - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
      - --watch-all-namespaces=true
      - --log-level=info
      - --log-encoding=json
      - --enable-leader-election
      - --storage-path=/data
      - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
      - --concurrent=8
      - --kube-api-qps=500
      - --kube-api-burst=1000
      - --requeue-dependency=5s
      env:
      - name: RUNTIME_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: TUF_ROOT
        value: /tmp/.sigstore
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            containerName: manager
            divisor: "0"
            resource: limits.memory
      image: ghcr.io/fluxcd/source-controller:v1.5.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: healthz
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 9090
        name: http
        protocol: TCP
      - containerPort: 8080
        name: http-prom
        protocol: TCP
      - containerPort: 9440
        name: healthz
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "2"
          memory: 2Gi
        requests:
          cpu: 50m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6p5x4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: source-controller
    serviceAccountName: source-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: data
    - emptyDir: {}
      name: tmp
    - name: kube-api-access-6p5x4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:21Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T19:01:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:34:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://732e27a3a570ef5374495dae426a990e8dd6ab823ca89c09114f8a815c93fb96
      image: ghcr.io/fluxcd/source-controller:v1.5.0
      imageID: ghcr.io/fluxcd/source-controller@sha256:00cd9316a3790f3e212132f38c849f87d6e6eeca6272ec9557387be3cec054be
      lastState:
        terminated:
          containerID: containerd://b67587ecc802af637677b6e1ea7a1820d2a96496b580f02adeed75fc9f054947
          exitCode: 1
          finishedAt: "2025-05-07T19:01:39Z"
          reason: Error
          startedAt: "2025-05-07T02:52:31Z"
      name: manager
      ready: true
      restartCount: 372
      started: true
      state:
        running:
          startedAt: "2025-05-07T19:01:46Z"
      volumeMounts:
      - mountPath: /data
        name: data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6p5x4
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.35
    podIPs:
    - ip: 10.69.2.35
    qosClass: Burstable
    startTime: "2025-04-21T14:34:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cilium.io/cilium-configmap-checksum: f6f3225dd63a52d6a561c038b20f94f8936f01139c1dcbc637dc0df90f717d94
      container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: unconfined
      container.apparmor.security.beta.kubernetes.io/cilium-agent: unconfined
      container.apparmor.security.beta.kubernetes.io/clean-cilium-state: unconfined
      container.apparmor.security.beta.kubernetes.io/config: unconfined
      container.apparmor.security.beta.kubernetes.io/install-cni-binaries: unconfined
      container.apparmor.security.beta.kubernetes.io/mount-bpf-fs: unconfined
      container.apparmor.security.beta.kubernetes.io/mount-cgroup: unconfined
    creationTimestamp: "2025-04-21T14:24:22Z"
    generateName: cilium-
    labels:
      app.kubernetes.io/name: cilium-agent
      app.kubernetes.io/part-of: cilium
      controller-revision-hash: 686476677f
      k8s-app: cilium
      pod-template-generation: "8"
    name: cilium-dqncf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: cilium
      uid: 339df624-cdaf-4ba1-be49-e5f5c3944fe1
    resourceVersion: "102240570"
    uid: 445be3fb-4f8a-4178-8dfb-1c30100de775
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-worker01
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              k8s-app: cilium
          topologyKey: kubernetes.io/hostname
    automountServiceAccountToken: true
    containers:
    - args:
      - --config-dir=/tmp/cilium/config-map
      command:
      - cilium-agent
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CILIUM_CLUSTERMESH_CONFIG
        value: /var/lib/cilium/clustermesh/
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - bash
            - -c
            - |
              set -o errexit
              set -o pipefail
              set -o nounset

              # When running in AWS ENI mode, it's likely that 'aws-node' has
              # had a chance to install SNAT iptables rules. These can result
              # in dropped traffic, so we should attempt to remove them.
              # We do it using a 'postStart' hook since this may need to run
              # for nodes which might have already been init'ed but may still
              # have dangling rules. This is safe because there are no
              # dependencies on anything that is part of the startup script
              # itself, and can be safely run multiple times per node (e.g. in
              # case of a restart).
              if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
              then
                  echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                  iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
              fi
              echo 'Done!'
        preStop:
          exec:
            command:
            - /cni-uninstall.sh
      livenessProbe:
        failureThreshold: 10
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: cilium-agent
      ports:
      - containerPort: 4244
        hostPort: 4244
        name: peer-service
        protocol: TCP
      - containerPort: 9962
        hostPort: 9962
        name: prometheus
        protocol: TCP
      - containerPort: 9964
        hostPort: 9964
        name: envoy-metrics
        protocol: TCP
      - containerPort: 9901
        hostPort: 9901
        name: envoy-admin
        protocol: TCP
      - containerPort: 9965
        hostPort: 9965
        name: hubble-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        capabilities:
          add:
          - CHOWN
          - KILL
          - NET_ADMIN
          - NET_RAW
          - IPC_LOCK
          - SYS_ADMIN
          - SYS_RESOURCE
          - DAC_OVERRIDE
          - FOWNER
          - SETGID
          - SETUID
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      startupProbe:
        failureThreshold: 105
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /host/proc/sys/net
        name: host-proc-sys-net
      - mountPath: /host/proc/sys/kernel
        name: host-proc-sys-kernel
      - mountPath: /sys/fs/bpf
        mountPropagation: HostToContainer
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/cilium/netns
        mountPropagation: HostToContainer
        name: cilium-netns
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/lib/cilium/tls/hubble
        name: hubble-tls
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - cilium-dbg
      - build-config
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: config
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
    - command:
      - sh
      - -ec
      - |
        cp /usr/bin/cilium-mount /hostbin/cilium-mount;
        nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
        rm /hostbin/cilium-mount
      env:
      - name: CGROUP_ROOT
        value: /sys/fs/cgroup
      - name: BIN_PATH
        value: /opt/cni/bin
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: mount-cgroup
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_ADMIN
          - SYS_CHROOT
          - SYS_PTRACE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
    - command:
      - sh
      - -ec
      - |
        cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
        nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
        rm /hostbin/cilium-sysctlfix
      env:
      - name: BIN_PATH
        value: /opt/cni/bin
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: apply-sysctl-overwrites
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_ADMIN
          - SYS_CHROOT
          - SYS_PTRACE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
    - args:
      - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
      command:
      - /bin/bash
      - -c
      - --
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: mount-bpf-fs
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /sys/fs/bpf
        mountPropagation: Bidirectional
        name: bpf-maps
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
    - command:
      - /init-container.sh
      env:
      - name: CILIUM_ALL_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-state
            name: cilium-config
            optional: true
      - name: CILIUM_BPF_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-bpf-state
            name: cilium-config
            optional: true
      - name: WRITE_CNI_CONF_WHEN_READY
        valueFrom:
          configMapKeyRef:
            key: write-cni-conf-when-ready
            name: cilium-config
            optional: true
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: clean-cilium-state
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - SYS_ADMIN
          - SYS_RESOURCE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        mountPropagation: HostToContainer
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
    - command:
      - /install-plugin.sh
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: install-cni-binaries
      resources:
        requests:
          cpu: 100m
          memory: 10Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      appArmorProfile:
        type: Unconfined
    serviceAccount: cilium
    serviceAccountName: cilium
    terminationGracePeriodSeconds: 1
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - emptyDir: {}
      name: tmp
    - hostPath:
        path: /var/run/cilium
        type: DirectoryOrCreate
      name: cilium-run
    - hostPath:
        path: /var/run/netns
        type: DirectoryOrCreate
      name: cilium-netns
    - hostPath:
        path: /sys/fs/bpf
        type: DirectoryOrCreate
      name: bpf-maps
    - hostPath:
        path: /proc
        type: Directory
      name: hostproc
    - hostPath:
        path: /sys/fs/cgroup
        type: DirectoryOrCreate
      name: cilium-cgroup
    - hostPath:
        path: /opt/cni/bin
        type: DirectoryOrCreate
      name: cni-path
    - hostPath:
        path: /etc/cni/net.d
        type: DirectoryOrCreate
      name: etc-cni-netd
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: clustermesh-secrets
      projected:
        defaultMode: 256
        sources:
        - secret:
            name: cilium-clustermesh
            optional: true
        - secret:
            items:
            - key: tls.key
              path: common-etcd-client.key
            - key: tls.crt
              path: common-etcd-client.crt
            - key: ca.crt
              path: common-etcd-client-ca.crt
            name: clustermesh-apiserver-remote-cert
            optional: true
        - secret:
            items:
            - key: tls.key
              path: local-etcd-client.key
            - key: tls.crt
              path: local-etcd-client.crt
            - key: ca.crt
              path: local-etcd-client-ca.crt
            name: clustermesh-apiserver-local-cert
            optional: true
    - hostPath:
        path: /proc/sys/net
        type: Directory
      name: host-proc-sys-net
    - hostPath:
        path: /proc/sys/kernel
        type: Directory
      name: host-proc-sys-kernel
    - name: hubble-tls
      projected:
        defaultMode: 256
        sources:
        - secret:
            items:
            - key: tls.crt
              path: server.crt
            - key: tls.key
              path: server.key
            - key: ca.crt
              path: client-ca.crt
            name: hubble-server-certs
            optional: true
    - name: kube-api-access-6z77q
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:41:27Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:27:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:24:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://951530d8e1c83a9100476b52b93393ef2167332c6275be46764317c845686f12
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState:
        terminated:
          containerID: containerd://8d6e40c7cf5f3f818b553457e31db9ae3438c7cac5297a39f00b8d5d4efa113c
          exitCode: 1
          finishedAt: "2025-05-07T02:36:51Z"
          message: |-
            tion to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:35:38.9335242Z" level=info msg="Serving prometheus metrics on :9962" subsys=metrics
            time="2025-05-07T02:35:53.949477894Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:36:08.967705428Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:36:23.985433225Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:36:39.000164679Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:36:49.018332319Z" level=error msg="Unable to contact k8s api-server" error="Get \"https://127.0.0.1:7445/api/v1/namespaces/kube-system\": EOF - error from a previous attempt: read tcp 127.0.0.1:38576->127.0.0.1:7445: read: connection reset by peer" ipAddr="https://127.0.0.1:7445" subsys=k8s-client
            time=2025-05-07T02:36:49Z level=error msg="Start hook failed" function="client.(*compositeClientset).onStart (agent.infra.k8s-client)" error="Get \"https://127.0.0.1:7445/api/v1/namespaces/kube-system\": EOF - error from a previous attempt: read tcp 127.0.0.1:38576->127.0.0.1:7445: read: connection reset by peer"
            time=2025-05-07T02:36:49Z level=error msg="Start failed" error="Get \"https://127.0.0.1:7445/api/v1/namespaces/kube-system\": EOF - error from a previous attempt: read tcp 127.0.0.1:38576->127.0.0.1:7445: read: connection reset by peer" duration=1m10.085746667s
            time=2025-05-07T02:36:49Z level=info msg=Stopping
            time="2025-05-07T02:36:49.019117991Z" level=info msg="Stopped gops server" add
          reason: Error
          startedAt: "2025-05-07T02:35:38Z"
      name: cilium-agent
      ready: true
      restartCount: 368
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:44:16Z"
      volumeMounts:
      - mountPath: /host/proc/sys/net
        name: host-proc-sys-net
      - mountPath: /host/proc/sys/kernel
        name: host-proc-sys-kernel
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/cilium/netns
        name: cilium-netns
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/lib/cilium/tls/hubble
        name: hubble-tls
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    initContainerStatuses:
    - containerID: containerd://2273ca6462f73f2be69769952c40650261af912b3ec1a95e68059e7726e4b344
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: config
      ready: true
      restartCount: 1
      started: false
      state:
        terminated:
          containerID: containerd://2273ca6462f73f2be69769952c40650261af912b3ec1a95e68059e7726e4b344
          exitCode: 0
          finishedAt: "2025-05-07T02:43:01Z"
          reason: Completed
          startedAt: "2025-05-07T02:41:26Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://bd71e07b690f69f06d976852f11a2e63ac6d3692f4a5fcaa553fa092ddff5f11
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: mount-cgroup
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://bd71e07b690f69f06d976852f11a2e63ac6d3692f4a5fcaa553fa092ddff5f11
          exitCode: 0
          finishedAt: "2025-05-07T02:43:26Z"
          reason: Completed
          startedAt: "2025-05-07T02:43:08Z"
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://fd57133b6d146dbd446af811c146b737a62be882e0584aa305674e2ec3da2e2e
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: apply-sysctl-overwrites
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://fd57133b6d146dbd446af811c146b737a62be882e0584aa305674e2ec3da2e2e
          exitCode: 0
          finishedAt: "2025-05-07T02:43:44Z"
          reason: Completed
          startedAt: "2025-05-07T02:43:35Z"
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://16927453ad4fae98456d8fc69c51b7719334a587a4678d098202bf383734dfca
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: mount-bpf-fs
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://16927453ad4fae98456d8fc69c51b7719334a587a4678d098202bf383734dfca
          exitCode: 0
          finishedAt: "2025-05-07T02:44:03Z"
          reason: Completed
          startedAt: "2025-05-07T02:44:00Z"
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://aabfd4c65217fafffe26af7955b31f8420c7da510e7ec3c4af7625b76a02b59d
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: clean-cilium-state
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://aabfd4c65217fafffe26af7955b31f8420c7da510e7ec3c4af7625b76a02b59d
          exitCode: 0
          finishedAt: "2025-05-07T02:44:06Z"
          reason: Completed
          startedAt: "2025-05-07T02:44:06Z"
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://6e6c0f6e0e9a287e8c3002879b53f0bad69ae8ff93dab6fea497a61aee0fe19b
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: install-cni-binaries
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://6e6c0f6e0e9a287e8c3002879b53f0bad69ae8ff93dab6fea497a61aee0fe19b
          exitCode: 0
          finishedAt: "2025-05-07T02:44:12Z"
          reason: Completed
          startedAt: "2025-05-07T02:44:11Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6z77q
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 192.168.0.235
    podIPs:
    - ip: 192.168.0.235
    qosClass: Burstable
    startTime: "2025-04-21T14:24:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cilium.io/cilium-configmap-checksum: f6f3225dd63a52d6a561c038b20f94f8936f01139c1dcbc637dc0df90f717d94
    creationTimestamp: "2025-04-21T14:24:09Z"
    generateName: cilium-operator-79966f7757-
    labels:
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 79966f7757
    name: cilium-operator-79966f7757-tm778
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cilium-operator-79966f7757
      uid: da7c60ca-b946-4845-9afc-4dd56e9fe039
    resourceVersion: "103662093"
    uid: 822843a2-a4dd-40dd-848a-bd934e02e62c
  spec:
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              io.cilium/app: operator
          topologyKey: kubernetes.io/hostname
    automountServiceAccountToken: true
    containers:
    - args:
      - --config-dir=/tmp/cilium/config-map
      - --debug=$(CILIUM_DEBUG)
      command:
      - cilium-operator-generic
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CILIUM_DEBUG
        valueFrom:
          configMapKeyRef:
            key: debug
            name: cilium-config
            optional: true
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/operator-generic:v1.17.3@sha256:8bd38d0e97a955b2d725929d60df09d712fb62b60b930551a29abac2dd92e597
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 9234
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      name: cilium-operator
      ports:
      - containerPort: 9963
        hostPort: 9963
        name: prometheus
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 9234
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp/cilium/config-map
        name: cilium-config-path
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wd4fr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: cilium-operator
    serviceAccountName: cilium-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: cilium-config
      name: cilium-config-path
    - name: kube-api-access-wd4fr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:44:55Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:24:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:37:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:37:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:24:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bcf5d9eb1afbfb878e74e4b0d67230ec3e1cd9ea4aac085297a15e3f8a046bc0
      image: sha256:2aa79125e9616dc160d117a55b11e6d48348a8e4e66da53d764f0378c5a8c893
      imageID: quay.io/cilium/operator-generic@sha256:8bd38d0e97a955b2d725929d60df09d712fb62b60b930551a29abac2dd92e597
      lastState:
        terminated:
          containerID: containerd://30102010efbbee9492cc9cdcda7a945d5f25c4fb149e2029c48932048d1f235b
          exitCode: 1
          finishedAt: "2025-05-09T09:36:07Z"
          message: |
            ation=309.911µs
            time=2025-05-09T09:36:07Z level=info msg="Stop hook executed" module=operator.operator-controlplane function=*resource.resource[*github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2.CiliumNode].Stop duration=117.596µs
            time=2025-05-09T09:36:07Z level=info msg="Stop hook executed" module=operator.operator-controlplane function=*resource.resource[*github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1.CiliumBGPPeerConfig].Stop duration=12.235µs
            time=2025-05-09T09:36:07Z level=info msg="Stop hook executed" module=operator.operator-controlplane function=*resource.resource[*github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1.CiliumBGPNodeConfig].Stop duration=4.688µs
            time=2025-05-09T09:36:07Z level=info msg="Stop hook executed" module=operator.operator-controlplane function=*resource.resource[*github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1.CiliumBGPNodeConfigOverride].Stop duration=4.445µs
            time=2025-05-09T09:36:07Z level=info msg="Stop hook executed" module=operator.operator-controlplane function=*resource.resource[*github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1.CiliumBGPClusterConfig].Stop duration=3.893µs
            time=2025-05-09T09:36:07Z level=info msg="Stop hook executed" module=operator.operator-controlplane function=*job.group.Stop duration=7.126µs
            time=2025-05-09T09:36:07Z level=info msg="Stop hook executed" module=operator.operator-controlplane function=*resource.resource[*github.com/cilium/cilium/pkg/k8s/slim/k8s/api/core/v1.Service].Stop duration=633.101µs
            time=2025-05-09T09:36:07Z level=error msg="failed to delete reporter status tree" module=health error="provider is stopped, no more updates will take place"
            time=2025-05-09T09:36:07Z level=info msg="Stop hook executed" module=operator.operator-controlplane function=*job.group.Stop duration=254.428µs
            time="2025-05-09T09:36:07.686183954Z" level=info msg="Stopped gops server" address="127.0.0.1:9891" subsys=gops
            time="2025-05-09T09:36:07.687276814Z" level=fatal msg="Leader election lost" subsys=cilium-operator-generic
          reason: Error
          startedAt: "2025-05-09T09:35:08Z"
      name: cilium-operator
      ready: true
      restartCount: 562
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:37:35Z"
      volumeMounts:
      - mountPath: /tmp/cilium/config-map
        name: cilium-config-path
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wd4fr
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 192.168.0.236
    podIPs:
    - ip: 192.168.0.236
    qosClass: BestEffort
    startTime: "2025-04-21T14:24:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cilium.io/cilium-configmap-checksum: f6f3225dd63a52d6a561c038b20f94f8936f01139c1dcbc637dc0df90f717d94
      container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: unconfined
      container.apparmor.security.beta.kubernetes.io/cilium-agent: unconfined
      container.apparmor.security.beta.kubernetes.io/clean-cilium-state: unconfined
      container.apparmor.security.beta.kubernetes.io/config: unconfined
      container.apparmor.security.beta.kubernetes.io/install-cni-binaries: unconfined
      container.apparmor.security.beta.kubernetes.io/mount-bpf-fs: unconfined
      container.apparmor.security.beta.kubernetes.io/mount-cgroup: unconfined
    creationTimestamp: "2025-04-21T14:26:49Z"
    generateName: cilium-
    labels:
      app.kubernetes.io/name: cilium-agent
      app.kubernetes.io/part-of: cilium
      controller-revision-hash: 686476677f
      k8s-app: cilium
      pod-template-generation: "8"
    name: cilium-tb7q5
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: cilium
      uid: 339df624-cdaf-4ba1-be49-e5f5c3944fe1
    resourceVersion: "102239334"
    uid: f6de6fef-b1b7-44a6-964e-1121e11b250e
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-controlplane
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              k8s-app: cilium
          topologyKey: kubernetes.io/hostname
    automountServiceAccountToken: true
    containers:
    - args:
      - --config-dir=/tmp/cilium/config-map
      command:
      - cilium-agent
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CILIUM_CLUSTERMESH_CONFIG
        value: /var/lib/cilium/clustermesh/
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - bash
            - -c
            - |
              set -o errexit
              set -o pipefail
              set -o nounset

              # When running in AWS ENI mode, it's likely that 'aws-node' has
              # had a chance to install SNAT iptables rules. These can result
              # in dropped traffic, so we should attempt to remove them.
              # We do it using a 'postStart' hook since this may need to run
              # for nodes which might have already been init'ed but may still
              # have dangling rules. This is safe because there are no
              # dependencies on anything that is part of the startup script
              # itself, and can be safely run multiple times per node (e.g. in
              # case of a restart).
              if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
              then
                  echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                  iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
              fi
              echo 'Done!'
        preStop:
          exec:
            command:
            - /cni-uninstall.sh
      livenessProbe:
        failureThreshold: 10
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: cilium-agent
      ports:
      - containerPort: 4244
        hostPort: 4244
        name: peer-service
        protocol: TCP
      - containerPort: 9962
        hostPort: 9962
        name: prometheus
        protocol: TCP
      - containerPort: 9964
        hostPort: 9964
        name: envoy-metrics
        protocol: TCP
      - containerPort: 9901
        hostPort: 9901
        name: envoy-admin
        protocol: TCP
      - containerPort: 9965
        hostPort: 9965
        name: hubble-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        capabilities:
          add:
          - CHOWN
          - KILL
          - NET_ADMIN
          - NET_RAW
          - IPC_LOCK
          - SYS_ADMIN
          - SYS_RESOURCE
          - DAC_OVERRIDE
          - FOWNER
          - SETGID
          - SETUID
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      startupProbe:
        failureThreshold: 105
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /host/proc/sys/net
        name: host-proc-sys-net
      - mountPath: /host/proc/sys/kernel
        name: host-proc-sys-kernel
      - mountPath: /sys/fs/bpf
        mountPropagation: HostToContainer
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/cilium/netns
        mountPropagation: HostToContainer
        name: cilium-netns
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/lib/cilium/tls/hubble
        name: hubble-tls
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - cilium-dbg
      - build-config
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: config
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
    - command:
      - sh
      - -ec
      - |
        cp /usr/bin/cilium-mount /hostbin/cilium-mount;
        nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
        rm /hostbin/cilium-mount
      env:
      - name: CGROUP_ROOT
        value: /sys/fs/cgroup
      - name: BIN_PATH
        value: /opt/cni/bin
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: mount-cgroup
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_ADMIN
          - SYS_CHROOT
          - SYS_PTRACE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
    - command:
      - sh
      - -ec
      - |
        cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
        nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
        rm /hostbin/cilium-sysctlfix
      env:
      - name: BIN_PATH
        value: /opt/cni/bin
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: apply-sysctl-overwrites
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_ADMIN
          - SYS_CHROOT
          - SYS_PTRACE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
    - args:
      - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
      command:
      - /bin/bash
      - -c
      - --
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: mount-bpf-fs
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /sys/fs/bpf
        mountPropagation: Bidirectional
        name: bpf-maps
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
    - command:
      - /init-container.sh
      env:
      - name: CILIUM_ALL_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-state
            name: cilium-config
            optional: true
      - name: CILIUM_BPF_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-bpf-state
            name: cilium-config
            optional: true
      - name: WRITE_CNI_CONF_WHEN_READY
        valueFrom:
          configMapKeyRef:
            key: write-cni-conf-when-ready
            name: cilium-config
            optional: true
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: clean-cilium-state
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - SYS_ADMIN
          - SYS_RESOURCE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        mountPropagation: HostToContainer
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
    - command:
      - /install-plugin.sh
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: install-cni-binaries
      resources:
        requests:
          cpu: 100m
          memory: 10Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      appArmorProfile:
        type: Unconfined
    serviceAccount: cilium
    serviceAccountName: cilium
    terminationGracePeriodSeconds: 1
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - emptyDir: {}
      name: tmp
    - hostPath:
        path: /var/run/cilium
        type: DirectoryOrCreate
      name: cilium-run
    - hostPath:
        path: /var/run/netns
        type: DirectoryOrCreate
      name: cilium-netns
    - hostPath:
        path: /sys/fs/bpf
        type: DirectoryOrCreate
      name: bpf-maps
    - hostPath:
        path: /proc
        type: Directory
      name: hostproc
    - hostPath:
        path: /sys/fs/cgroup
        type: DirectoryOrCreate
      name: cilium-cgroup
    - hostPath:
        path: /opt/cni/bin
        type: DirectoryOrCreate
      name: cni-path
    - hostPath:
        path: /etc/cni/net.d
        type: DirectoryOrCreate
      name: etc-cni-netd
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: clustermesh-secrets
      projected:
        defaultMode: 256
        sources:
        - secret:
            name: cilium-clustermesh
            optional: true
        - secret:
            items:
            - key: tls.key
              path: common-etcd-client.key
            - key: tls.crt
              path: common-etcd-client.crt
            - key: ca.crt
              path: common-etcd-client-ca.crt
            name: clustermesh-apiserver-remote-cert
            optional: true
        - secret:
            items:
            - key: tls.key
              path: local-etcd-client.key
            - key: tls.crt
              path: local-etcd-client.crt
            - key: ca.crt
              path: local-etcd-client-ca.crt
            name: clustermesh-apiserver-local-cert
            optional: true
    - hostPath:
        path: /proc/sys/net
        type: Directory
      name: host-proc-sys-net
    - hostPath:
        path: /proc/sys/kernel
        type: Directory
      name: host-proc-sys-kernel
    - name: hubble-tls
      projected:
        defaultMode: 256
        sources:
        - secret:
            items:
            - key: tls.crt
              path: server.crt
            - key: tls.key
              path: server.key
            - key: ca.crt
              path: client-ca.crt
            name: hubble-server-certs
            optional: true
    - name: kube-api-access-cvzg2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:06Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:33:26Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:41:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:41:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:28:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://20402bf3930a78c639002e71b083bf19cbfa2703d33b228c24bed377f1fb0959
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState:
        terminated:
          containerID: containerd://d73175b69a9021d7c80ddf21dda4f7c01f7c7cee2f9ca1d9c044f0eb6a2ee886
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          message: |-
            nager
            time="2025-05-05T21:18:50.574352663Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:20:50.579887261Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:22:50.58443508Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:24:50.591874812Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:26:50.596965577Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:28:50.601485707Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:30:50.607128061Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:32:50.618138075Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:34:50.625943273Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:36:50.636419663Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:38:50.641298744Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manager
            time="2025-05-05T21:40:50.668322152Z" level=info msg="regenerating all endpoints" reason="periodic endpoint regeneration" subsys=endpoint-manage
          reason: Unknown
          startedAt: "2025-04-21T14:33:29Z"
      name: cilium-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:40:01Z"
      volumeMounts:
      - mountPath: /host/proc/sys/net
        name: host-proc-sys-net
      - mountPath: /host/proc/sys/kernel
        name: host-proc-sys-kernel
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/cilium/netns
        name: cilium-netns
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/lib/cilium/tls/hubble
        name: hubble-tls
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    initContainerStatuses:
    - containerID: containerd://7045d9a793f4e116b0a6762acdec7e947a3ba0834c1c0d987ebb07d03c77a21f
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: config
      ready: true
      restartCount: 1
      started: false
      state:
        terminated:
          containerID: containerd://7045d9a793f4e116b0a6762acdec7e947a3ba0834c1c0d987ebb07d03c77a21f
          exitCode: 0
          finishedAt: "2025-05-07T02:39:44Z"
          reason: Completed
          startedAt: "2025-05-07T02:39:05Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://bb34821e86d48a06f384db6cd3dc83f8c21f7b2629acff304fcda11b182dfbb4
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: mount-cgroup
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://bb34821e86d48a06f384db6cd3dc83f8c21f7b2629acff304fcda11b182dfbb4
          exitCode: 0
          finishedAt: "2025-05-07T02:39:52Z"
          reason: Completed
          startedAt: "2025-05-07T02:39:49Z"
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://1dcbde0cd63f1e4abea5d15ad0b6d7e79b566f1db904348a09535ff96fc486b6
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: apply-sysctl-overwrites
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://1dcbde0cd63f1e4abea5d15ad0b6d7e79b566f1db904348a09535ff96fc486b6
          exitCode: 0
          finishedAt: "2025-05-07T02:39:55Z"
          reason: Completed
          startedAt: "2025-05-07T02:39:54Z"
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://1d55868b799a01c409c5c1f4d7bb912e179c19d23b5b618903765eb2349a58c6
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: mount-bpf-fs
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://1d55868b799a01c409c5c1f4d7bb912e179c19d23b5b618903765eb2349a58c6
          exitCode: 0
          finishedAt: "2025-05-07T02:39:57Z"
          reason: Completed
          startedAt: "2025-05-07T02:39:56Z"
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://0fba8c419f70f0e7bb8e397a48d0bc3b7edafa9347a2c32ef4e7e70c8b4412ca
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: clean-cilium-state
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://0fba8c419f70f0e7bb8e397a48d0bc3b7edafa9347a2c32ef4e7e70c8b4412ca
          exitCode: 0
          finishedAt: "2025-05-07T02:39:58Z"
          reason: Completed
          startedAt: "2025-05-07T02:39:58Z"
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://337ea37609668dde6d333c9fde0ec968a04f1d41a6309d55aac1897d694fd8cb
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: install-cni-binaries
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://337ea37609668dde6d333c9fde0ec968a04f1d41a6309d55aac1897d694fd8cb
          exitCode: 0
          finishedAt: "2025-05-07T02:40:00Z"
          reason: Completed
          startedAt: "2025-05-07T02:39:59Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cvzg2
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 192.168.0.234
    podIPs:
    - ip: 192.168.0.234
    qosClass: Burstable
    startTime: "2025-04-21T14:28:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cilium.io/cilium-configmap-checksum: f6f3225dd63a52d6a561c038b20f94f8936f01139c1dcbc637dc0df90f717d94
      container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: unconfined
      container.apparmor.security.beta.kubernetes.io/cilium-agent: unconfined
      container.apparmor.security.beta.kubernetes.io/clean-cilium-state: unconfined
      container.apparmor.security.beta.kubernetes.io/config: unconfined
      container.apparmor.security.beta.kubernetes.io/install-cni-binaries: unconfined
      container.apparmor.security.beta.kubernetes.io/mount-bpf-fs: unconfined
      container.apparmor.security.beta.kubernetes.io/mount-cgroup: unconfined
    creationTimestamp: "2025-04-21T14:27:31Z"
    generateName: cilium-
    labels:
      app.kubernetes.io/name: cilium-agent
      app.kubernetes.io/part-of: cilium
      controller-revision-hash: 686476677f
      k8s-app: cilium
      pod-template-generation: "8"
    name: cilium-vwdsh
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: cilium
      uid: 339df624-cdaf-4ba1-be49-e5f5c3944fe1
    resourceVersion: "102241316"
    uid: c5fc9220-2ab7-412b-a707-360e3722373d
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-worker02
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              k8s-app: cilium
          topologyKey: kubernetes.io/hostname
    automountServiceAccountToken: true
    containers:
    - args:
      - --config-dir=/tmp/cilium/config-map
      command:
      - cilium-agent
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CILIUM_CLUSTERMESH_CONFIG
        value: /var/lib/cilium/clustermesh/
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      lifecycle:
        postStart:
          exec:
            command:
            - bash
            - -c
            - |
              set -o errexit
              set -o pipefail
              set -o nounset

              # When running in AWS ENI mode, it's likely that 'aws-node' has
              # had a chance to install SNAT iptables rules. These can result
              # in dropped traffic, so we should attempt to remove them.
              # We do it using a 'postStart' hook since this may need to run
              # for nodes which might have already been init'ed but may still
              # have dangling rules. This is safe because there are no
              # dependencies on anything that is part of the startup script
              # itself, and can be safely run multiple times per node (e.g. in
              # case of a restart).
              if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
              then
                  echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                  iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
              fi
              echo 'Done!'
        preStop:
          exec:
            command:
            - /cni-uninstall.sh
      livenessProbe:
        failureThreshold: 10
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      name: cilium-agent
      ports:
      - containerPort: 4244
        hostPort: 4244
        name: peer-service
        protocol: TCP
      - containerPort: 9962
        hostPort: 9962
        name: prometheus
        protocol: TCP
      - containerPort: 9964
        hostPort: 9964
        name: envoy-metrics
        protocol: TCP
      - containerPort: 9901
        hostPort: 9901
        name: envoy-admin
        protocol: TCP
      - containerPort: 9965
        hostPort: 9965
        name: hubble-metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        capabilities:
          add:
          - CHOWN
          - KILL
          - NET_ADMIN
          - NET_RAW
          - IPC_LOCK
          - SYS_ADMIN
          - SYS_RESOURCE
          - DAC_OVERRIDE
          - FOWNER
          - SETGID
          - SETUID
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      startupProbe:
        failureThreshold: 105
        httpGet:
          host: 127.0.0.1
          httpHeaders:
          - name: brief
            value: "true"
          path: /healthz
          port: 9879
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /host/proc/sys/net
        name: host-proc-sys-net
      - mountPath: /host/proc/sys/kernel
        name: host-proc-sys-kernel
      - mountPath: /sys/fs/bpf
        mountPropagation: HostToContainer
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/cilium/netns
        mountPropagation: HostToContainer
        name: cilium-netns
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/lib/cilium/tls/hubble
        name: hubble-tls
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - cilium-dbg
      - build-config
      env:
      - name: K8S_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CILIUM_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: config
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
    - command:
      - sh
      - -ec
      - |
        cp /usr/bin/cilium-mount /hostbin/cilium-mount;
        nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
        rm /hostbin/cilium-mount
      env:
      - name: CGROUP_ROOT
        value: /sys/fs/cgroup
      - name: BIN_PATH
        value: /opt/cni/bin
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: mount-cgroup
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_ADMIN
          - SYS_CHROOT
          - SYS_PTRACE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
    - command:
      - sh
      - -ec
      - |
        cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
        nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
        rm /hostbin/cilium-sysctlfix
      env:
      - name: BIN_PATH
        value: /opt/cni/bin
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: apply-sysctl-overwrites
      resources: {}
      securityContext:
        capabilities:
          add:
          - SYS_ADMIN
          - SYS_CHROOT
          - SYS_PTRACE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
    - args:
      - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
      command:
      - /bin/bash
      - -c
      - --
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: mount-bpf-fs
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /sys/fs/bpf
        mountPropagation: Bidirectional
        name: bpf-maps
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
    - command:
      - /init-container.sh
      env:
      - name: CILIUM_ALL_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-state
            name: cilium-config
            optional: true
      - name: CILIUM_BPF_STATE
        valueFrom:
          configMapKeyRef:
            key: clean-cilium-bpf-state
            name: cilium-config
            optional: true
      - name: WRITE_CNI_CONF_WHEN_READY
        valueFrom:
          configMapKeyRef:
            key: write-cni-conf-when-ready
            name: cilium-config
            optional: true
      - name: KUBERNETES_SERVICE_HOST
        value: 127.0.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "7445"
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: clean-cilium-state
      resources: {}
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - SYS_ADMIN
          - SYS_RESOURCE
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        mountPropagation: HostToContainer
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
    - command:
      - /install-plugin.sh
      image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      imagePullPolicy: IfNotPresent
      name: install-cni-binaries
      resources:
        requests:
          cpu: 100m
          memory: 10Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        seLinuxOptions:
          level: s0
          type: spc_t
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      appArmorProfile:
        type: Unconfined
    serviceAccount: cilium
    serviceAccountName: cilium
    terminationGracePeriodSeconds: 1
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - emptyDir: {}
      name: tmp
    - hostPath:
        path: /var/run/cilium
        type: DirectoryOrCreate
      name: cilium-run
    - hostPath:
        path: /var/run/netns
        type: DirectoryOrCreate
      name: cilium-netns
    - hostPath:
        path: /sys/fs/bpf
        type: DirectoryOrCreate
      name: bpf-maps
    - hostPath:
        path: /proc
        type: Directory
      name: hostproc
    - hostPath:
        path: /sys/fs/cgroup
        type: DirectoryOrCreate
      name: cilium-cgroup
    - hostPath:
        path: /opt/cni/bin
        type: DirectoryOrCreate
      name: cni-path
    - hostPath:
        path: /etc/cni/net.d
        type: DirectoryOrCreate
      name: etc-cni-netd
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: clustermesh-secrets
      projected:
        defaultMode: 256
        sources:
        - secret:
            name: cilium-clustermesh
            optional: true
        - secret:
            items:
            - key: tls.key
              path: common-etcd-client.key
            - key: tls.crt
              path: common-etcd-client.crt
            - key: ca.crt
              path: common-etcd-client-ca.crt
            name: clustermesh-apiserver-remote-cert
            optional: true
        - secret:
            items:
            - key: tls.key
              path: local-etcd-client.key
            - key: tls.crt
              path: local-etcd-client.crt
            - key: ca.crt
              path: local-etcd-client-ca.crt
            name: clustermesh-apiserver-local-cert
            optional: true
    - hostPath:
        path: /proc/sys/net
        type: Directory
      name: host-proc-sys-net
    - hostPath:
        path: /proc/sys/kernel
        type: Directory
      name: host-proc-sys-kernel
    - name: hubble-tls
      projected:
        defaultMode: 256
        sources:
        - secret:
            items:
            - key: tls.crt
              path: server.crt
            - key: tls.key
              path: server.key
            - key: ca.crt
              path: client-ca.crt
            name: hubble-server-certs
            optional: true
    - name: kube-api-access-s7g6c
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:45:13Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:32:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:50:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:50:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:28:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8aff2a279441c54202f4cc7beab5058e971f8b4776e617642f734c5b1febe3d4
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState:
        terminated:
          containerID: containerd://0d7f9c5e94c736c0ebab09c1586e7e9af192d51f79e08d19d0e438493897c4da
          exitCode: 1
          finishedAt: "2025-05-07T02:35:56Z"
          message: |-
            PIServer (cmd/cells.go:320)"
            time=2025-05-07T02:34:44Z level=info msg="Determined final XDP mode" module=agent.datapath.datapath-xdp-config acceleration-mode=disabled mode=disabled
            time=2025-05-07T02:34:44Z level=info msg="Starting hive"
            time="2025-05-07T02:34:44.115915701Z" level=info msg="Started gops server" address="127.0.0.1:9890" subsys=gops
            time="2025-05-07T02:34:44.116498301Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:34:44.116586867Z" level=info msg="Serving prometheus metrics on :9962" subsys=metrics
            time="2025-05-07T02:34:59.132074328Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:35:14.14992448Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:35:29.168755894Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time="2025-05-07T02:35:44.184621858Z" level=info msg="Establishing connection to apiserver" host="https://127.0.0.1:7445" subsys=k8s-client
            time=2025-05-07T02:35:54Z level=error msg="Start hook failed" function="client.(*compositeClientset).onStart (agent.infra.k8s-client)" error="Get \"https://127.0.0.1:7445/api/v1/namespaces/kube-system\": EOF"
            time="2025-05-07T02:35:54.199412859Z" level=error msg="Unable to contact k8s api-server" error="Get \"https://127.0.0.1:7445/api/v1/namespaces/kube-system\": EOF" ipAddr="https://127.0.0.1:7445" subsys=k8s-client
            time=2025-05-07T02:35:54Z level=error msg="Start failed" error="Get \"https://127.0.0.1:7445/api/v1/namespaces/kube-system\": EOF" duration=1m10.083592531s
            time=2025-05-07T02:35:
          reason: Error
          startedAt: "2025-05-07T02:34:43Z"
      name: cilium-agent
      ready: true
      restartCount: 367
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:47:27Z"
      volumeMounts:
      - mountPath: /host/proc/sys/net
        name: host-proc-sys-net
      - mountPath: /host/proc/sys/kernel
        name: host-proc-sys-kernel
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/cilium/netns
        name: cilium-netns
      - mountPath: /host/etc/cni/net.d
        name: etc-cni-netd
      - mountPath: /var/lib/cilium/clustermesh
        name: clustermesh-secrets
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/lib/cilium/tls/hubble
        name: hubble-tls
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    initContainerStatuses:
    - containerID: containerd://b50fef0480a339da5715ed3146c638933bd9973ad4bb2428866b56404f98edff
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: config
      ready: true
      restartCount: 1
      started: false
      state:
        terminated:
          containerID: containerd://b50fef0480a339da5715ed3146c638933bd9973ad4bb2428866b56404f98edff
          exitCode: 0
          finishedAt: "2025-05-07T02:46:58Z"
          reason: Completed
          startedAt: "2025-05-07T02:45:10Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://809e1b20065fa937898da297b78b1153bad536814d8717113bbc91ec0001bbe4
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: mount-cgroup
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://809e1b20065fa937898da297b78b1153bad536814d8717113bbc91ec0001bbe4
          exitCode: 0
          finishedAt: "2025-05-07T02:47:04Z"
          reason: Completed
          startedAt: "2025-05-07T02:47:02Z"
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://d3a17afa69e4248cfb7ce27bb1f0ceea4289ae98a0054437d097ae52f4936d84
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: apply-sysctl-overwrites
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://d3a17afa69e4248cfb7ce27bb1f0ceea4289ae98a0054437d097ae52f4936d84
          exitCode: 0
          finishedAt: "2025-05-07T02:47:12Z"
          reason: Completed
          startedAt: "2025-05-07T02:47:07Z"
      volumeMounts:
      - mountPath: /hostproc
        name: hostproc
      - mountPath: /hostbin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://0ed882ad2ba357312135bc51750f4a0d318e7982bf3f3c39310f2c739d60c87d
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: mount-bpf-fs
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://0ed882ad2ba357312135bc51750f4a0d318e7982bf3f3c39310f2c739d60c87d
          exitCode: 0
          finishedAt: "2025-05-07T02:47:17Z"
          reason: Completed
          startedAt: "2025-05-07T02:47:14Z"
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://ee6c7309123e68599c4419d2bd2ad77433bb1b26e992735c9f9abda28dd5f12c
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: clean-cilium-state
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://ee6c7309123e68599c4419d2bd2ad77433bb1b26e992735c9f9abda28dd5f12c
          exitCode: 0
          finishedAt: "2025-05-07T02:47:19Z"
          reason: Completed
          startedAt: "2025-05-07T02:47:19Z"
      volumeMounts:
      - mountPath: /sys/fs/bpf
        name: bpf-maps
      - mountPath: /sys/fs/cgroup
        name: cilium-cgroup
      - mountPath: /var/run/cilium
        name: cilium-run
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://258b8551e058455300a7474f18a337bed691596fd253294e876ec488aeacd40f
      image: sha256:6f13d3371c7c4c1c4b2577b79a932853dc3f8d020c5ab656e6e0c6c941bd7d49
      imageID: quay.io/cilium/cilium@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
      lastState: {}
      name: install-cni-binaries
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://258b8551e058455300a7474f18a337bed691596fd253294e876ec488aeacd40f
          exitCode: 0
          finishedAt: "2025-05-07T02:47:23Z"
          reason: Completed
          startedAt: "2025-05-07T02:47:23Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-path
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s7g6c
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 192.168.0.236
    podIPs:
    - ip: 192.168.0.236
    qosClass: Burstable
    startTime: "2025-04-21T14:28:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: 0f5d3b0bb82a32ac9e3003cf6f0f116744177859c5641934e762af1bc9e41c4a
      scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    creationTimestamp: "2024-10-24T07:54:31Z"
    generateName: coredns-6bc8fb9ddb-
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
      pod-template-hash: 6bc8fb9ddb
    name: coredns-6bc8fb9ddb-sv9sk
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-6bc8fb9ddb
      uid: 877b416e-ab58-4453-9656-21e39a701ab8
    resourceVersion: "4464737"
    uid: 5a3fe01c-530d-4591-a580-8decb121bddf
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.kubernetes.io/control-plane
              operator: Exists
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: coredns/coredns:1.11.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: udp-53
        protocol: UDP
      - containerPort: 53
        name: tcp-53
        protocol: TCP
      - containerPort: 9153
        name: tcp-9153
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      securityContext:
        capabilities:
          add:
          - NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-l8d5l
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-l8d5l
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:51Z"
      message: Pod was terminated in response to imminent node shutdown.
      reason: TerminationByKubelet
      status: "True"
      type: DisruptionTarget
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:49Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T08:00:08Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:49Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:49Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T08:00:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d6a9bf7fbfddb6c6d4c66c792c55bcb361637ce27d9153a45a0314ad0284f331
      image: docker.io/coredns/coredns:1.11.3
      imageID: docker.io/coredns/coredns@sha256:9caabbf6238b189a65d0d6e6ac138de60d6a1c419e5a341fbbb7c78382559c6e
      lastState: {}
      name: coredns
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://d6a9bf7fbfddb6c6d4c66c792c55bcb361637ce27d9153a45a0314ad0284f331
          exitCode: 0
          finishedAt: "2024-11-02T04:42:48Z"
          reason: Completed
          startedAt: "2024-10-24T08:00:37Z"
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-l8d5l
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Succeeded
    qosClass: Guaranteed
    startTime: "2024-10-24T08:00:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: 5e5e1aa27c0d50ff1167f19fcebcb65533c1e06bb3e8f58d50cdf764a2358cbd
      scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    creationTimestamp: "2025-04-27T19:38:55Z"
    generateName: coredns-779c8488bd-
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
      pod-template-hash: 779c8488bd
    name: coredns-779c8488bd-c5vrb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-779c8488bd
      uid: ac75922b-0b51-4bcf-a75d-09dc003db33f
    resourceVersion: "102240064"
    uid: f6826a85-1d77-4b53-9e00-433995099d47
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.kubernetes.io/control-plane
              operator: Exists
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: coredns/coredns:1.12.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: udp-53
        protocol: UDP
      - containerPort: 53
        name: tcp-53
        protocol: TCP
      - containerPort: 9153
        name: tcp-9153
        protocol: TCP
      readinessProbe:
        failureThreshold: 1
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5gqjf
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-5gqjf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:29Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-27T19:38:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:45:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:45:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-27T19:38:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://95438507215ba862aa11428606c9ce21840daeb9fb5076e518f4792d716a98c4
      image: docker.io/coredns/coredns:1.12.0
      imageID: docker.io/coredns/coredns@sha256:40384aa1f5ea6bfdc77997d243aec73da05f27aed0c5e9d65bfa98933c519d97
      lastState:
        terminated:
          containerID: containerd://cf468995440bc785f2d319823e4fb259e9e8f6e2b8834faaff7d99b5ac5bc4d6
          exitCode: 2
          finishedAt: "2025-05-07T02:44:11Z"
          reason: Error
          startedAt: "2025-05-07T02:42:27Z"
      name: coredns
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:44:35Z"
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5gqjf
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.147
    podIPs:
    - ip: 10.69.0.147
    qosClass: Guaranteed
    startTime: "2025-04-27T19:38:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-26T20:45:23Z"
    generateName: csi-nfs-controller-7dfdd76f9f-
    labels:
      app: csi-nfs-controller
      app.kubernetes.io/instance: csi-driver-nfs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-hash: 7dfdd76f9f
    name: csi-nfs-controller-7dfdd76f9f-v9kbf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: csi-nfs-controller-7dfdd76f9f
      uid: 5b6bc7d3-c249-491b-8196-be7e8e191812
    resourceVersion: "103662084"
    uid: e609bf17-1867-45da-82fa-3e64f8c506dc
  spec:
    containers:
    - args:
      - -v=2
      - --csi-address=$(ADDRESS)
      - --leader-election
      - --leader-election-namespace=kube-system
      - --extra-create-metadata=true
      - --feature-gates=HonorPVReclaimPolicy=true
      - --timeout=1200s
      - --retry-interval-max=30m
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
      imagePullPolicy: IfNotPresent
      name: csi-provisioner
      resources:
        limits:
          memory: 400Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
    - args:
      - -csi-address=$(ADDRESS)
      - -v=2
      - -leader-election
      - --leader-election-namespace=kube-system
      - -handle-volume-inuse-error=false
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1
      imagePullPolicy: IfNotPresent
      name: csi-resizer
      resources:
        limits:
          memory: 400Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
    - args:
      - --v=2
      - --csi-address=$(ADDRESS)
      - --leader-election-namespace=kube-system
      - --leader-election
      - --timeout=1200s
      - --retry-interval-max=30m
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.0
      imagePullPolicy: IfNotPresent
      name: csi-snapshotter
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
    - args:
      - --csi-address=/csi/csi.sock
      - --probe-timeout=3s
      - --http-endpoint=localhost:29652
      - --v=2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
    - args:
      - --v=5
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --drivername=nfs.csi.k8s.io
      - --mount-permissions=0
      - --working-mount-dir=/tmp
      - --default-ondelete-policy=delete
      - --use-tar-command-in-snapshot=false
      env:
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /healthz
          port: 29652
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: nfs
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: csi-nfs-controller-sa
    serviceAccountName: csi-nfs-controller-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/controlplane
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoSchedule
      key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - emptyDir: {}
      name: socket-dir
    - name: kube-api-access-qbqch
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:18Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-26T20:45:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:37:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:37:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-26T20:45:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f3109742e0a29e2f2cb771620b2a5a2a4281f4873785963753682c1043552fc2
      image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
      imageID: registry.k8s.io/sig-storage/csi-provisioner@sha256:d5e46da8aff7d73d6f00c761dae94472bcda6e78f4f17b3802dc89d44de0111b
      lastState:
        terminated:
          containerID: containerd://7fc562413c0aaaecc74f94923f09d743e33d01c149520ac840a9190309dfbd33
          exitCode: 1
          finishedAt: "2025-05-09T09:36:01Z"
          reason: Error
          startedAt: "2025-05-09T09:35:07Z"
      name: csi-provisioner
      ready: true
      restartCount: 1212
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:36:46Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://e687a8eededce903c7e3d0117df2c5fffff500045edc50d0d733b9df9b97ed90
      image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1
      imageID: registry.k8s.io/sig-storage/csi-resizer@sha256:2a0b297cc7c4cd376ac7413df339ff2fdaa1ec9d099aed92b5ea1f031ef7f639
      lastState:
        terminated:
          containerID: containerd://e4f3d7f9968dff824f4add3342f3bf5421f973153ed69fb1ac6fcb2a3924e648
          exitCode: 1
          finishedAt: "2025-05-09T09:36:38Z"
          reason: Error
          startedAt: "2025-05-09T09:36:12Z"
      name: csi-resizer
      ready: true
      restartCount: 1275
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:37:36Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://23cedcf36f93f1f8a88ecb736ee8d74d02555da682ef7cb516aa6cfbd271208e
      image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.0
      imageID: registry.k8s.io/sig-storage/csi-snapshotter@sha256:dd788d79cf4c1b8edee6d9b80b8a1ebfc51a38a365c5be656986b129be9ac784
      lastState:
        terminated:
          containerID: containerd://f5cda76c68f3fb56c0726aebd2727eaaa66aa2bc9e86936e64ba612ca9f6fa15
          exitCode: 1
          finishedAt: "2025-05-09T09:36:31Z"
          reason: Error
          startedAt: "2025-05-09T09:36:14Z"
      name: csi-snapshotter
      ready: true
      restartCount: 1200
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:37:33Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://80311f526d51789c6dc210ba314dca2842829cde631737a8ae79b2ccbd94a1ca
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imageID: registry.k8s.io/sig-storage/livenessprobe@sha256:2c5f9dc4ea5ac5509d93c664ae7982d4ecdec40ca7b0638c24e5b16243b8360f
      lastState:
        terminated:
          containerID: containerd://f1de35e8a6b633aad09b33d2892a60865359a9eaf9a6ecf7274fb8ee7f6cdbf7
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:47:33Z"
      name: liveness-probe
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:39:11Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://dd6b73923d6df774ba2ade28e1459a07443a2ff5e0352bfbf3e70aed1babcd40
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imageID: registry.k8s.io/sig-storage/nfsplugin@sha256:f04dcd24e77c45e995d86b6570267d4ff2c10138f0e10646b407a03937b20a23
      lastState:
        terminated:
          containerID: containerd://3d8feee85ca28b2668bdce76131e156289bcc9ea6197f3157dbaf75355fc25da
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:47:35Z"
      name: nfs
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:39:18Z"
      volumeMounts:
      - mountPath: /var/lib/kubelet/pods
        name: pods-mount-dir
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qbqch
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 192.168.0.234
    podIPs:
    - ip: 192.168.0.234
    qosClass: Burstable
    startTime: "2025-03-26T20:45:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-16T17:25:59Z"
    generateName: csi-nfs-node-
    labels:
      app: csi-nfs-node
      app.kubernetes.io/instance: csi-driver-nfs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      controller-revision-hash: 6bffbf7dfb
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-generation: "1"
    name: csi-nfs-node-9f88m
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-nfs-node
      uid: 747761f5-f7cc-4f56-a782-80f565aa67f1
    resourceVersion: "102240261"
    uid: 4ec92bc2-73ae-488f-9d1e-c89123cbd03f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-worker02
    containers:
    - args:
      - --csi-address=/csi/csi.sock
      - --probe-timeout=3s
      - --http-endpoint=localhost:29653
      - --v=2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fgcts
        readOnly: true
    - args:
      - --v=2
      - --csi-address=/csi/csi.sock
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fgcts
        readOnly: true
    - args:
      - --v=5
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --drivername=nfs.csi.k8s.io
      - --mount-permissions=0
      env:
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /healthz
          port: 29653
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: nfs
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fgcts
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: csi-nfs-node-sa
    serviceAccountName: csi-nfs-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/csi-nfsplugin
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry
        type: Directory
      name: registration-dir
    - name: kube-api-access-fgcts
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:45:14Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T17:25:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:46:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:46:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T17:25:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0989a786e2e167c782b52e76a55abedf3fd03292a68b74fcd91611a4ebde8d00
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imageID: registry.k8s.io/sig-storage/livenessprobe@sha256:2c5f9dc4ea5ac5509d93c664ae7982d4ecdec40ca7b0638c24e5b16243b8360f
      lastState:
        terminated:
          containerID: containerd://609a15a39fbde0018f31e13ee58b2c31b4aa5f29e10958241f90f11729ad139a
          exitCode: 2
          finishedAt: "2025-05-07T02:40:13Z"
          reason: Error
          startedAt: "2025-04-05T21:53:50Z"
      name: liveness-probe
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:44:53Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fgcts
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://1568de9ae99cc8df37210a8397798dce68c0b23a202599374ce1150f115a7af5
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imageID: registry.k8s.io/sig-storage/nfsplugin@sha256:f04dcd24e77c45e995d86b6570267d4ff2c10138f0e10646b407a03937b20a23
      lastState:
        terminated:
          containerID: containerd://1c41e2367aa1e1b75618c38d5a481193293e2ad5b5224f861c901347e97f1fde
          exitCode: 255
          finishedAt: "2025-05-07T02:45:54Z"
          reason: Error
          startedAt: "2025-05-07T02:45:11Z"
      name: nfs
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:46:34Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fgcts
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://ddd54e1f13b45966ebb980357fa3dd9e14f3181be26554936a3188e27bfbefa9
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imageID: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:d7138bcc3aa5f267403d45ad4292c95397e421ea17a0035888850f424c7de25d
      lastState:
        terminated:
          containerID: containerd://24c54fe9a6c8d952138c44669a07b3498e7bb3325ef5e2d4dc6636e9331c6dc9
          exitCode: 1
          finishedAt: "2025-05-07T02:45:50Z"
          reason: Error
          startedAt: "2025-05-07T02:45:01Z"
      name: node-driver-registrar
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:46:31Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fgcts
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 192.168.0.236
    podIPs:
    - ip: 192.168.0.236
    qosClass: Burstable
    startTime: "2025-03-16T17:25:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-05-07T02:39:39Z"
    generateName: csi-nfs-node-
    labels:
      app: csi-nfs-node
      app.kubernetes.io/instance: csi-driver-nfs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      controller-revision-hash: 6bffbf7dfb
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-generation: "1"
    name: csi-nfs-node-fzjdd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-nfs-node
      uid: 747761f5-f7cc-4f56-a782-80f565aa67f1
    resourceVersion: "102239501"
    uid: 3c26b59a-3750-4006-85ac-972ad29fa3f0
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-worker01
    containers:
    - args:
      - --csi-address=/csi/csi.sock
      - --probe-timeout=3s
      - --http-endpoint=localhost:29653
      - --v=2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz4vg
        readOnly: true
    - args:
      - --v=2
      - --csi-address=/csi/csi.sock
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz4vg
        readOnly: true
    - args:
      - --v=5
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --drivername=nfs.csi.k8s.io
      - --mount-permissions=0
      env:
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /healthz
          port: 29653
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: nfs
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz4vg
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: csi-nfs-node-sa
    serviceAccountName: csi-nfs-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/csi-nfsplugin
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry
        type: Directory
      name: registration-dir
    - name: kube-api-access-dz4vg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:41:27Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:41:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:18Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:18Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:40Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a021a36711ad807ff416ac2544e1db174859dceaff39932ac6f8dd2044c21871
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imageID: registry.k8s.io/sig-storage/livenessprobe@sha256:2c5f9dc4ea5ac5509d93c664ae7982d4ecdec40ca7b0638c24e5b16243b8360f
      lastState: {}
      name: liveness-probe
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:41:14Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz4vg
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://a398d6330bb2e549ae1e6a42480dcc163d62d1c05cb606f14c859115d6cd99b3
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imageID: registry.k8s.io/sig-storage/nfsplugin@sha256:f04dcd24e77c45e995d86b6570267d4ff2c10138f0e10646b407a03937b20a23
      lastState:
        terminated:
          containerID: containerd://1d4f8bfe069768367fa7acabeedbbe4e50065f7659ab0661755384c1176a31a8
          exitCode: 255
          finishedAt: "2025-05-07T02:42:14Z"
          reason: Error
          startedAt: "2025-05-07T02:41:26Z"
      name: nfs
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:42:17Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz4vg
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://5f9f88a4ababcb58be967ece61244af661755c9d0611033cde9f36c4da789655
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imageID: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:d7138bcc3aa5f267403d45ad4292c95397e421ea17a0035888850f424c7de25d
      lastState:
        terminated:
          containerID: containerd://787bb244b010c54a663587db0b4a716b0d14ffbe3e190d79a670de05960e3c9b
          exitCode: 1
          finishedAt: "2025-05-07T02:42:11Z"
          reason: Error
          startedAt: "2025-05-07T02:41:19Z"
      name: node-driver-registrar
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:42:15Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dz4vg
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 192.168.0.235
    podIPs:
    - ip: 192.168.0.235
    qosClass: Burstable
    startTime: "2025-05-07T02:41:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-16T17:25:59Z"
    generateName: csi-nfs-node-
    labels:
      app: csi-nfs-node
      app.kubernetes.io/instance: csi-driver-nfs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      controller-revision-hash: 6bffbf7dfb
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-generation: "1"
    name: csi-nfs-node-mjf89
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-nfs-node
      uid: 747761f5-f7cc-4f56-a782-80f565aa67f1
    resourceVersion: "102238875"
    uid: 024c8db4-36f9-4f4a-8036-773ed70a64ca
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-controlplane
    containers:
    - args:
      - --csi-address=/csi/csi.sock
      - --probe-timeout=3s
      - --http-endpoint=localhost:29653
      - --v=2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sgvk4
        readOnly: true
    - args:
      - --v=2
      - --csi-address=/csi/csi.sock
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sgvk4
        readOnly: true
    - args:
      - --v=5
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --drivername=nfs.csi.k8s.io
      - --mount-permissions=0
      env:
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /healthz
          port: 29653
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: nfs
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sgvk4
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: csi-nfs-node-sa
    serviceAccountName: csi-nfs-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/csi-nfsplugin
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry
        type: Directory
      name: registration-dir
    - name: kube-api-access-sgvk4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:07Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T17:25:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:50Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:50Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T17:25:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4021eb22fe8c707f917fd7c683fbbf3644f5ef70987925d056f265b994c8cb42
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imageID: registry.k8s.io/sig-storage/livenessprobe@sha256:2c5f9dc4ea5ac5509d93c664ae7982d4ecdec40ca7b0638c24e5b16243b8360f
      lastState:
        terminated:
          containerID: containerd://e29bc546b8342451aa4d5d742e384a352275a3230524fc90b9d59157536a1d2a
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:38:20Z"
      name: liveness-probe
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:38:40Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sgvk4
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://980ea7a84704f0f5288a1358e582fe97f7148f740e1e5f273c60e374f6e74610
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imageID: registry.k8s.io/sig-storage/nfsplugin@sha256:f04dcd24e77c45e995d86b6570267d4ff2c10138f0e10646b407a03937b20a23
      lastState:
        terminated:
          containerID: containerd://f808c55bc853288c4bbbc2f61235ef841e15202be8399858982dc5637b2ec83a
          exitCode: 255
          finishedAt: "2025-05-07T02:39:33Z"
          reason: Error
          startedAt: "2025-05-07T02:39:06Z"
      name: nfs
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:39:49Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sgvk4
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://f8498a91326d69aa6dbdcdfa1ae9181c1a30e4bed66066d1e66227d76d075167
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imageID: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:d7138bcc3aa5f267403d45ad4292c95397e421ea17a0035888850f424c7de25d
      lastState:
        terminated:
          containerID: containerd://9f2bf6503d4be74f6cdf905a40f50784836de61a9153df1d170d8cbf30b2b92e
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:38:25Z"
      name: node-driver-registrar
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:38:49Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sgvk4
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 192.168.0.234
    podIPs:
    - ip: 192.168.0.234
    qosClass: Burstable
    startTime: "2025-03-16T17:25:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-05-07T02:57:31Z"
    generateName: csi-nfs2-controller-5cdf8b7f-
    labels:
      app: csi-nfs2-controller
      app.kubernetes.io/instance: csi-driver-nfs2
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-hash: 5cdf8b7f
    name: csi-nfs2-controller-5cdf8b7f-sp5ns
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: csi-nfs2-controller-5cdf8b7f
      uid: 2ac28978-ae3f-4df4-85bf-b4fd5ad21050
    resourceVersion: "103662222"
    uid: ac390119-27ac-4e66-9aaa-8ecc2c7a4bd0
  spec:
    containers:
    - args:
      - -v=2
      - --csi-address=$(ADDRESS)
      - --leader-election
      - --leader-election-namespace=kube-system
      - --extra-create-metadata=true
      - --feature-gates=HonorPVReclaimPolicy=true
      - --timeout=1200s
      - --retry-interval-max=30m
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
      imagePullPolicy: IfNotPresent
      name: csi-provisioner
      resources:
        limits:
          memory: 400Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
    - args:
      - -csi-address=$(ADDRESS)
      - -v=2
      - -leader-election
      - --leader-election-namespace=kube-system
      - -handle-volume-inuse-error=false
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1
      imagePullPolicy: IfNotPresent
      name: csi-resizer
      resources:
        limits:
          memory: 400Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
    - args:
      - --v=2
      - --csi-address=$(ADDRESS)
      - --leader-election-namespace=kube-system
      - --leader-election
      - --timeout=1200s
      - --retry-interval-max=30m
      env:
      - name: ADDRESS
        value: /csi/csi.sock
      image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.0
      imagePullPolicy: IfNotPresent
      name: csi-snapshotter
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
    - args:
      - --csi-address=/csi/csi.sock
      - --probe-timeout=3s
      - --http-endpoint=localhost:29652
      - --v=2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
    - args:
      - --v=5
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --drivername=nfs2.csi.k8s.io
      - --mount-permissions=0
      - --working-mount-dir=/tmp
      - --default-ondelete-policy=delete
      - --use-tar-command-in-snapshot=false
      env:
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /healthz
          port: 29652
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: nfs
      resources:
        limits:
          memory: 200Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: csi-nfs2-controller-sa
    serviceAccountName: csi-nfs2-controller-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/controlplane
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    - effect: NoSchedule
      key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - emptyDir: {}
      name: socket-dir
    - name: kube-api-access-r6nwt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:57:46Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:57:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:38:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:38:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:57:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e34e469ffc5c8eebb35ff41f3edb6cddd0d9fcf34c5bfa1a511f762235cd6c05
      image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
      imageID: registry.k8s.io/sig-storage/csi-provisioner@sha256:d5e46da8aff7d73d6f00c761dae94472bcda6e78f4f17b3802dc89d44de0111b
      lastState:
        terminated:
          containerID: containerd://e38b77e6fcd5c1baba9b41c8b6224e680ec4a759aa2e2fe333d8524cb65aaed9
          exitCode: 1
          finishedAt: "2025-05-09T09:35:29Z"
          reason: Error
          startedAt: "2025-05-09T09:33:29Z"
      name: csi-provisioner
      ready: true
      restartCount: 13
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:36:08Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://3b4efbfdeca59d9cad9107e7416659e9614d8c26288b71267bf3ff239bd20bb0
      image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1
      imageID: registry.k8s.io/sig-storage/csi-resizer@sha256:2a0b297cc7c4cd376ac7413df339ff2fdaa1ec9d099aed92b5ea1f031ef7f639
      lastState:
        terminated:
          containerID: containerd://7ac9dfbd8441490f62bb612f30e3803448715c8226d99530c12a2032866ef73c
          exitCode: 1
          finishedAt: "2025-05-09T09:36:38Z"
          reason: Error
          startedAt: "2025-05-09T09:36:13Z"
      name: csi-resizer
      ready: true
      restartCount: 17
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:38:06Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://58d7dc44d23ed3ffa5ae59e3f8a7929008039c2e86fe648135ce1f834cbbf2bb
      image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.0
      imageID: registry.k8s.io/sig-storage/csi-snapshotter@sha256:dd788d79cf4c1b8edee6d9b80b8a1ebfc51a38a365c5be656986b129be9ac784
      lastState:
        terminated:
          containerID: containerd://8d069a4d795eb6de0daa5367ce24f2dbedf9aa11268a240bc60035ad08b4a24a
          exitCode: 1
          finishedAt: "2025-05-09T09:36:31Z"
          reason: Error
          startedAt: "2025-05-09T09:36:14Z"
      name: csi-snapshotter
      ready: true
      restartCount: 17
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:38:07Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://4222ba0fe9d8f37d1c0a39b1ba0a8c7170c1ec1ec3b7f159c319937c219ae889
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imageID: registry.k8s.io/sig-storage/livenessprobe@sha256:2c5f9dc4ea5ac5509d93c664ae7982d4ecdec40ca7b0638c24e5b16243b8360f
      lastState: {}
      name: liveness-probe
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:57:42Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://0da1ac6044f63ebc417ca5f6f0e3c28ff1176f73bc3434f8ab925fde5ea4ce63
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imageID: registry.k8s.io/sig-storage/nfsplugin@sha256:f04dcd24e77c45e995d86b6570267d4ff2c10138f0e10646b407a03937b20a23
      lastState: {}
      name: nfs
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:57:45Z"
      volumeMounts:
      - mountPath: /var/lib/kubelet/pods
        name: pods-mount-dir
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r6nwt
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 192.168.0.236
    podIPs:
    - ip: 192.168.0.236
    qosClass: Burstable
    startTime: "2025-05-07T02:57:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-16T22:06:21Z"
    generateName: csi-nfs2-node-
    labels:
      app: csi-nfs2-node
      app.kubernetes.io/instance: csi-driver-nfs2
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      controller-revision-hash: b89c44b54
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-generation: "1"
    name: csi-nfs2-node-cccjz
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-nfs2-node
      uid: 7b5abb0c-1f43-411c-b745-9e8a8feaebe0
    resourceVersion: "102240219"
    uid: 9963552e-dde4-4d03-bcb8-bad1ed1da98c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-worker02
    containers:
    - args:
      - --csi-address=/csi/csi.sock
      - --probe-timeout=3s
      - --http-endpoint=localhost:39653
      - --v=2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-828kl
        readOnly: true
    - args:
      - --v=2
      - --csi-address=/csi/csi.sock
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-828kl
        readOnly: true
    - args:
      - --v=5
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --drivername=nfs2.csi.k8s.io
      - --mount-permissions=0
      env:
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /healthz
          port: 39653
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: nfs
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-828kl
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: csi-nfs2-node-sa
    serviceAccountName: csi-nfs2-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/csi-nfsplugin
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry
        type: Directory
      name: registration-dir
    - name: kube-api-access-828kl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:45:03Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T22:06:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:46:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:46:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T22:06:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6318f0864a44f7656a8ad9c65403ec38ef6733d9b982a4dc75f5ddec00c920e2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imageID: registry.k8s.io/sig-storage/livenessprobe@sha256:2c5f9dc4ea5ac5509d93c664ae7982d4ecdec40ca7b0638c24e5b16243b8360f
      lastState:
        terminated:
          containerID: containerd://6278c34ae6f8d5614b5ef92cf34183fdcc322b14d9710af18c7c35cc100967b8
          exitCode: 2
          finishedAt: "2025-05-07T02:40:13Z"
          reason: Error
          startedAt: "2025-04-05T21:53:50Z"
      name: liveness-probe
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:44:44Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-828kl
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://493e3a0400f42a7ac8b5e118d477a8508dc1a0c39fd2a7ba482803db58dbf4cc
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imageID: registry.k8s.io/sig-storage/nfsplugin@sha256:f04dcd24e77c45e995d86b6570267d4ff2c10138f0e10646b407a03937b20a23
      lastState:
        terminated:
          containerID: containerd://7791e52e4950e583f23d06a1e52fda4cb4dbfa873b865ccdaf83b3cabbc50705
          exitCode: 2
          finishedAt: "2025-05-07T02:40:12Z"
          reason: Error
          startedAt: "2025-04-05T21:54:33Z"
      name: nfs
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:45:03Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-828kl
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://996cf7658f9168eb9febd80d4d76e77c662ff0e526ae5593777d1bbf5d167ca1
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imageID: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:d7138bcc3aa5f267403d45ad4292c95397e421ea17a0035888850f424c7de25d
      lastState:
        terminated:
          containerID: containerd://852507db8272bd3b949e05f0e2a8687c27106936fc574f348a1a55be4bdac9b4
          exitCode: 1
          finishedAt: "2025-05-07T02:45:50Z"
          reason: Error
          startedAt: "2025-05-07T02:44:54Z"
      name: node-driver-registrar
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:46:25Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-828kl
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 192.168.0.236
    podIPs:
    - ip: 192.168.0.236
    qosClass: Burstable
    startTime: "2025-03-16T22:06:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-16T22:06:21Z"
    generateName: csi-nfs2-node-
    labels:
      app: csi-nfs2-node
      app.kubernetes.io/instance: csi-driver-nfs2
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      controller-revision-hash: b89c44b54
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-generation: "1"
    name: csi-nfs2-node-knb2n
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-nfs2-node
      uid: 7b5abb0c-1f43-411c-b745-9e8a8feaebe0
    resourceVersion: "102239551"
    uid: f477daff-da83-4011-b28f-c47ecfb590e3
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-worker01
    containers:
    - args:
      - --csi-address=/csi/csi.sock
      - --probe-timeout=3s
      - --http-endpoint=localhost:39653
      - --v=2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-df5j6
        readOnly: true
    - args:
      - --v=2
      - --csi-address=/csi/csi.sock
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-df5j6
        readOnly: true
    - args:
      - --v=5
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --drivername=nfs2.csi.k8s.io
      - --mount-permissions=0
      env:
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /healthz
          port: 39653
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: nfs
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-df5j6
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: csi-nfs2-node-sa
    serviceAccountName: csi-nfs2-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/csi-nfsplugin
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry
        type: Directory
      name: registration-dir
    - name: kube-api-access-df5j6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:41:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T22:06:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T22:06:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://74307d807d168338ad00ac9d9f943980b987781b0d8a7233b25284c08a4d4088
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imageID: registry.k8s.io/sig-storage/livenessprobe@sha256:2c5f9dc4ea5ac5509d93c664ae7982d4ecdec40ca7b0638c24e5b16243b8360f
      lastState:
        terminated:
          containerID: containerd://8019975c4d3b791f11f1da23906aee87f90bf4019254cdcaf23382c1857cf51e
          exitCode: 2
          finishedAt: "2025-05-07T02:39:07Z"
          reason: Error
          startedAt: "2025-03-27T01:18:42Z"
      name: liveness-probe
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:41:13Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-df5j6
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://d0fca3222f91ab879afe582b9a01c21dafd255a3579d06bfc133156d45283968
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imageID: registry.k8s.io/sig-storage/nfsplugin@sha256:f04dcd24e77c45e995d86b6570267d4ff2c10138f0e10646b407a03937b20a23
      lastState:
        terminated:
          containerID: containerd://2b88e46f916e621dca3dfeeaada4f96d17ca8d8cbbb1ce5b4f72d993b6938145
          exitCode: 2
          finishedAt: "2025-05-07T02:39:07Z"
          reason: Error
          startedAt: "2025-03-27T01:19:19Z"
      name: nfs
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:41:24Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-df5j6
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://b376923e5206f4f9dfa9922cd5339a0a8bfcd7e930becb6630cfb9dbdba4c3de
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imageID: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:d7138bcc3aa5f267403d45ad4292c95397e421ea17a0035888850f424c7de25d
      lastState:
        terminated:
          containerID: containerd://0fb67634cc710f59c0d4e628051698dd33e19e87ed161da5cbb7de10ba5e70a1
          exitCode: 1
          finishedAt: "2025-05-07T02:42:11Z"
          reason: Error
          startedAt: "2025-05-07T02:41:18Z"
      name: node-driver-registrar
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:42:27Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-df5j6
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 192.168.0.235
    podIPs:
    - ip: 192.168.0.235
    qosClass: Burstable
    startTime: "2025-03-16T22:06:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-16T22:06:20Z"
    generateName: csi-nfs2-node-
    labels:
      app: csi-nfs2-node
      app.kubernetes.io/instance: csi-driver-nfs2
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      controller-revision-hash: b89c44b54
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-generation: "1"
    name: csi-nfs2-node-tgssd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: csi-nfs2-node
      uid: 7b5abb0c-1f43-411c-b745-9e8a8feaebe0
    resourceVersion: "102238525"
    uid: f96c2535-246b-4325-a6e3-6c5669552db8
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-controlplane
    containers:
    - args:
      - --csi-address=/csi/csi.sock
      - --probe-timeout=3s
      - --http-endpoint=localhost:39653
      - --v=2
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imagePullPolicy: IfNotPresent
      name: liveness-probe
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dwjqr
        readOnly: true
    - args:
      - --v=2
      - --csi-address=/csi/csi.sock
      - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
      env:
      - name: DRIVER_REG_SOCK_PATH
        value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imagePullPolicy: IfNotPresent
      name: node-driver-registrar
      resources:
        limits:
          memory: 100Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dwjqr
        readOnly: true
    - args:
      - --v=5
      - --nodeid=$(NODE_ID)
      - --endpoint=$(CSI_ENDPOINT)
      - --drivername=nfs2.csi.k8s.io
      - --mount-permissions=0
      env:
      - name: NODE_ID
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: CSI_ENDPOINT
        value: unix:///csi/csi.sock
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          host: localhost
          path: /healthz
          port: 39653
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      name: nfs
      resources:
        limits:
          memory: 300Mi
        requests:
          cpu: 10m
          memory: 20Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - SYS_ADMIN
          drop:
          - ALL
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        mountPropagation: Bidirectional
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dwjqr
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: csi-nfs2-node-sa
    serviceAccountName: csi-nfs2-node-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/lib/kubelet/plugins/csi-nfsplugin
        type: DirectoryOrCreate
      name: socket-dir
    - hostPath:
        path: /var/lib/kubelet/pods
        type: Directory
      name: pods-mount-dir
    - hostPath:
        path: /var/lib/kubelet/plugins_registry
        type: Directory
      name: registration-dir
    - name: kube-api-access-dwjqr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T22:06:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:39:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-16T22:06:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5f09f167c048ad626890c0b9498e63196ade3fc6bd08134264e389e0943a5766
      image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
      imageID: registry.k8s.io/sig-storage/livenessprobe@sha256:2c5f9dc4ea5ac5509d93c664ae7982d4ecdec40ca7b0638c24e5b16243b8360f
      lastState:
        terminated:
          containerID: containerd://982324fe02b719398c228429818185b352a04c6a1333da4ad79a345a30a709fd
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:38:19Z"
      name: liveness-probe
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:38:41Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dwjqr
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://81dc3478ac9d35a7d3d5d30d6919e8a4be3ceeddea7debbb7e5177f4aa2cf34b
      image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
      imageID: registry.k8s.io/sig-storage/nfsplugin@sha256:f04dcd24e77c45e995d86b6570267d4ff2c10138f0e10646b407a03937b20a23
      lastState:
        terminated:
          containerID: containerd://c77b057d9a027f97cc2a8b92e3b96a3fe66e939643b878cdfaefa35cfa648e20
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:38:25Z"
      name: nfs
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:39:12Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /var/lib/kubelet/pods
        name: pods-mount-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dwjqr
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://a561df9499c68485a46da309183988663b8d9834f9b43a2ecf30a6ed0d3cd620
      image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
      imageID: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:d7138bcc3aa5f267403d45ad4292c95397e421ea17a0035888850f424c7de25d
      lastState:
        terminated:
          containerID: containerd://99a8e5e753f088f398c265b4263d1f0bad42f8dd93d9c5c4e71fb8b5fdf64d81
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:38:21Z"
      name: node-driver-registrar
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:39:00Z"
      volumeMounts:
      - mountPath: /csi
        name: socket-dir
      - mountPath: /registration
        name: registration-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dwjqr
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 192.168.0.234
    podIPs:
    - ip: 192.168.0.234
    qosClass: Burstable
    startTime: "2025-03-16T22:06:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cilium.io/hubble-relay-configmap-checksum: eff0e5f47a53fa4b010591dc8fd68bffd75ccd6298d9d502cc7125e0b3fede93
    creationTimestamp: "2025-05-07T02:40:21Z"
    generateName: hubble-relay-557d84fdf8-
    labels:
      app.kubernetes.io/name: hubble-relay
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-relay
      pod-template-hash: 557d84fdf8
    name: hubble-relay-557d84fdf8-hx8hc
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: hubble-relay-557d84fdf8
      uid: c313ce1a-57eb-4d8a-8458-f1b5be3cd931
    resourceVersion: "102241149"
    uid: 279c454d-22f8-4c0d-b7df-e6ffc46fe71a
  spec:
    affinity:
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              k8s-app: cilium
          topologyKey: kubernetes.io/hostname
    automountServiceAccountToken: false
    containers:
    - args:
      - serve
      command:
      - hubble-relay
      image: quay.io/cilium/hubble-relay:v1.17.3@sha256:f8674b5139111ac828a8818da7f2d344b4a5bfbaeb122c5dc9abed3e74000c55
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 12
        grpc:
          port: 4222
          service: ""
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: hubble-relay
      ports:
      - containerPort: 4245
        name: grpc
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        grpc:
          port: 4222
          service: ""
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      resources: {}
      securityContext:
        capabilities:
          drop:
          - ALL
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      startupProbe:
        failureThreshold: 20
        grpc:
          port: 4222
          service: ""
        initialDelaySeconds: 10
        periodSeconds: 3
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/hubble-relay
        name: config
        readOnly: true
      - mountPath: /var/lib/hubble-relay/tls
        name: tls
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65532
    serviceAccount: hubble-relay
    serviceAccountName: hubble-relay
    terminationGracePeriodSeconds: 1
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: config.yaml
          path: config.yaml
        name: hubble-relay-config
      name: config
    - name: tls
      projected:
        defaultMode: 256
        sources:
        - secret:
            items:
            - key: tls.crt
              path: client.crt
            - key: tls.key
              path: client.key
            - key: ca.crt
              path: hubble-server-ca.crt
            name: hubble-relay-client-certs
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:49:52Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:50:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:50:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ea8cfcc460249be93a7d826a2a33740e653c3cc626017e49f545b3556f80d2b8
      image: sha256:f9ae224ba18f12c7a7b9008585d3b24a009f1f55b1bc5519ba726065c3f85d3f
      imageID: quay.io/cilium/hubble-relay@sha256:f8674b5139111ac828a8818da7f2d344b4a5bfbaeb122c5dc9abed3e74000c55
      lastState: {}
      name: hubble-relay
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:49:50Z"
      volumeMounts:
      - mountPath: /etc/hubble-relay
        name: config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/lib/hubble-relay/tls
        name: tls
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.87
    podIPs:
    - ip: 10.69.0.87
    qosClass: BestEffort
    startTime: "2025-05-07T02:47:15Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cilium.io/hubble-ui-nginx-configmap-checksum: de069d2597e16e4de004ce684b15d74b2ab6051c717ae073d86199a76d91fcf1
    creationTimestamp: "2025-04-14T00:35:54Z"
    generateName: hubble-ui-7fd6bc845b-
    labels:
      app.kubernetes.io/name: hubble-ui
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-ui
      pod-template-hash: 7fd6bc845b
    name: hubble-ui-7fd6bc845b-bclgj
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: hubble-ui-7fd6bc845b
      uid: b5a723cb-71d8-4b56-80ff-1a15494787ba
    resourceVersion: "102240915"
    uid: 2047aac1-bb64-454a-8296-652b70f58785
  spec:
    automountServiceAccountToken: true
    containers:
    - image: quay.io/cilium/hubble-ui:v0.13.2@sha256:9e37c1296b802830834cc87342a9182ccbb71ffebb711971e849221bd9d59392
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8081
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: frontend
      ports:
      - containerPort: 8081
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8081
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/nginx/conf.d/default.conf
        name: hubble-ui-nginx-conf
        subPath: nginx.conf
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-clhwp
        readOnly: true
    - env:
      - name: EVENTS_SERVER_PORT
        value: "8090"
      - name: FLOWS_API_ADDR
        value: hubble-relay:80
      image: quay.io/cilium/hubble-ui-backend:v0.13.2@sha256:a034b7e98e6ea796ed26df8f4e71f83fc16465a19d166eff67a03b822c0bfa15
      imagePullPolicy: IfNotPresent
      name: backend
      ports:
      - containerPort: 8090
        name: grpc
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-clhwp
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
      runAsGroup: 1001
      runAsUser: 1001
    serviceAccount: hubble-ui
    serviceAccountName: hubble-ui
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: hubble-ui-nginx
      name: hubble-ui-nginx-conf
    - emptyDir: {}
      name: tmp-dir
    - name: kube-api-access-clhwp
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:47Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-14T00:35:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-14T00:35:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b4d6a9647458c43f8a43031d29dc97e20afbaf1ff8b671ac8b3f5daac6a73374
      image: sha256:ea0d31b07382091e2ee1fd2ebb8b0d29ffc0d814765a9a172326bb4acc4981fa
      imageID: quay.io/cilium/hubble-ui-backend@sha256:a034b7e98e6ea796ed26df8f4e71f83fc16465a19d166eff67a03b822c0bfa15
      lastState:
        terminated:
          containerID: containerd://ff1a1df8178493779224bb7cb937d01005fc9b0303cc1cd0155a076d54175ae3
          exitCode: 0
          finishedAt: "2025-05-07T02:38:47Z"
          reason: Completed
          startedAt: "2025-04-14T00:39:05Z"
      name: backend
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:48:45Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-clhwp
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://3842d92feb2c0669411cff400167552594b4e41dbdd0bc1c3044421b93597c88
      image: sha256:875daebd108d05fe3859c14244e873337f985156fd702a128d20169d71b7e9b4
      imageID: quay.io/cilium/hubble-ui@sha256:9e37c1296b802830834cc87342a9182ccbb71ffebb711971e849221bd9d59392
      lastState:
        terminated:
          containerID: containerd://55287922d0c86feee310dd581c7845c7f0056b1b67d3a0b50fa6c0fc364b8a90
          exitCode: 0
          finishedAt: "2025-05-07T02:38:48Z"
          reason: Completed
          startedAt: "2025-04-14T00:38:51Z"
      name: frontend
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:48:32Z"
      volumeMounts:
      - mountPath: /etc/nginx/conf.d/default.conf
        name: hubble-ui-nginx-conf
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-clhwp
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.249
    podIPs:
    - ip: 10.69.2.249
    qosClass: BestEffort
    startTime: "2025-04-14T00:35:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cilium.io/hubble-ui-nginx-configmap-checksum: e8acee96ed990156efd0291c8c33709d2c7902d2ec993eefa16c7cd3d1a9d84b
    creationTimestamp: "2024-10-24T09:02:30Z"
    generateName: hubble-ui-dff775b8d-
    labels:
      app.kubernetes.io/name: hubble-ui
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-ui
      pod-template-hash: dff775b8d
    name: hubble-ui-dff775b8d-b9k9x
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: hubble-ui-dff775b8d
      uid: 92cf2a01-1b5a-4bfb-b8c6-20a311372f64
    resourceVersion: "4464756"
    uid: 2d60ebd4-9db5-49be-af46-c7dba1c813b3
  spec:
    automountServiceAccountToken: true
    containers:
    - image: quay.io/cilium/hubble-ui:v0.13.1@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8081
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: frontend
      ports:
      - containerPort: 8081
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8081
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /etc/nginx/conf.d/default.conf
        name: hubble-ui-nginx-conf
        subPath: nginx.conf
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-j9wlg
        readOnly: true
    - env:
      - name: EVENTS_SERVER_PORT
        value: "8090"
      - name: FLOWS_API_ADDR
        value: hubble-relay:80
      image: quay.io/cilium/hubble-ui-backend:v0.13.1@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b
      imagePullPolicy: IfNotPresent
      name: backend
      ports:
      - containerPort: 8090
        name: grpc
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-j9wlg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
      runAsGroup: 1001
      runAsUser: 1001
    serviceAccount: hubble-ui
    serviceAccountName: hubble-ui
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: hubble-ui-nginx
      name: hubble-ui-nginx-conf
    - emptyDir: {}
      name: tmp-dir
    - name: kube-api-access-j9wlg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:47Z"
      message: Pod was terminated in response to imminent node shutdown.
      reason: TerminationByKubelet
      status: "True"
      type: DisruptionTarget
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:47Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T09:02:31Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:47Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:47Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T09:02:31Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0b536abe2a26e8f3d7e81398b4ab751afd127caf959a7af2c4124b2062c7f2d7
      image: sha256:f0ecf98c8a1ce15078db58c4116ff345723ca056700a7f93e43660a5c24fa85f
      imageID: quay.io/cilium/hubble-ui-backend@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b
      lastState: {}
      name: backend
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://0b536abe2a26e8f3d7e81398b4ab751afd127caf959a7af2c4124b2062c7f2d7
          exitCode: 0
          finishedAt: "2024-11-02T04:42:46Z"
          reason: Completed
          startedAt: "2024-10-24T09:02:37Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-j9wlg
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://432741c9c2a303f9cfdacccb31c37d014a78c069212e5a838ff2fdd6d86ea769
      image: sha256:9fa78123d65531147fe8df7d5714783f33cb8cad98d82ee5bb426c9228cd9f76
      imageID: quay.io/cilium/hubble-ui@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6
      lastState: {}
      name: frontend
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://432741c9c2a303f9cfdacccb31c37d014a78c069212e5a838ff2fdd6d86ea769
          exitCode: 0
          finishedAt: "2024-11-02T04:42:43Z"
          reason: Completed
          startedAt: "2024-10-24T09:02:35Z"
      volumeMounts:
      - mountPath: /etc/nginx/conf.d/default.conf
        name: hubble-ui-nginx-conf
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-j9wlg
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Succeeded
    qosClass: BestEffort
    startTime: "2024-10-24T09:02:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: f1021dff08df716aa739998ab422c869
      kubernetes.io/config.mirror: f1021dff08df716aa739998ab422c869
      kubernetes.io/config.seen: "2025-05-07T02:37:33.191011328Z"
      kubernetes.io/config.source: http
      talos.dev/config-file-version: "111"
      talos.dev/config-version: "1"
      talos.dev/secrets-version: "1"
    creationTimestamp: "2025-05-07T02:38:32Z"
    labels:
      k8s-app: kube-apiserver
      tier: control-plane
    name: kube-apiserver-talos-controlplane
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: talos-controlplane
      uid: 92b6e454-33d5-4b73-b5fd-4a7b07bd820f
    resourceVersion: "102238295"
    uid: a89f847e-1dbc-45e4-b80a-b4d23d0c5553
  spec:
    containers:
    - command:
      - /usr/local/bin/kube-apiserver
      - --admission-control-config-file=/system/config/kubernetes/kube-apiserver/admission-control-config.yaml
      - --advertise-address=$(POD_IP)
      - --allow-privileged=true
      - --anonymous-auth=false
      - --api-audiences=https://192.168.0.17:6443
      - --audit-log-maxage=30
      - --audit-log-maxbackup=10
      - --audit-log-maxsize=100
      - --audit-log-path=/var/log/audit/kube/kube-apiserver.log
      - --audit-policy-file=/system/config/kubernetes/kube-apiserver/auditpolicy.yaml
      - --authorization-mode=Node,RBAC
      - --bind-address=0.0.0.0
      - --client-ca-file=/system/secrets/kubernetes/kube-apiserver/ca.crt
      - --enable-admission-plugins=NodeRestriction
      - --enable-bootstrap-token-auth=true
      - --encryption-provider-config=/system/secrets/kubernetes/kube-apiserver/encryptionconfig.yaml
      - --etcd-cafile=/system/secrets/kubernetes/kube-apiserver/etcd-client-ca.crt
      - --etcd-certfile=/system/secrets/kubernetes/kube-apiserver/etcd-client.crt
      - --etcd-keyfile=/system/secrets/kubernetes/kube-apiserver/etcd-client.key
      - --etcd-servers=https://localhost:2379
      - --kubelet-client-certificate=/system/secrets/kubernetes/kube-apiserver/apiserver-kubelet-client.crt
      - --kubelet-client-key=/system/secrets/kubernetes/kube-apiserver/apiserver-kubelet-client.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --profiling=false
      - --proxy-client-cert-file=/system/secrets/kubernetes/kube-apiserver/front-proxy-client.crt
      - --proxy-client-key-file=/system/secrets/kubernetes/kube-apiserver/front-proxy-client.key
      - --requestheader-allowed-names=front-proxy-client
      - --requestheader-client-ca-file=/system/secrets/kubernetes/kube-apiserver/aggregator-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --secure-port=6443
      - --service-account-issuer=https://192.168.0.17:6443
      - --service-account-key-file=/system/secrets/kubernetes/kube-apiserver/service-account.pub
      - --service-account-signing-key-file=/system/secrets/kubernetes/kube-apiserver/service-account.key
      - --service-cluster-ip-range=10.96.0.0/16
      - --tls-cert-file=/system/secrets/kubernetes/kube-apiserver/apiserver.crt
      - --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
      - --tls-min-version=VersionTLS12
      - --tls-private-key-file=/system/secrets/kubernetes/kube-apiserver/apiserver.key
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: registry.k8s.io/kube-apiserver:v1.31.1
      imagePullPolicy: IfNotPresent
      name: kube-apiserver
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /system/secrets/kubernetes/kube-apiserver
        name: secrets
        readOnly: true
      - mountPath: /system/config/kubernetes/kube-apiserver
        name: config
        readOnly: true
      - mountPath: /var/log/audit/kube
        name: audit
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /system/secrets/kubernetes/kube-apiserver
        type: ""
      name: secrets
    - hostPath:
        path: /system/config/kubernetes/kube-apiserver
        type: ""
      name: config
    - hostPath:
        path: /var/log/audit/kube
        type: ""
      name: audit
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:49Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4967732c8f2eb0ae3cb6e4e9b38ce08060673ce2026bfc06bcf0ae4aadf3a880
      image: registry.k8s.io/kube-apiserver:v1.31.1
      imageID: registry.k8s.io/kube-apiserver@sha256:2409c23dbb5a2b7a81adbb184d3eac43ac653e9b97a7c0ee121b89bb3ef61fdb
      lastState: {}
      name: kube-apiserver
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:37:48Z"
      volumeMounts:
      - mountPath: /system/secrets/kubernetes/kube-apiserver
        name: secrets
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /system/config/kubernetes/kube-apiserver
        name: config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/log/audit/kube
        name: audit
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 192.168.0.234
    podIPs:
    - ip: 192.168.0.234
    qosClass: Burstable
    startTime: "2025-05-07T02:37:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: cfbd71accb75efbee4b62113a8c1d4ab
      kubernetes.io/config.mirror: cfbd71accb75efbee4b62113a8c1d4ab
      kubernetes.io/config.seen: "2025-05-07T02:37:33.191015184Z"
      kubernetes.io/config.source: http
      talos.dev/config-version: "1"
      talos.dev/secrets-version: "1"
    creationTimestamp: "2025-05-07T02:38:32Z"
    labels:
      k8s-app: kube-controller-manager
      tier: control-plane
    name: kube-controller-manager-talos-controlplane
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: talos-controlplane
      uid: 92b6e454-33d5-4b73-b5fd-4a7b07bd820f
    resourceVersion: "103662240"
    uid: 065608de-35cd-4c11-b1a2-935ac873a47b
  spec:
    containers:
    - command:
      - /usr/local/bin/kube-controller-manager
      - --use-service-account-credentials
      - --allocate-node-cidrs=true
      - --authentication-kubeconfig=/system/secrets/kubernetes/kube-controller-manager/kubeconfig
      - --authorization-kubeconfig=/system/secrets/kubernetes/kube-controller-manager/kubeconfig
      - --bind-address=0.0.0.0
      - --cluster-cidr=10.69.0.0/16
      - --cluster-signing-cert-file=/system/secrets/kubernetes/kube-controller-manager/ca.crt
      - --cluster-signing-key-file=/system/secrets/kubernetes/kube-controller-manager/ca.key
      - --configure-cloud-routes=false
      - --controllers=*,tokencleaner
      - --kubeconfig=/system/secrets/kubernetes/kube-controller-manager/kubeconfig
      - --leader-elect=true
      - --profiling=false
      - --root-ca-file=/system/secrets/kubernetes/kube-controller-manager/ca.crt
      - --service-account-private-key-file=/system/secrets/kubernetes/kube-controller-manager/service-account.key
      - --service-cluster-ip-range=10.96.0.0/16
      - --tls-min-version=VersionTLS13
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: registry.k8s.io/kube-controller-manager:v1.31.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /healthz
          port: 10257
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 50m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      startupProbe:
        failureThreshold: 12
        httpGet:
          host: localhost
          path: /healthz
          port: 10257
          scheme: HTTPS
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /system/secrets/kubernetes/kube-controller-manager
        name: secrets
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsGroup: 65535
      runAsNonRoot: true
      runAsUser: 65535
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /system/secrets/kubernetes/kube-controller-manager
        type: ""
      name: secrets
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:49Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:38:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:38:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ff6256e6d114c1b8bd77e0b5bf16131aff48b57dec273e8d36f08d90bdd2f54d
      image: registry.k8s.io/kube-controller-manager:v1.31.1
      imageID: registry.k8s.io/kube-controller-manager@sha256:9f9da5b27e03f89599cc40ba89150aebf3b4cff001e6db6d998674b34181e1a1
      lastState:
        terminated:
          containerID: containerd://dcd65a43a8d394eb6d55e47259a720eed01888e43c7eed6f85e979fc3f43ab08
          exitCode: 1
          finishedAt: "2025-05-09T09:36:30Z"
          reason: Error
          startedAt: "2025-05-09T09:35:47Z"
      name: kube-controller-manager
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:38:04Z"
      volumeMounts:
      - mountPath: /system/secrets/kubernetes/kube-controller-manager
        name: secrets
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 192.168.0.234
    podIPs:
    - ip: 192.168.0.234
    qosClass: Burstable
    startTime: "2025-05-07T02:37:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: d0798f8d66ee0c6069cca62765c26744
      kubernetes.io/config.mirror: d0798f8d66ee0c6069cca62765c26744
      kubernetes.io/config.seen: "2025-05-07T02:37:33.191016246Z"
      kubernetes.io/config.source: http
      talos.dev/config-version: "1"
      talos.dev/secrets-version: "1"
    creationTimestamp: "2025-05-07T02:38:32Z"
    labels:
      k8s-app: kube-scheduler
      tier: control-plane
    name: kube-scheduler-talos-controlplane
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: talos-controlplane
      uid: 92b6e454-33d5-4b73-b5fd-4a7b07bd820f
    resourceVersion: "103661924"
    uid: 54df89cd-94b9-432d-a591-109a8cd904a8
  spec:
    containers:
    - command:
      - /usr/local/bin/kube-scheduler
      - --authentication-kubeconfig=/system/secrets/kubernetes/kube-scheduler/kubeconfig
      - --authentication-tolerate-lookup-failure=false
      - --authorization-kubeconfig=/system/secrets/kubernetes/kube-scheduler/kubeconfig
      - --bind-address=0.0.0.0
      - --config=/system/config/kubernetes/kube-scheduler/scheduler-config.yaml
      - --leader-elect=true
      - --profiling=false
      - --tls-min-version=VersionTLS13
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: registry.k8s.io/kube-scheduler:v1.31.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /livez
          port: 10259
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: kube-scheduler
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /readyz
          port: 10259
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      startupProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /livez
          port: 10259
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /system/secrets/kubernetes/kube-scheduler
        name: secrets
        readOnly: true
      - mountPath: /system/config/kubernetes/kube-scheduler
        name: config
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsGroup: 65536
      runAsNonRoot: true
      runAsUser: 65536
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - hostPath:
        path: /system/secrets/kubernetes/kube-scheduler
        type: ""
      name: secrets
    - hostPath:
        path: /system/config/kubernetes/kube-scheduler
        type: ""
      name: config
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:49Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:36:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:36:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:37:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://91fa4bd3a7aef493d8b3b66a0748845044c953a4479f214003657d3077daed3c
      image: registry.k8s.io/kube-scheduler:v1.31.1
      imageID: registry.k8s.io/kube-scheduler@sha256:969a7e96340f3a927b3d652582edec2d6d82a083871d81ef5064b7edaab430d0
      lastState:
        terminated:
          containerID: containerd://40ef92b40f99f250b5ac44808b600154ca3fbb917aa13510bb608a8160e2550d
          exitCode: 1
          finishedAt: "2025-05-09T09:35:04Z"
          reason: Error
          startedAt: "2025-05-09T09:34:17Z"
      name: kube-scheduler
      ready: true
      restartCount: 21
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:36:13Z"
      volumeMounts:
      - mountPath: /system/secrets/kubernetes/kube-scheduler
        name: secrets
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /system/config/kubernetes/kube-scheduler
        name: config
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 192.168.0.234
    podIPs:
    - ip: 192.168.0.234
    qosClass: Burstable
    startTime: "2025-05-07T02:37:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-05-07T02:40:21Z"
    generateName: kubelet-csr-approver-56fd689858-
    labels:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/name: kubelet-csr-approver
      pod-template-hash: 56fd689858
    name: kubelet-csr-approver-56fd689858-vdzvn
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubelet-csr-approver-56fd689858
      uid: 1c9a41bb-304a-427d-af51-ec937cd8f8d7
    resourceVersion: "103662126"
    uid: d5cf7e8d-d768-4b15-8405-0c5f2fdb4ba5
  spec:
    containers:
    - args:
      - -metrics-bind-address
      - :8080
      - -health-probe-bind-address
      - :8081
      - -leader-election
      env:
      - name: PROVIDER_REGEX
        value: ^(talos-controlplane|talos-worker01|talos-worker02)$
      - name: BYPASS_DNS_RESOLUTION
        value: "true"
      - name: ALLOWED_DNS_NAMES
        value: "1"
      image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8081
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: kubelet-csr-approver
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fmdbv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubelet-csr-approver
    serviceAccountName: kubelet-csr-approver
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Equal
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-fmdbv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:49:35Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:37:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:37:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ed4f92ac1e7e44634f30eca5961922784a974ed69680ab9995de32b23aa96a7d
      image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.7
      imageID: ghcr.io/postfinance/kubelet-csr-approver@sha256:d1c9cc2cd14a19704a738b8a7da3a737c15243c27d2640bd8905cf1e37f18d3a
      lastState:
        terminated:
          containerID: containerd://6d01fed4c7f50d98bbb9c937ef6766a83fe3a7c2a2ffc8a453d828a3e0f90fad
          exitCode: 1
          finishedAt: "2025-05-09T09:37:04Z"
          reason: Error
          startedAt: "2025-05-09T09:35:30Z"
      name: kubelet-csr-approver
      ready: true
      restartCount: 15
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:37:51Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fmdbv
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.53
    podIPs:
    - ip: 10.69.0.53
    qosClass: Burstable
    startTime: "2025-05-07T02:47:15Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-19T00:01:59Z"
    generateName: kubelet-csr-approver-56fd689858-
    labels:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/name: kubelet-csr-approver
      pod-template-hash: 56fd689858
    name: kubelet-csr-approver-56fd689858-x8bcx
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubelet-csr-approver-56fd689858
      uid: 1c9a41bb-304a-427d-af51-ec937cd8f8d7
    resourceVersion: "102239958"
    uid: 3e43f9b2-df89-46f1-b5dc-3809da075e76
  spec:
    containers:
    - args:
      - -metrics-bind-address
      - :8080
      - -health-probe-bind-address
      - :8081
      - -leader-election
      env:
      - name: PROVIDER_REGEX
        value: ^(talos-controlplane|talos-worker01|talos-worker02)$
      - name: BYPASS_DNS_RESOLUTION
        value: "true"
      - name: ALLOWED_DNS_NAMES
        value: "1"
      image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8081
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: kubelet-csr-approver
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fsvj4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker02
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubelet-csr-approver
    serviceAccountName: kubelet-csr-approver
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Equal
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-fsvj4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:40:16Z"
      message: Pod was terminated in response to imminent node shutdown.
      reason: TerminationByKubelet
      status: "True"
      type: DisruptionTarget
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:44:23Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-19T00:01:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:40:16Z"
      reason: PodFailed
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:40:16Z"
      reason: PodFailed
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-19T00:01:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a6e9d52173c326349a43fc689dd98e95b907b6e899a28c485c44bc321371e9d3
      image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.7
      imageID: ghcr.io/postfinance/kubelet-csr-approver@sha256:d1c9cc2cd14a19704a738b8a7da3a737c15243c27d2640bd8905cf1e37f18d3a
      lastState: {}
      name: kubelet-csr-approver
      ready: false
      restartCount: 273
      started: false
      state:
        terminated:
          containerID: containerd://a6e9d52173c326349a43fc689dd98e95b907b6e899a28c485c44bc321371e9d3
          exitCode: 0
          finishedAt: "2025-05-07T02:39:52Z"
          reason: Completed
          startedAt: "2025-05-05T09:35:58Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fsvj4
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Failed
    qosClass: Burstable
    startTime: "2025-04-19T00:01:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-19T00:02:11Z"
    generateName: kubelet-csr-approver-56fd689858-
    labels:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/name: kubelet-csr-approver
      pod-template-hash: 56fd689858
    name: kubelet-csr-approver-56fd689858-xdbjt
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubelet-csr-approver-56fd689858
      uid: 1c9a41bb-304a-427d-af51-ec937cd8f8d7
    resourceVersion: "103661909"
    uid: 161d42c7-bdc8-4ff5-bbcf-797cf637473e
  spec:
    containers:
    - args:
      - -metrics-bind-address
      - :8080
      - -health-probe-bind-address
      - :8081
      - -leader-election
      env:
      - name: PROVIDER_REGEX
        value: ^(talos-controlplane|talos-worker01|talos-worker02)$
      - name: BYPASS_DNS_RESOLUTION
        value: "true"
      - name: ALLOWED_DNS_NAMES
        value: "1"
      image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8081
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: kubelet-csr-approver
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4jmkb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker01
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubelet-csr-approver
    serviceAccountName: kubelet-csr-approver
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Equal
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-4jmkb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:07Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-19T00:02:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:36:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:36:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-19T00:02:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c40324debbeb1fc743401c6a00b695267e1423c8eeec73d52c55eb5686f9acfc
      image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.7
      imageID: ghcr.io/postfinance/kubelet-csr-approver@sha256:d1c9cc2cd14a19704a738b8a7da3a737c15243c27d2640bd8905cf1e37f18d3a
      lastState:
        terminated:
          containerID: containerd://58036484bd5c9c372cc2e7561b99620239537ae7e68fc1e083f1e5832f529090
          exitCode: 1
          finishedAt: "2025-05-09T09:36:02Z"
          reason: Error
          startedAt: "2025-05-09T09:34:42Z"
      name: kubelet-csr-approver
      ready: true
      restartCount: 285
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:36:42Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4jmkb
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.237
    podIPs:
    - ip: 10.69.2.237
    qosClass: Burstable
    startTime: "2025-04-19T00:02:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-11-19T12:55:33Z"
    generateName: metrics-server-6dbd494876-
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/name: metrics-server
      pod-template-hash: 6dbd494876
    name: metrics-server-6dbd494876-976dp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-6dbd494876
      uid: c74c0806-d9ce-4659-b50d-b4eaa1617fb6
    resourceVersion: "102240568"
    uid: 6b79b61a-0a5d-47ee-998f-09c6913a93c3
  spec:
    containers:
    - args:
      - --secure-port=10250
      - --cert-dir=/tmp
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --kubelet-use-node-status-port
      - --metric-resolution=15s
      - --authorization-always-allow-paths=/metrics
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --kubelet-use-node-status-port
      - --metric-resolution=15s
      image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: metrics-server
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        initialDelaySeconds: 20
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7gwrs
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metrics-server
    serviceAccountName: metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp
    - name: kube-api-access-7gwrs
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:35Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-19T12:55:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-19T12:55:34Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a6dc45f4c39214b060d6a1c7c58285ec39a7eb1561434098e3cc9ca9871724e0
      image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
      imageID: registry.k8s.io/metrics-server/metrics-server@sha256:ffcb2bf004d6aa0a17d90e0247cf94f2865c8901dcab4427034c341951c239f9
      lastState:
        terminated:
          containerID: containerd://b50fce63f4b69fb746bb9d5f181a5f7845029084dd597fcb638c42d16ae5adc7
          exitCode: 2
          finishedAt: "2025-05-07T02:45:50Z"
          reason: Error
          startedAt: "2025-05-07T02:45:26Z"
      name: metrics-server
      ready: true
      restartCount: 2585
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:46:57Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7gwrs
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.128
    podIPs:
    - ip: 10.69.0.128
    qosClass: Burstable
    startTime: "2024-11-19T12:55:36Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-05-03T22:14:02Z"
    generateName: reloader-7b656d6bcf-
    labels:
      app: reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-2.1.3
      group: com.stakater.platform
      heritage: Helm
      pod-template-hash: 7b656d6bcf
      provider: stakater
      release: reloader
      version: v1.4.2
    name: reloader-7b656d6bcf-tll44
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: reloader-7b656d6bcf
      uid: 4bce34d2-d034-4b0f-abe7-2c7e843e91c1
    resourceVersion: "102241573"
    uid: e9e53940-3e5e-44b6-b344-ed3514c6baca
  spec:
    containers:
    - args:
      - --log-level=info
      env:
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      image: ghcr.io/stakater/reloader:v1.4.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /live
          port: http
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: reloader
      ports:
      - containerPort: 9090
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /metrics
          port: http
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fjrnj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker01
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: reloader
    serviceAccountName: reloader
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kube-api-access-fjrnj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:26Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-03T22:14:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-03T22:14:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://972c79f249ca2c1c1b3f6cfec6dabcb39d045cd104eecdfde60d8251ab31da10
      image: ghcr.io/stakater/reloader:v1.4.2
      imageID: ghcr.io/stakater/reloader@sha256:812a190d6d531b96e1451e6571b0e42edfbc9295ec101315a48f31bfe442f6eb
      lastState:
        terminated:
          containerID: containerd://6001de1678ad819979541107e6b14c4bf34991f2a54f8d5655b673f6ca7ceb13
          exitCode: 2
          finishedAt: "2025-05-07T02:49:21Z"
          reason: Error
          startedAt: "2025-05-07T02:48:25Z"
      name: reloader
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:50:39Z"
      volumeMounts:
      - mountPath: /tmp/
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fjrnj
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.79
    podIPs:
    - ip: 10.69.2.79
    qosClass: BestEffort
    startTime: "2025-05-03T22:14:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-27T19:39:37Z"
    generateName: spegel-
    labels:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/name: spegel
      controller-revision-hash: 5b89d955fc
      pod-template-generation: "4"
    name: spegel-hd68b
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: spegel
      uid: 675df56c-1660-498c-868c-8d9c1c937bdc
    resourceVersion: "102241406"
    uid: 5eb493ba-6dc9-4dc4-8d41-4de98f262467
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-worker01
    containers:
    - args:
      - registry
      - --log-level=INFO
      - --mirror-resolve-retries=3
      - --mirror-resolve-timeout=20ms
      - --registry-addr=:5000
      - --router-addr=:5001
      - --metrics-addr=:9090
      - --containerd-sock=/run/containerd/containerd.sock
      - --containerd-namespace=k8s.io
      - --containerd-registry-config-path=/etc/cri/conf.d/hosts
      - --bootstrap-kind=dns
      - --dns-bootstrap-domain=spegel-bootstrap.kube-system.svc.cluster.local.
      - --resolve-latest-tag=true
      - --containerd-content-path=/var/lib/containerd/io.containerd.content.v1.content
      - --debug-web-enabled=false
      env:
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      - name: NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      imagePullPolicy: IfNotPresent
      name: registry
      ports:
      - containerPort: 5000
        hostPort: 29999
        name: registry
        protocol: TCP
      - containerPort: 5001
        name: router
        protocol: TCP
      - containerPort: 9090
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: registry
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
      securityContext: {}
      startupProbe:
        failureThreshold: 60
        httpGet:
          path: /healthz
          port: registry
          scheme: HTTP
        periodSeconds: 3
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/containerd/containerd.sock
        name: containerd-sock
      - mountPath: /var/lib/containerd/io.containerd.content.v1.content
        name: containerd-content
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-m6dkl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - configuration
      - --log-level=INFO
      - --containerd-registry-config-path=/etc/cri/conf.d/hosts
      - --mirror-targets
      - http://$(NODE_IP):29999
      - http://$(NODE_IP):30021
      - --resolve-tags=true
      - --prepend-existing=false
      env:
      - name: NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      imagePullPolicy: IfNotPresent
      name: configuration
      resources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cri/conf.d/hosts
        name: containerd-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-m6dkl
        readOnly: true
    nodeName: talos-worker01
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: spegel
    serviceAccountName: spegel
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /run/containerd/containerd.sock
        type: Socket
      name: containerd-sock
    - hostPath:
        path: /var/lib/containerd/io.containerd.content.v1.content
        type: Directory
      name: containerd-content
    - hostPath:
        path: /etc/cri/conf.d/hosts
        type: DirectoryOrCreate
      name: containerd-config
    - name: kube-api-access-m6dkl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:19Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-27T19:40:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:50:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:50:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-27T19:39:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c6a417bea5aa53772b0343ba3349d25800092e4c62aa596d64410db663dae10a
      image: sha256:8915d2b4c600c01bff0f5f56ce271a2eed414aa9383aa854e26db20ce0be21a7
      imageID: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      lastState:
        terminated:
          containerID: containerd://010a56e29a4d4e5d75cd69b522cd95d6f3722d399f9e78f1052ea23f3f397d6e
          exitCode: 0
          finishedAt: "2025-05-07T02:39:07Z"
          reason: Completed
          startedAt: "2025-04-27T19:40:14Z"
      name: registry
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:50:37Z"
      volumeMounts:
      - mountPath: /run/containerd/containerd.sock
        name: containerd-sock
      - mountPath: /var/lib/containerd/io.containerd.content.v1.content
        name: containerd-content
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-m6dkl
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    initContainerStatuses:
    - containerID: containerd://559f62a834090e8e127257c687d520b2eb5629aa126449aa5cff545530c932b5
      image: sha256:8915d2b4c600c01bff0f5f56ce271a2eed414aa9383aa854e26db20ce0be21a7
      imageID: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      lastState: {}
      name: configuration
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://559f62a834090e8e127257c687d520b2eb5629aa126449aa5cff545530c932b5
          exitCode: 0
          finishedAt: "2025-05-07T02:49:17Z"
          reason: Completed
          startedAt: "2025-05-07T02:48:15Z"
      volumeMounts:
      - mountPath: /etc/cri/conf.d/hosts
        name: containerd-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-m6dkl
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.69.2.7
    podIPs:
    - ip: 10.69.2.7
    qosClass: Burstable
    startTime: "2025-04-27T19:39:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-27T19:39:36Z"
    generateName: spegel-
    labels:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/name: spegel
      controller-revision-hash: 5b89d955fc
      pod-template-generation: "4"
    name: spegel-sjdn2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: spegel
      uid: 675df56c-1660-498c-868c-8d9c1c937bdc
    resourceVersion: "102242024"
    uid: bc0b8ff7-62cd-477b-b0cb-26bdbae2f298
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-worker02
    containers:
    - args:
      - registry
      - --log-level=INFO
      - --mirror-resolve-retries=3
      - --mirror-resolve-timeout=20ms
      - --registry-addr=:5000
      - --router-addr=:5001
      - --metrics-addr=:9090
      - --containerd-sock=/run/containerd/containerd.sock
      - --containerd-namespace=k8s.io
      - --containerd-registry-config-path=/etc/cri/conf.d/hosts
      - --bootstrap-kind=dns
      - --dns-bootstrap-domain=spegel-bootstrap.kube-system.svc.cluster.local.
      - --resolve-latest-tag=true
      - --containerd-content-path=/var/lib/containerd/io.containerd.content.v1.content
      - --debug-web-enabled=false
      env:
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      - name: NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      imagePullPolicy: IfNotPresent
      name: registry
      ports:
      - containerPort: 5000
        hostPort: 29999
        name: registry
        protocol: TCP
      - containerPort: 5001
        name: router
        protocol: TCP
      - containerPort: 9090
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: registry
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
      securityContext: {}
      startupProbe:
        failureThreshold: 60
        httpGet:
          path: /healthz
          port: registry
          scheme: HTTP
        periodSeconds: 3
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/containerd/containerd.sock
        name: containerd-sock
      - mountPath: /var/lib/containerd/io.containerd.content.v1.content
        name: containerd-content
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-twgd4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - configuration
      - --log-level=INFO
      - --containerd-registry-config-path=/etc/cri/conf.d/hosts
      - --mirror-targets
      - http://$(NODE_IP):29999
      - http://$(NODE_IP):30021
      - --resolve-tags=true
      - --prepend-existing=false
      env:
      - name: NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      imagePullPolicy: IfNotPresent
      name: configuration
      resources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cri/conf.d/hosts
        name: containerd-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-twgd4
        readOnly: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: spegel
    serviceAccountName: spegel
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /run/containerd/containerd.sock
        type: Socket
      name: containerd-sock
    - hostPath:
        path: /var/lib/containerd/io.containerd.content.v1.content
        type: Directory
      name: containerd-content
    - hostPath:
        path: /etc/cri/conf.d/hosts
        type: DirectoryOrCreate
      name: containerd-config
    - name: kube-api-access-twgd4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:19Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-27T19:40:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:52:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:52:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-27T19:39:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f686bc3f659a1040906df9857a31d507a17b1e1fbd9ad7770902734a363926c1
      image: sha256:8915d2b4c600c01bff0f5f56ce271a2eed414aa9383aa854e26db20ce0be21a7
      imageID: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      lastState:
        terminated:
          containerID: containerd://b144ed6c2c582e4ef4ffa8ab8c7946510892c6506c81a39d61dd54f136055bad
          exitCode: 0
          finishedAt: "2025-05-07T02:40:13Z"
          reason: Completed
          startedAt: "2025-04-27T19:40:18Z"
      name: registry
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:52:29Z"
      volumeMounts:
      - mountPath: /run/containerd/containerd.sock
        name: containerd-sock
      - mountPath: /var/lib/containerd/io.containerd.content.v1.content
        name: containerd-content
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-twgd4
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    initContainerStatuses:
    - containerID: containerd://0ffabd823bbc609ece9696103ef1b7459f705b863679f62ff04a00da91beeded
      image: sha256:8915d2b4c600c01bff0f5f56ce271a2eed414aa9383aa854e26db20ce0be21a7
      imageID: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      lastState: {}
      name: configuration
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://0ffabd823bbc609ece9696103ef1b7459f705b863679f62ff04a00da91beeded
          exitCode: 0
          finishedAt: "2025-05-07T02:52:21Z"
          reason: Completed
          startedAt: "2025-05-07T02:51:19Z"
      volumeMounts:
      - mountPath: /etc/cri/conf.d/hosts
        name: containerd-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-twgd4
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.69.3.216
    podIPs:
    - ip: 10.69.3.216
    qosClass: Burstable
    startTime: "2025-04-27T19:39:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-27T19:39:05Z"
    generateName: spegel-
    labels:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/name: spegel
      controller-revision-hash: 5b89d955fc
      pod-template-generation: "4"
    name: spegel-twkpv
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: spegel
      uid: 675df56c-1660-498c-868c-8d9c1c937bdc
    resourceVersion: "102240701"
    uid: 0fe7d73c-f7c1-4171-bac5-4cd6d94ef548
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - talos-controlplane
    containers:
    - args:
      - registry
      - --log-level=INFO
      - --mirror-resolve-retries=3
      - --mirror-resolve-timeout=20ms
      - --registry-addr=:5000
      - --router-addr=:5001
      - --metrics-addr=:9090
      - --containerd-sock=/run/containerd/containerd.sock
      - --containerd-namespace=k8s.io
      - --containerd-registry-config-path=/etc/cri/conf.d/hosts
      - --bootstrap-kind=dns
      - --dns-bootstrap-domain=spegel-bootstrap.kube-system.svc.cluster.local.
      - --resolve-latest-tag=true
      - --containerd-content-path=/var/lib/containerd/io.containerd.content.v1.content
      - --debug-web-enabled=false
      env:
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      - name: NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      imagePullPolicy: IfNotPresent
      name: registry
      ports:
      - containerPort: 5000
        hostPort: 29999
        name: registry
        protocol: TCP
      - containerPort: 5001
        name: router
        protocol: TCP
      - containerPort: 9090
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: registry
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
      securityContext: {}
      startupProbe:
        failureThreshold: 60
        httpGet:
          path: /healthz
          port: registry
          scheme: HTTP
        periodSeconds: 3
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /run/containerd/containerd.sock
        name: containerd-sock
      - mountPath: /var/lib/containerd/io.containerd.content.v1.content
        name: containerd-content
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gtdm9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - configuration
      - --log-level=INFO
      - --containerd-registry-config-path=/etc/cri/conf.d/hosts
      - --mirror-targets
      - http://$(NODE_IP):29999
      - http://$(NODE_IP):30021
      - --resolve-tags=true
      - --prepend-existing=false
      env:
      - name: NODE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      image: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      imagePullPolicy: IfNotPresent
      name: configuration
      resources:
        limits:
          memory: 128Mi
        requests:
          memory: 128Mi
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cri/conf.d/hosts
        name: containerd-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gtdm9
        readOnly: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: spegel
    serviceAccountName: spegel
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    volumes:
    - hostPath:
        path: /run/containerd/containerd.sock
        type: Socket
      name: containerd-sock
    - hostPath:
        path: /var/lib/containerd/io.containerd.content.v1.content
        type: Directory
      name: containerd-content
    - hostPath:
        path: /etc/cri/conf.d/hosts
        type: DirectoryOrCreate
      name: containerd-config
    - name: kube-api-access-gtdm9
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:29Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-27T19:39:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-27T19:39:06Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6fdeb9398c561b81f913b3ea050d294b732ae23295f25ca15a0794625b6f208b
      image: sha256:8915d2b4c600c01bff0f5f56ce271a2eed414aa9383aa854e26db20ce0be21a7
      imageID: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      lastState:
        terminated:
          containerID: containerd://26e0e8b3eb460023df70491b99bdff1083dfa114797f2701fda74d3b699afa15
          exitCode: 0
          finishedAt: "2025-05-07T02:47:22Z"
          reason: Completed
          startedAt: "2025-05-07T02:44:23Z"
      name: registry
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:47:29Z"
      volumeMounts:
      - mountPath: /run/containerd/containerd.sock
        name: containerd-sock
      - mountPath: /var/lib/containerd/io.containerd.content.v1.content
        name: containerd-content
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gtdm9
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    initContainerStatuses:
    - containerID: containerd://47d45e9d24dcb907695dbb9f9265a21265cb1f01f0d892418733b579e2e92a51
      image: sha256:8915d2b4c600c01bff0f5f56ce271a2eed414aa9383aa854e26db20ce0be21a7
      imageID: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
      lastState: {}
      name: configuration
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://47d45e9d24dcb907695dbb9f9265a21265cb1f01f0d892418733b579e2e92a51
          exitCode: 0
          finishedAt: "2025-05-07T02:43:14Z"
          reason: Completed
          startedAt: "2025-05-07T02:42:28Z"
      volumeMounts:
      - mountPath: /etc/cri/conf.d/hosts
        name: containerd-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gtdm9
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.69.0.198
    podIPs:
    - ip: 10.69.0.198
    qosClass: Burstable
    startTime: "2025-04-27T19:39:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      deploy-date: deploy-date-value
    creationTimestamp: "2025-03-26T20:45:31Z"
    generateName: homepage-6b57c9c69b-
    labels:
      app: homepage
      pod-template-hash: 6b57c9c69b
    name: homepage-6b57c9c69b-drmq2
    namespace: myapps
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: homepage-6b57c9c69b
      uid: 08e71c94-333a-47fa-a36a-ae1414b91ebb
    resourceVersion: "102242689"
    uid: e6d403e8-ed3c-4793-acca-1025366011ad
  spec:
    containers:
    - env:
      - name: HOMEPAGE_ALLOWED_HOSTS
        value: dashboard.samboxlab.top,192.168.0.129:3000
      - name: STAKATER_HOMEPAGE_CONFIGMAP
        value: addd3251293854442f46347b0fe999d0e6dd4502
      image: ghcr.io/gethomepage/homepage:latest
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: homepage
      ports:
      - containerPort: 3000
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /
          port: http
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 200m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/custom.js
        name: homepage-config
        subPath: custom.js
      - mountPath: /app/config/custom.css
        name: homepage-config
        subPath: custom.css
      - mountPath: /app/config/bookmarks.yaml
        name: homepage-config
        subPath: bookmarks.yaml
      - mountPath: /app/config/docker.yaml
        name: homepage-config
        subPath: docker.yaml
      - mountPath: /app/config/kubernetes.yaml
        name: homepage-config
        subPath: kubernetes.yaml
      - mountPath: /app/config/services.yaml
        name: homepage-config
        subPath: services.yaml
      - mountPath: /app/config/settings.yaml
        name: homepage-config
        subPath: settings.yaml
      - mountPath: /app/config/widgets.yaml
        name: homepage-config
        subPath: widgets.yaml
      - mountPath: /app/config/logs
        name: logs
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dxd24
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker01
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: homepage
      name: homepage-config
    - emptyDir: {}
      name: logs
    - name: kube-api-access-dxd24
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:52:47Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-27T01:18:31Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:53:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:53:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-27T01:18:30Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://456814bb855b7db548775bbadb4ac0e16a99584097aad3d9117dd5243d76d0e7
      image: ghcr.io/gethomepage/homepage:latest
      imageID: ghcr.io/gethomepage/homepage@sha256:5e6bcbb595c4e857540577135e0f8b3ffc2e97c23d6e0ddc7df183de5bfdd442
      lastState:
        terminated:
          containerID: containerd://a0aba8b8ba821b77f9ac54e49d968a420f5fee45ca490f49555d2a0a8612a204
          exitCode: 0
          finishedAt: "2025-05-07T02:38:48Z"
          reason: Completed
          startedAt: "2025-03-27T01:21:22Z"
      name: homepage
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:52:45Z"
      volumeMounts:
      - mountPath: /app/config/custom.js
        name: homepage-config
      - mountPath: /app/config/custom.css
        name: homepage-config
      - mountPath: /app/config/bookmarks.yaml
        name: homepage-config
      - mountPath: /app/config/docker.yaml
        name: homepage-config
      - mountPath: /app/config/kubernetes.yaml
        name: homepage-config
      - mountPath: /app/config/services.yaml
        name: homepage-config
      - mountPath: /app/config/settings.yaml
        name: homepage-config
      - mountPath: /app/config/widgets.yaml
        name: homepage-config
      - mountPath: /app/config/logs
        name: logs
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dxd24
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.123
    podIPs:
    - ip: 10.69.2.123
    qosClass: Burstable
    startTime: "2025-03-27T01:18:31Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      deploy-date: deploy-date-value
    creationTimestamp: "2025-03-26T20:45:23Z"
    generateName: homepage-6b57c9c69b-
    labels:
      app: homepage
      pod-template-hash: 6b57c9c69b
    name: homepage-6b57c9c69b-vxz2j
    namespace: myapps
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: homepage-6b57c9c69b
      uid: 08e71c94-333a-47fa-a36a-ae1414b91ebb
    resourceVersion: "102240843"
    uid: c388fabd-9df8-49fd-91b4-47d4032b3811
  spec:
    containers:
    - env:
      - name: HOMEPAGE_ALLOWED_HOSTS
        value: dashboard.samboxlab.top,192.168.0.129:3000
      - name: STAKATER_HOMEPAGE_CONFIGMAP
        value: addd3251293854442f46347b0fe999d0e6dd4502
      image: ghcr.io/gethomepage/homepage:latest
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: homepage
      ports:
      - containerPort: 3000
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /
          port: http
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 200m
          memory: 128Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/custom.js
        name: homepage-config
        subPath: custom.js
      - mountPath: /app/config/custom.css
        name: homepage-config
        subPath: custom.css
      - mountPath: /app/config/bookmarks.yaml
        name: homepage-config
        subPath: bookmarks.yaml
      - mountPath: /app/config/docker.yaml
        name: homepage-config
        subPath: docker.yaml
      - mountPath: /app/config/kubernetes.yaml
        name: homepage-config
        subPath: kubernetes.yaml
      - mountPath: /app/config/services.yaml
        name: homepage-config
        subPath: services.yaml
      - mountPath: /app/config/settings.yaml
        name: homepage-config
        subPath: settings.yaml
      - mountPath: /app/config/widgets.yaml
        name: homepage-config
        subPath: widgets.yaml
      - mountPath: /app/config/logs
        name: logs
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pct4z
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: homepage
      name: homepage-config
    - emptyDir: {}
      name: logs
    - name: kube-api-access-pct4z
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:47:13Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-26T20:45:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-26T20:45:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7a5a9c8eac38fad66fc343355ee617e7be76b7b74659d63812cf3d88ae7817c0
      image: ghcr.io/gethomepage/homepage:latest
      imageID: ghcr.io/gethomepage/homepage@sha256:5e6bcbb595c4e857540577135e0f8b3ffc2e97c23d6e0ddc7df183de5bfdd442
      lastState:
        terminated:
          containerID: containerd://a59c18ebb7bbd74a2a9132c4fa74a3feb51ae2c716f0c699dee2e1bde95eaa98
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-04-18T14:55:29Z"
      name: homepage
      ready: true
      restartCount: 13
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:47:13Z"
      volumeMounts:
      - mountPath: /app/config/custom.js
        name: homepage-config
      - mountPath: /app/config/custom.css
        name: homepage-config
      - mountPath: /app/config/bookmarks.yaml
        name: homepage-config
      - mountPath: /app/config/docker.yaml
        name: homepage-config
      - mountPath: /app/config/kubernetes.yaml
        name: homepage-config
      - mountPath: /app/config/services.yaml
        name: homepage-config
      - mountPath: /app/config/settings.yaml
        name: homepage-config
      - mountPath: /app/config/widgets.yaml
        name: homepage-config
      - mountPath: /app/config/logs
        name: logs
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pct4z
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.96
    podIPs:
    - ip: 10.69.0.96
    qosClass: Burstable
    startTime: "2025-03-26T20:45:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-15T20:02:59Z"
    generateName: cloudflared-6475d654f4-
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 6475d654f4
    name: cloudflared-6475d654f4-nfsq7
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cloudflared-6475d654f4
      uid: 20171bfc-163d-49b6-a843-be6a3334af70
    resourceVersion: "102241034"
    uid: d4e70055-02dc-45e3-a4b1-55a0adf47376
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - tunnel
      - --config
      - /etc/cloudflared/config/config.yaml
      - run
      - $(TUNNEL_ID)
      env:
      - name: NO_AUTOUPDATE
        value: "true"
      - name: TUNNEL_CRED_FILE
        value: /etc/cloudflared/creds/credentials.json
      - name: TUNNEL_ID
        valueFrom:
          secretKeyRef:
            key: TUNNEL_ID
            name: cloudflared-secret
      - name: TUNNEL_METRICS
        value: 0.0.0.0:8080
      - name: TUNNEL_ORIGIN_ENABLE_HTTP2
        value: "true"
      - name: TUNNEL_POST_QUANTUM
        value: "true"
      - name: TUNNEL_TRANSPORT_PROTOCOL
        value: quic
      image: docker.io/cloudflare/cloudflared:2025.2.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: app
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 256Mi
        requests:
          cpu: 10m
          memory: 256Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cloudflared/config/config.yaml
        name: config
        readOnly: true
        subPath: config.yaml
      - mountPath: /etc/cloudflared/creds/credentials.json
        name: creds
        readOnly: true
        subPath: credentials.json
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sfh4k
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: cloudflared-configmap
      name: config
    - name: creds
      secret:
        defaultMode: 420
        secretName: cloudflared-secret
    - name: kube-api-access-sfh4k
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:30Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:03:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:49:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:49:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://eed4feb142fc313bbe0b4756e6921310b277540039a629e5342e660c5b1c086c
      image: docker.io/cloudflare/cloudflared:2025.2.1
      imageID: docker.io/cloudflare/cloudflared@sha256:03737f27c38ecfb257a55664953cac510727cf27052c51ddb7c8ff1a2b9969e1
      lastState:
        terminated:
          containerID: containerd://930a854dc22fd79e52f3a122c823d6a082b0ee5e4553d27298ed2f2693c543bd
          exitCode: 1
          finishedAt: "2025-05-07T02:46:54Z"
          reason: Error
          startedAt: "2025-05-07T02:46:52Z"
      name: app
      ready: true
      restartCount: 865
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:49:22Z"
      volumeMounts:
      - mountPath: /etc/cloudflared/config/config.yaml
        name: config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/cloudflared/creds/credentials.json
        name: creds
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-sfh4k
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.177
    podIPs:
    - ip: 10.69.0.177
    qosClass: Burstable
    startTime: "2025-03-15T20:03:01Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-14T00:32:04Z"
    generateName: echo-server-67ddcf754d-
    labels:
      app.kubernetes.io/component: echo-server
      app.kubernetes.io/instance: echo-server
      app.kubernetes.io/name: echo-server
      pod-template-hash: 67ddcf754d
    name: echo-server-67ddcf754d-dzvfx
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: echo-server-67ddcf754d
      uid: a51b3112-9ea3-4158-93a8-ee6f5ea2167e
    resourceVersion: "102242536"
    uid: 522a88a8-e987-4f7b-a82e-a6ae04e84858
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: HTTP_PORT
        value: "8080"
      - name: LOG_IGNORE_PATH
        value: /healthz
      - name: LOG_WITHOUT_NEWLINE
        value: "true"
      - name: PROMETHEUS_ENABLED
        value: "true"
      image: ghcr.io/mendhak/http-https-echo:36
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: app
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 64Mi
        requests:
          cpu: 10m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-m9cz6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: talos-worker01
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-m9cz6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:48:28Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-14T00:34:00Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:53:32Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:53:32Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-14T00:34:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a940c290b94774de5ff5ec690f278b09ec905cb415f550ceedb200c93896bca0
      image: ghcr.io/mendhak/http-https-echo:36
      imageID: ghcr.io/mendhak/http-https-echo@sha256:43bdfe52abc5baed00706337efe26825c86360c6b9b74659a72a9aa2fca8bd55
      lastState:
        terminated:
          containerID: containerd://03cf693ade56c85b1ae7edd75be0ed58d7e522e77772b0c8b8d2d2a204606154
          exitCode: 137
          finishedAt: "2025-05-07T02:53:28Z"
          reason: Error
          startedAt: "2025-05-07T02:52:34Z"
      name: app
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:53:30Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-m9cz6
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.222
    podIPs:
    - ip: 10.69.2.222
    qosClass: Burstable
    startTime: "2025-04-14T00:34:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      secret.reloader.stakater.com/reload: external-dns-secret
    creationTimestamp: "2025-04-21T14:23:36Z"
    generateName: external-dns-c6cc76596-
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: c6cc76596
    name: external-dns-c6cc76596-zkgz8
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-dns-c6cc76596
      uid: 2b92e5cd-7ba5-4efc-a88a-9bed1e70dae5
    resourceVersion: "103165993"
    uid: 800a3001-457d-4b1d-9165-ad29f5a5be0f
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - --log-level=info
      - --log-format=text
      - --interval=1m
      - --source=crd
      - --source=ingress
      - --policy=sync
      - --registry=txt
      - --txt-owner-id=default
      - --txt-prefix=k8s.
      - --domain-filter=samboxlab.top
      - --provider=cloudflare
      - --ingress-class=external
      - --cloudflare-proxied
      - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
      - --crd-source-kind=DNSEndpoint
      env:
      - name: CF_API_TOKEN
        valueFrom:
          secretKeyRef:
            key: api-token
            name: external-dns-secret
      image: registry.k8s.io/external-dns/external-dns:v0.16.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 2
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: external-dns
      ports:
      - containerPort: 7979
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2d5wh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker02
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: external-dns
    serviceAccountName: external-dns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-2d5wh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:23:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-08T14:30:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-08T14:30:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-21T14:23:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4d3b4eff9dcfd520cdcef5a99123922f5942e73e2982d92b23d250f8fd18cf65
      image: registry.k8s.io/external-dns/external-dns:v0.16.1
      imageID: registry.k8s.io/external-dns/external-dns@sha256:37d3a7a05c4638b8177382b80a627c223bd84a53c1a91be137245bd3cfdf9986
      lastState:
        terminated:
          containerID: containerd://a6beb3a63f820864feec7b07e56cbb7da9d94384279ac58c2cff103ae25406be
          exitCode: 1
          finishedAt: "2025-05-08T14:30:43Z"
          reason: Error
          startedAt: "2025-05-07T02:53:45Z"
      name: external-dns
      ready: true
      restartCount: 24
      started: true
      state:
        running:
          startedAt: "2025-05-08T14:30:45Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2d5wh
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 10.69.3.110
    podIPs:
    - ip: 10.69.3.110
    qosClass: BestEffort
    startTime: "2025-04-21T14:23:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-14T18:37:18Z"
    generateName: ingress-nginx-external-controller-7c88d5d6c9-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      pod-template-hash: 7c88d5d6c9
    name: ingress-nginx-external-controller-7c88d5d6c9-mwf6q
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-external-controller-7c88d5d6c9
      uid: 463984b3-e95c-4f9c-baba-210bb46889d7
    resourceVersion: "102242210"
    uid: 045814cb-20f9-4d57-b295-d82b87793363
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/ingress-nginx-external-controller
      - --election-id=ingress-nginx-external-leader
      - --controller-class=k8s.io/external
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/ingress-nginx-external-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=true
      - --default-ssl-certificate=network/samboxlab-top-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.1@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fjbnm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx-external
    serviceAccountName: ingress-nginx-external
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: ingress-nginx-external-admission
    - name: kube-api-access-fjbnm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-14T18:37:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:53:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:53:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-14T18:37:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://28854059d1c3c787389e1e67b9dfd6e0a6a11739395e2b3bc75ef93657590fd3
      image: sha256:78e25eaa557d48a19963cbe751b91dc1d53e1c82aad6cd36c20e1c11eb04cd13
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
      lastState:
        terminated:
          containerID: containerd://1daf6905b62f9f428ccedd8339dd914551ead7aa7c98d315d6729d19e16643d8
          exitCode: 143
          finishedAt: "2025-05-07T02:52:22Z"
          reason: Error
          startedAt: "2025-05-07T02:51:24Z"
      name: controller
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:52:32Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fjbnm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 10.69.3.138
    podIPs:
    - ip: 10.69.3.138
    qosClass: Burstable
    startTime: "2025-04-14T18:37:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-24T23:01:55Z"
    generateName: ingress-nginx-external-controller-7f99bc94cf-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.3
      helm.sh/chart: ingress-nginx-4.11.3
      pod-template-hash: 7f99bc94cf
    name: ingress-nginx-external-controller-7f99bc94cf-ct7c9
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-external-controller-7f99bc94cf
      uid: 3e517d19-215a-463a-a719-ddb5a093bfdb
    resourceVersion: "4464740"
    uid: b620dc39-7604-4ee0-b2b2-5bc2156aa780
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/ingress-nginx-external-controller
      - --election-id=ingress-nginx-external-leader
      - --controller-class=k8s.io/external
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/ingress-nginx-external-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --default-ssl-certificate=network/samboxlab-top-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.11.3@sha256:d56f135b6462cfc476447cfe564b83a45e8bb7da2774963b00d12161112270b7
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5d54n
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx-external
    serviceAccountName: ingress-nginx-external
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: ingress-nginx-external-admission
    - name: kube-api-access-5d54n
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:58Z"
      message: Pod was terminated in response to imminent node shutdown.
      reason: TerminationByKubelet
      status: "True"
      type: DisruptionTarget
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:58Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T23:01:56Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:58Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-11-02T04:42:58Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-24T23:01:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://29eca79d69d75eaf17d918974eb0c7e0ae132fe4d48469d870bb61ff22620617
      image: sha256:ee44bc2368033ba6147d84fb376356de1e40e4778c20dd8b4817bd1636121ddf
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:d56f135b6462cfc476447cfe564b83a45e8bb7da2774963b00d12161112270b7
      lastState: {}
      name: controller
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://29eca79d69d75eaf17d918974eb0c7e0ae132fe4d48469d870bb61ff22620617
          exitCode: 0
          finishedAt: "2024-11-02T04:42:58Z"
          reason: Completed
          startedAt: "2024-10-24T23:04:34Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5d54n
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Succeeded
    qosClass: Burstable
    startTime: "2024-10-24T23:01:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-04-14T18:37:18Z"
    generateName: ingress-nginx-internal-controller-5b84f885c5-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      pod-template-hash: 5b84f885c5
    name: ingress-nginx-internal-controller-5b84f885c5-brpzw
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-internal-controller-5b84f885c5
      uid: cc568b1d-e1ba-4314-995c-6fd0b91b6e8d
    resourceVersion: "102242188"
    uid: 83ebb63f-52c7-478b-ac3c-27af7bbed6ce
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/ingress-nginx-internal-controller
      - --election-id=ingress-nginx-internal-leader
      - --controller-class=k8s.io/internal
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/ingress-nginx-internal-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=true
      - --default-ssl-certificate=network/samboxlab-top-production-tls
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.12.1@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 10254
        name: metrics
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsGroup: 82
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgsgh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker02
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx-internal
    serviceAccountName: ingress-nginx-internal
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: ingress-nginx-internal-admission
    - name: kube-api-access-qgsgh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:51:17Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-04-14T18:37:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:52:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:52:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-04-14T18:37:19Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://abac4dac1a574249e3ba2247c3115beee04fcd3971fb3e3f4da931c7214e5e5b
      image: sha256:78e25eaa557d48a19963cbe751b91dc1d53e1c82aad6cd36c20e1c11eb04cd13
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
      lastState:
        terminated:
          containerID: containerd://ccccaa314b0e88083cfcd3bd38d448a3744af43e48e7f832ea1cbfb305b7d371
          exitCode: 143
          finishedAt: "2025-05-07T02:52:22Z"
          reason: Error
          startedAt: "2025-05-07T02:51:16Z"
      name: controller
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:52:30Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgsgh
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.236
    hostIPs:
    - ip: 192.168.0.236
    phase: Running
    podIP: 10.69.3.93
    podIPs:
    - ip: 10.69.3.93
    qosClass: Burstable
    startTime: "2025-04-14T18:37:19Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: e7ea78763a51fc11ab37df9f0bcf0f67594cd1e879d240beb6c4038d13e139b4
    creationTimestamp: "2024-11-19T12:55:31Z"
    generateName: k8s-gateway-6bc954c59d-
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      pod-template-hash: 6bc954c59d
    name: k8s-gateway-6bc954c59d-6hzlp
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: k8s-gateway-6bc954c59d
      uid: b06dc1f1-ca03-4530-8b95-ec708a3b4738
    resourceVersion: "102239949"
    uid: 508063f2-70c4-400f-b0c8-427e5edb8024
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: quay.io/oriedge/k8s_gateway:v0.4.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: k8s-gateway
      ports:
      - containerPort: 1053
        name: dns-udp
        protocol: UDP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 5
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-m9vlr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: k8s-gateway
    serviceAccountName: k8s-gateway
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: k8s-gateway
      name: config-volume
    - name: kube-api-access-m9vlr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-11-19T12:55:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:44:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:44:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-11-19T12:55:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a49def3448ff00f679115af8862ceda93c567803ff522b235c01e233d17c7146
      image: quay.io/oriedge/k8s_gateway:v0.4.0
      imageID: quay.io/oriedge/k8s_gateway@sha256:7bdbd447c0244b8f89de9cd6f4826ed0ac66c9406fac3a4ac80081020c251c6b
      lastState:
        terminated:
          containerID: containerd://7ae31b89a354235866464ba52d3fcdb7ccbed063c5250a56a722cecc91a9cecf
          exitCode: 2
          finishedAt: "2025-05-07T02:44:11Z"
          reason: Error
          startedAt: "2025-05-07T02:42:31Z"
      name: k8s-gateway
      ready: true
      restartCount: 17
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:44:34Z"
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-m9vlr
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.83
    podIPs:
    - ip: 10.69.0.83
    qosClass: BestEffort
    startTime: "2024-11-19T12:55:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-15T20:02:59Z"
    generateName: openebs-localpv-provisioner-56d8447b9-
    labels:
      app: localpv-provisioner
      chart: localpv-provisioner-4.1.1
      component: localpv-provisioner
      heritage: Helm
      name: openebs-localpv-provisioner
      openebs.io/component-name: openebs-localpv-provisioner
      openebs.io/version: 4.1.1
      pod-template-hash: 56d8447b9
      release: openebs
    name: openebs-localpv-provisioner-56d8447b9-tw29h
    namespace: openebs-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: openebs-localpv-provisioner-56d8447b9
      uid: bb0ef625-6b8f-4566-aad6-e242ad1a360f
    resourceVersion: "103662260"
    uid: e33b5153-d03e-499d-bc64-1bd4b23db188
  spec:
    containers:
    - env:
      - name: OPENEBS_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: OPENEBS_SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: OPENEBS_IO_ENABLE_ANALYTICS
        value: "true"
      - name: OPENEBS_IO_BASE_PATH
        value: /var/openebs/local
      - name: OPENEBS_IO_HELPER_IMAGE
        value: quay.io/openebs/linux-utils:4.1.0
      - name: OPENEBS_IO_INSTALLER_TYPE
        value: localpv-charts-helm
      - name: LEADER_ELECTION_ENABLED
        value: "true"
      image: quay.io/openebs/provisioner-localpv:4.1.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - sh
          - -c
          - test `pgrep -c "^provisioner-loc.*"` = 1
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 1
      name: openebs-localpv-provisioner
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wfxq6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: openebs-localpv-provisioner
    serviceAccountName: openebs-localpv-provisioner
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-wfxq6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:37Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:38:13Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T09:38:13Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://366c4a67f85c9ff8b5bd85e5455f7674d2c0990cbab443e0c9992b722f510604
      image: quay.io/openebs/provisioner-localpv:4.1.1
      imageID: quay.io/openebs/provisioner-localpv@sha256:9da02fb8bd809391ca7b752a40b0992bdee361529b66deec8f931e61067c836d
      lastState:
        terminated:
          containerID: containerd://342d38eb8fa5982d02c76f078528b0be0cd58cbded7d1bc1995452ccdcc1d416
          exitCode: 255
          finishedAt: "2025-05-09T09:36:38Z"
          reason: Error
          startedAt: "2025-05-09T09:35:40Z"
      name: openebs-localpv-provisioner
      ready: true
      restartCount: 1893
      started: true
      state:
        running:
          startedAt: "2025-05-09T09:38:12Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wfxq6
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.190
    podIPs:
    - ip: 10.69.0.190
    qosClass: BestEffort
    startTime: "2025-03-15T20:02:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-15T20:02:48Z"
    generateName: qrapp-579c8c86c-
    labels:
      app: qrapp
      pod-template-hash: 579c8c86c
    name: qrapp-579c8c86c-fpkxj
    namespace: qrapp
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: qrapp-579c8c86c
      uid: da7ca652-c7ea-45ac-bc78-d4c604667677
    resourceVersion: "102239528"
    uid: 6cd001f9-3019-4dec-bcf8-c6c21aecf966
  spec:
    containers:
    - image: therealsojay/qrcodeapp:1.0.60
      imagePullPolicy: IfNotPresent
      name: qrapp
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6jnx9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-6jnx9
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:24Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c7cac364476ba8d9926a504fd70c905c18638cc35bf0353a130a013e5c15ab65
      image: docker.io/therealsojay/qrcodeapp:1.0.60
      imageID: docker.io/therealsojay/qrcodeapp@sha256:e9c29aeeb4900ef0e5c49fb7ca40b018709e1934de648662d11c54c94a26a1ee
      lastState:
        terminated:
          containerID: containerd://b3b7c66f94065b6b0b0bef3a9a281fa0a9fcb053672dc6a38d1de07af5196ad6
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:41:02Z"
      name: qrapp
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:42:23Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6jnx9
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.153
    podIPs:
    - ip: 10.69.0.153
    qosClass: BestEffort
    startTime: "2025-03-15T20:02:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-03-15T20:02:58Z"
    generateName: qrapp-579c8c86c-
    labels:
      app: qrapp
      pod-template-hash: 579c8c86c
    name: qrapp-579c8c86c-t9ztz
    namespace: qrapp
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: qrapp-579c8c86c
      uid: da7ca652-c7ea-45ac-bc78-d4c604667677
    resourceVersion: "102239598"
    uid: bd1bea6f-fae7-48e5-8597-0d2053eb2ae0
  spec:
    containers:
    - image: therealsojay/qrcodeapp:1.0.60
      imagePullPolicy: IfNotPresent
      name: qrapp
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4bds5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-4bds5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:30Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-03-15T20:02:58Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3c755d0acaf6161576aa8f7d715e84c1b18468d0d2ade3bbf03b3327f41643d6
      image: docker.io/therealsojay/qrcodeapp:1.0.60
      imageID: docker.io/therealsojay/qrcodeapp@sha256:e9c29aeeb4900ef0e5c49fb7ca40b018709e1934de648662d11c54c94a26a1ee
      lastState:
        terminated:
          containerID: containerd://7a87d4a7bf13038367fecca65af73c1778df9d9bdfccf32fc474f93cf5321d23
          exitCode: 255
          finishedAt: "2025-05-07T02:36:38Z"
          reason: Unknown
          startedAt: "2025-03-26T20:40:48Z"
      name: qrapp
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2025-05-07T02:42:29Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4bds5
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.21
    podIPs:
    - ip: 10.69.0.21
    qosClass: BestEffort
    startTime: "2025-03-15T20:02:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-26T05:28:25Z"
    generateName: scan-vulnerabilityreport-7d46d65f5d-
    labels:
      app.kubernetes.io/managed-by: starboard
      batch.kubernetes.io/controller-uid: cc8fbd55-d981-474c-9228-e085850fa415
      batch.kubernetes.io/job-name: scan-vulnerabilityreport-7d46d65f5d
      controller-uid: cc8fbd55-d981-474c-9228-e085850fa415
      job-name: scan-vulnerabilityreport-7d46d65f5d
      resource-spec-hash: 7889b6ddcb
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-external-controller-7b97c4b4cb
      starboard.resource.namespace: network
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-7d46d65f5d-x4ph7
    namespace: starboard-system
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: scan-vulnerabilityreport-7d46d65f5d
      uid: cc8fbd55-d981-474c-9228-e085850fa415
    resourceVersion: "4464754"
    uid: 5569f872-3c1c-41c1-bea3-5307033b43f2
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
    automountServiceAccountToken: false
    containers:
    - args:
      - --cache-dir
      - /tmp/trivy/.cache
      - --quiet
      - image
      - --skip-update
      - --format
      - json
      - registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
      command:
      - trivy
      env:
      - name: TRIVY_SEVERITY
        valueFrom:
          configMapKeyRef:
            key: trivy.severity
            name: starboard-trivy-config
            optional: true
      - name: TRIVY_IGNORE_UNFIXED
        valueFrom:
          configMapKeyRef:
            key: trivy.ignoreUnfixed
            name: starboard-trivy-config
            optional: true
      - name: TRIVY_TIMEOUT
        valueFrom:
          configMapKeyRef:
            key: trivy.timeout
            name: starboard-trivy-config
            optional: true
      - name: TRIVY_SKIP_FILES
        valueFrom:
          configMapKeyRef:
            key: trivy.skipFiles
            name: starboard-trivy-config
            optional: true
      - name: TRIVY_SKIP_DIRS
        valueFrom:
          configMapKeyRef:
            key: trivy.skipDirs
            name: starboard-trivy-config
            optional: true
      - name: HTTP_PROXY
        valueFrom:
          configMapKeyRef:
            key: trivy.httpProxy
            name: starboard-trivy-config
            optional: true
      - name: HTTPS_PROXY
        valueFrom:
          configMapKeyRef:
            key: trivy.httpsProxy
            name: starboard-trivy-config
            optional: true
      - name: NO_PROXY
        valueFrom:
          configMapKeyRef:
            key: trivy.noProxy
            name: starboard-trivy-config
            optional: true
      image: docker.io/aquasec/trivy:0.24.2
      imagePullPolicy: IfNotPresent
      name: controller
      resources:
        limits:
          cpu: 500m
          memory: 500M
        requests:
          cpu: 100m
          memory: 100M
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
        privileged: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp
        name: tmp
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - args:
      - --cache-dir
      - /tmp/trivy/.cache
      - image
      - --download-db-only
      command:
      - trivy
      env:
      - name: HTTP_PROXY
        valueFrom:
          configMapKeyRef:
            key: trivy.httpProxy
            name: starboard-trivy-config
            optional: true
      - name: HTTPS_PROXY
        valueFrom:
          configMapKeyRef:
            key: trivy.httpsProxy
            name: starboard-trivy-config
            optional: true
      - name: NO_PROXY
        valueFrom:
          configMapKeyRef:
            key: trivy.noProxy
            name: starboard-trivy-config
            optional: true
      - name: GITHUB_TOKEN
        valueFrom:
          secretKeyRef:
            key: trivy.githubToken
            name: starboard-trivy-config
            optional: true
      image: docker.io/aquasec/trivy:0.24.2
      imagePullPolicy: IfNotPresent
      name: 808a5bb2-737c-4925-9637-d94316f1f37f
      resources:
        limits:
          cpu: 500m
          memory: 500M
        requests:
          cpu: 100m
          memory: 100M
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp
        name: tmp
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: starboard-operator
    serviceAccountName: starboard-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-26T05:34:50Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-26T05:31:36Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-26T05:34:45Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-26T05:34:45Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-26T05:28:25Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6f6dee81d659aafed868e0fb95f677f241d7c27a679d92dab1ef977a183c42fb
      image: docker.io/aquasec/trivy:0.24.2
      imageID: docker.io/aquasec/trivy@sha256:8c671b60db61d287156568e54c5750afa480b5d247e88edd4c368e5b4d631d9d
      lastState: {}
      name: controller
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://6f6dee81d659aafed868e0fb95f677f241d7c27a679d92dab1ef977a183c42fb
          exitCode: 0
          finishedAt: "2024-10-26T05:34:40Z"
          reason: Completed
          startedAt: "2024-10-26T05:32:57Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    initContainerStatuses:
    - containerID: containerd://c0ed9564aa3ff5fd268b2c70723af634bf161af5d5dfd2420b346c14b01bd95d
      image: docker.io/aquasec/trivy:0.24.2
      imageID: docker.io/aquasec/trivy@sha256:8c671b60db61d287156568e54c5750afa480b5d247e88edd4c368e5b4d631d9d
      lastState: {}
      name: 808a5bb2-737c-4925-9637-d94316f1f37f
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://c0ed9564aa3ff5fd268b2c70723af634bf161af5d5dfd2420b346c14b01bd95d
          exitCode: 0
          finishedAt: "2024-10-26T05:31:28Z"
          reason: Completed
          startedAt: "2024-10-26T05:29:56Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
    phase: Succeeded
    qosClass: Burstable
    startTime: "2024-10-26T05:28:26Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-02-19T01:42:33Z"
    generateName: starboard-operator-f54444f68-
    labels:
      app.kubernetes.io/instance: starboard-operator
      app.kubernetes.io/name: starboard-operator
      pod-template-hash: f54444f68
    name: starboard-operator-f54444f68-kh8d7
    namespace: starboard-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: starboard-operator-f54444f68
      uid: 9a03b3fb-e5a2-40af-8400-af0f9dd1f79d
    resourceVersion: "103958990"
    uid: 12d47bef-4398-47a9-a965-dcbfa6a1dd12
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: OPERATOR_NAMESPACE
        value: starboard-system
      - name: OPERATOR_TARGET_NAMESPACES
      - name: OPERATOR_EXCLUDE_NAMESPACES
        value: kube-system,starboard-system
      - name: OPERATOR_SERVICE_ACCOUNT
        value: starboard-operator
      - name: OPERATOR_LOG_DEV_MODE
        value: "false"
      - name: OPERATOR_SCAN_JOB_TIMEOUT
        value: 5m
      - name: OPERATOR_CONCURRENT_SCAN_JOBS_LIMIT
        value: "10"
      - name: OPERATOR_SCAN_JOB_RETRY_AFTER
        value: 30s
      - name: OPERATOR_BATCH_DELETE_LIMIT
        value: "10"
      - name: OPERATOR_BATCH_DELETE_DELAY
        value: 10s
      - name: OPERATOR_METRICS_BIND_ADDRESS
        value: :8080
      - name: OPERATOR_HEALTH_PROBE_BIND_ADDRESS
        value: :9090
      - name: OPERATOR_CIS_KUBERNETES_BENCHMARK_ENABLED
        value: "true"
      - name: OPERATOR_VULNERABILITY_SCANNER_ENABLED
        value: "true"
      - name: OPERATOR_VULNERABILITY_SCANNER_SCAN_ONLY_CURRENT_REVISIONS
        value: "false"
      - name: OPERATOR_VULNERABILITY_SCANNER_REPORT_TTL
      - name: OPERATOR_CONFIG_AUDIT_SCANNER_ENABLED
        value: "false"
      - name: OPERATOR_CONFIG_AUDIT_SCANNER_BUILTIN
        value: "true"
      - name: OPERATOR_CLUSTER_COMPLIANCE_ENABLED
        value: "true"
      image: docker.io/aquasec/starboard-operator:0.15.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 10
        httpGet:
          path: /healthz/
          port: probes
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: starboard-operator
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      - containerPort: 9090
        name: probes
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz/
          port: probes
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8kbvm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-controlplane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: starboard-operator
    serviceAccountName: starboard-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-8kbvm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T02:42:38Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-02-19T01:42:34Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T20:59:39Z"
      message: 'containers with unready status: [starboard-operator]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T20:59:39Z"
      message: 'containers with unready status: [starboard-operator]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-02-19T01:42:34Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://98afe0b3343a39f79278c8a057e4f3f37f6e718cb44ad20ff90565e9536bafd7
      image: docker.io/aquasec/starboard-operator:0.15.3
      imageID: docker.io/aquasec/starboard-operator@sha256:a0709e778989f85cb9c2a085b88378872b3f101488ece96d0e6e27a581880546
      lastState:
        terminated:
          containerID: containerd://98afe0b3343a39f79278c8a057e4f3f37f6e718cb44ad20ff90565e9536bafd7
          exitCode: 1
          finishedAt: "2025-05-09T20:59:38Z"
          reason: Error
          startedAt: "2025-05-09T20:57:37Z"
      name: starboard-operator
      ready: false
      restartCount: 15323
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=starboard-operator pod=starboard-operator-f54444f68-kh8d7_starboard-system(12d47bef-4398-47a9-a965-dcbfa6a1dd12)
          reason: CrashLoopBackOff
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8kbvm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.234
    hostIPs:
    - ip: 192.168.0.234
    phase: Running
    podIP: 10.69.0.189
    podIPs:
    - ip: 10.69.0.189
    qosClass: BestEffort
    startTime: "2025-02-19T01:42:34Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/default-container: manager
    creationTimestamp: "2025-05-07T03:02:09Z"
    generateName: volsync-5cfbddb45c-
    labels:
      app.kubernetes.io/instance: volsync
      app.kubernetes.io/name: volsync
      control-plane: volsync-controller
      pod-template-hash: 5cfbddb45c
    name: volsync-5cfbddb45c-86swh
    namespace: volsync-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: volsync-5cfbddb45c
      uid: d6797c3b-a886-41d0-b600-729a950d0588
    resourceVersion: "103958404"
    uid: 7dc85a62-211e-4317-a5d4-e59c052ea792
  spec:
    containers:
    - args:
      - --secure-listen-address=0.0.0.0:8443
      - --upstream=http://127.0.0.1:8080/
      - --logtostderr=true
      - --tls-min-version=VersionTLS12
      - --v=0
      image: quay.io/brancz/kube-rbac-proxy:v0.18.2
      imagePullPolicy: IfNotPresent
      name: kube-rbac-proxy
      ports:
      - containerPort: 8443
        name: https
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 128Mi
        requests:
          cpu: 5m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-q68c4
        readOnly: true
    - args:
      - --health-probe-bind-address=:8081
      - --metrics-bind-address=127.0.0.1:8080
      - --leader-elect
      - --rclone-container-image=quay.io/backube/volsync:0.12.1
      - --restic-container-image=quay.io/backube/volsync:0.12.1
      - --rsync-container-image=quay.io/backube/volsync:0.12.1
      - --rsync-tls-container-image=quay.io/backube/volsync:0.12.1
      - --syncthing-container-image=quay.io/backube/volsync:0.12.1
      - --scc-name=volsync-privileged-mover
      command:
      - /manager
      env:
      - name: VOLSYNC_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/backube/volsync:0.12.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 64Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tempdir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-q68c4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: talos-worker01
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: volsync
    serviceAccountName: volsync
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        medium: Memory
      name: tempdir
    - name: kube-api-access-q68c4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T03:04:46Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T03:02:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T20:58:15Z"
      message: 'containers with unready status: [manager]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-05-09T20:58:15Z"
      message: 'containers with unready status: [manager]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-05-07T03:02:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ca0bdd1a87023f272047c5baf020269c12e6c8a0b50876b18090b9e332ab1927
      image: quay.io/brancz/kube-rbac-proxy:v0.18.2
      imageID: quay.io/brancz/kube-rbac-proxy@sha256:7de54b6dedc8006ffd447267b826eb417a648c00f2b735b6d313395411803719
      lastState: {}
      name: kube-rbac-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-05-07T03:02:27Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-q68c4
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://7dc09ab7bdde9de53fae24b09099e6a597d62ec0d4584765d036f6f388a92c13
      image: quay.io/backube/volsync:0.12.1
      imageID: quay.io/backube/volsync@sha256:2dd1ef4251b3a5881ab9289dce481de3fe30da7fc8da5e4dfed2d562964c888a
      lastState:
        terminated:
          containerID: containerd://7dc09ab7bdde9de53fae24b09099e6a597d62ec0d4584765d036f6f388a92c13
          exitCode: 1
          finishedAt: "2025-05-09T20:58:14Z"
          reason: Error
          startedAt: "2025-05-09T20:56:13Z"
      name: manager
      ready: false
      restartCount: 557
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=manager pod=volsync-5cfbddb45c-86swh_volsync-system(7dc85a62-211e-4317-a5d4-e59c052ea792)
          reason: CrashLoopBackOff
      volumeMounts:
      - mountPath: /tmp
        name: tempdir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-q68c4
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.0.235
    hostIPs:
    - ip: 192.168.0.235
    phase: Running
    podIP: 10.69.2.167
    podIPs:
    - ip: 10.69.2.167
    qosClass: Burstable
    startTime: "2025-05-07T03:02:09Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:28Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "95933367"
    uid: 17b1ea13-d9ec-4470-8f0b-ef95737b123d
  spec:
    clusterIP: 10.96.219.23
    clusterIPs:
    - 10.96.219.23
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-prometheus-servicemonitor
      port: 9402
      protocol: TCP
      targetPort: 9402
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:28Z"
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-cainjector
    namespace: cert-manager
    resourceVersion: "95933344"
    uid: 26b3125a-9117-43e5-9ee9-3a278d9246aa
  spec:
    clusterIP: 10.96.241.134
    clusterIPs:
    - 10.96.241.134
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http-metrics
      port: 9402
      protocol: TCP
      targetPort: 9402
    selector:
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:28Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "95933385"
    uid: 85f6ca0b-5ebc-420c-bd10-fcf2513e8cb9
  spec:
    clusterIP: 10.96.102.153
    clusterIPs:
    - 10.96.102.153
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    - name: metrics
      port: 9402
      protocol: TCP
      targetPort: http-metrics
    selector:
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-24T07:53:45Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "209"
    uid: b0325c62-6083-4c55-9cf4-8e1da4a5d058
  spec:
    clusterIP: 10.96.0.1
    clusterIPs:
    - 10.96.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 6443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-24T07:53:48Z"
    labels:
      component: apid
      provider: talos
    name: talos
    namespace: default
    resourceVersion: "232"
    uid: 09741a0d-a68b-4ccf-898e-f0b886b23397
  spec:
    clusterIP: 10.96.52.86
    clusterIPs:
    - 10.96.52.86
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: apid
      port: 50000
      protocol: TCP
      targetPort: 50000
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-24T08:01:08Z"
    labels:
      app.kubernetes.io/component: notification-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: notification-controller
    namespace: flux-system
    resourceVersion: "92765532"
    uid: 1050927b-6d08-4717-b21b-1cabd93ddc10
  spec:
    clusterIP: 10.96.50.0
    clusterIPs:
    - 10.96.50.0
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    selector:
      app: notification-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-24T08:01:09Z"
    labels:
      app.kubernetes.io/component: source-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: source-controller
    namespace: flux-system
    resourceVersion: "92765534"
    uid: 01f824bf-5e53-4b62-a3a8-7752962d9b39
  spec:
    clusterIP: 10.96.111.115
    clusterIPs:
    - 10.96.111.115
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    selector:
      app: source-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-24T08:01:09Z"
    labels:
      app.kubernetes.io/component: notification-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: webhook-receiver
    namespace: flux-system
    resourceVersion: "92765536"
    uid: e0f913bc-612e-4ca8-b036-0007f0a71210
  spec:
    clusterIP: 10.96.22.231
    clusterIPs:
    - 10.96.22.231
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http-webhook
    selector:
      app: notification-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:03:22Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cilium-agent
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: cilium
    name: cilium-agent
    namespace: kube-system
    resourceVersion: "22191"
    uid: d3762449-ac42-4b64-b213-fdeadaade1a8
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 9962
      protocol: TCP
      targetPort: prometheus
    - name: envoy-metrics
      port: 9964
      protocol: TCP
      targetPort: envoy-metrics
    selector:
      k8s-app: cilium
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:03:22Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      io.cilium/app: operator
      name: cilium-operator
    name: cilium-operator
    namespace: kube-system
    resourceVersion: "22195"
    uid: 1698a9ce-f580-4b91-87e2-c9cd344ab6fd
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 9963
      protocol: TCP
      targetPort: prometheus
    selector:
      io.cilium/app: operator
      name: cilium-operator
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:03:23Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: hubble
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: hubble
    name: hubble-metrics
    namespace: kube-system
    resourceVersion: "22213"
    uid: 87a1ed77-765f-4edc-bcd6-a1e5950ed3f3
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: hubble-metrics
      port: 9965
      protocol: TCP
      targetPort: hubble-metrics
    selector:
      k8s-app: cilium
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:03:24Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: hubble-peer
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: cilium
    name: hubble-peer
    namespace: kube-system
    resourceVersion: "22221"
    uid: 34e09367-f4fb-4b31-93fe-2a1d290cd518
  spec:
    clusterIP: 10.96.236.68
    clusterIPs:
    - 10.96.236.68
    internalTrafficPolicy: Local
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: peer-service
      port: 443
      protocol: TCP
      targetPort: 4244
    selector:
      k8s-app: cilium
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:03:22Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: hubble-relay
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: hubble-relay
    name: hubble-relay
    namespace: kube-system
    resourceVersion: "22201"
    uid: ea5a5373-39d0-481f-b0f9-a54e35b8c61f
  spec:
    clusterIP: 10.96.89.150
    clusterIPs:
    - 10.96.89.150
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: grpc
    selector:
      k8s-app: hubble-relay
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T09:02:28Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: hubble-ui
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: hubble-ui
    name: hubble-ui
    namespace: kube-system
    resourceVersion: "22210"
    uid: 49aaf73a-f171-4f95-8773-81c6628e70bf
  spec:
    clusterIP: 10.96.245.240
    clusterIPs:
    - 10.96.245.240
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8081
    selector:
      k8s-app: hubble-ui
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T07:54:31Z"
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: coredns
      helm.sh/chart: coredns-1.40.0
      helm.toolkit.fluxcd.io/name: coredns
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "96910489"
    uid: 24eb6cbc-1167-49b1-a192-0840311fe584
  spec:
    clusterIP: 10.96.0.10
    clusterIPs:
    - 10.96.0.10
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: udp-53
      port: 53
      protocol: UDP
      targetPort: 53
    - name: tcp-53
      port: 53
      protocol: TCP
      targetPort: 53
    selector:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kubelet-csr-approver
      meta.helm.sh/release-namespace: kube-system
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-24T07:54:34Z"
    labels:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubelet-csr-approver
      app.kubernetes.io/version: v1.2.7
      helm.sh/chart: kubelet-csr-approver-1.2.7
      helm.toolkit.fluxcd.io/name: kubelet-csr-approver
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: kubelet-csr-approver
    namespace: kube-system
    resourceVersion: "91266870"
    uid: 803186a1-8546-4b93-b2fa-9580fdc0a532
  spec:
    clusterIP: 10.96.44.1
    clusterIPs:
    - 10.96.44.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 8080
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/name: kubelet-csr-approver
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:21:34Z"
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: metrics-server
      app.kubernetes.io/version: 0.7.2
      helm.sh/chart: metrics-server-3.12.2
      helm.toolkit.fluxcd.io/name: metrics-server
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: metrics-server
    namespace: kube-system
    resourceVersion: "7796"
    uid: 9afec81a-ea38-47d2-8c85-43fa816588bc
  spec:
    clusterIP: 10.96.138.71
    clusterIPs:
    - 10.96.138.71
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/name: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: spegel
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:16:19Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: spegel
      app.kubernetes.io/version: v0.2.0
      helm.sh/chart: spegel-0.2.0
      helm.toolkit.fluxcd.io/name: spegel
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: spegel
    namespace: kube-system
    resourceVersion: "96910188"
    uid: a224bf57-88c4-49fa-9e0d-0cd6d13dad20
  spec:
    clusterIP: 10.96.120.242
    clusterIPs:
    - 10.96.120.242
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/name: spegel
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: spegel
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-01-15T05:47:21Z"
    labels:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: spegel
      app.kubernetes.io/version: v0.2.0
      helm.sh/chart: spegel-0.2.0
      helm.toolkit.fluxcd.io/name: spegel
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: spegel-bootstrap
    namespace: kube-system
    resourceVersion: "96910219"
    uid: 6cfabad8-cc24-4162-8c4d-32dface3789a
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: router
      port: 5001
      protocol: TCP
      targetPort: 5001
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/name: spegel
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: spegel
      meta.helm.sh/release-namespace: kube-system
      service.kubernetes.io/topology-mode: auto
    creationTimestamp: "2024-10-24T08:16:19Z"
    labels:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: spegel
      app.kubernetes.io/version: v0.2.0
      helm.sh/chart: spegel-0.2.0
      helm.toolkit.fluxcd.io/name: spegel
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: spegel-registry
    namespace: kube-system
    resourceVersion: "96910205"
    uid: 2ec3469e-7a08-4728-8d43-386f2a97aad8
  spec:
    clusterIP: 10.96.1.22
    clusterIPs:
    - 10.96.1.22
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: registry
      nodePort: 30021
      port: 5000
      protocol: TCP
      targetPort: registry
    selector:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/name: spegel
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-03-15T23:12:59Z"
    labels:
      app: homepage
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: homepage-svc
    namespace: myapps
    resourceVersion: "71173999"
    uid: 656569ca-1c16-4b34-a98d-73e8a112710d
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.96.55.93
    clusterIPs:
    - 10.96.55.93
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 31425
      port: 3000
      protocol: TCP
      targetPort: http
    - name: https
      nodePort: 31160
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app: homepage
    sessionAffinity: None
    type: LoadBalancer
  status:
    conditions:
    - lastTransitionTime: "2025-03-15T23:12:59Z"
      message: ""
      reason: satisfied
      status: "True"
      type: cilium.io/IPAMRequestSatisfied
    loadBalancer:
      ingress:
      - ip: 192.168.0.129
        ipMode: VIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:39:45Z"
    labels:
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cloudflared
      app.kubernetes.io/service: cloudflared
      helm.sh/chart: app-template-3.7.1
      helm.toolkit.fluxcd.io/name: cloudflared
      helm.toolkit.fluxcd.io/namespace: network
    name: cloudflared
    namespace: network
    resourceVersion: "62259538"
    uid: 57bab685-c8db-409b-aea3-0bd7e29420b6
  spec:
    clusterIP: 10.96.69.76
    clusterIPs:
    - 10.96.69.76
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: echo-server
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:09:34Z"
    labels:
      app.kubernetes.io/instance: echo-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: echo-server
      app.kubernetes.io/service: echo-server
      helm.sh/chart: app-template-3.7.1
      helm.toolkit.fluxcd.io/name: echo-server
      helm.toolkit.fluxcd.io/namespace: network
    name: echo-server
    namespace: network
    resourceVersion: "62245404"
    uid: bf485803-8ca9-4f7d-8fb7-1c9a761655d7
  spec:
    clusterIP: 10.96.91.59
    clusterIPs:
    - 10.96.91.59
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/component: echo-server
      app.kubernetes.io/instance: echo-server
      app.kubernetes.io/name: echo-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:15:49Z"
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/version: 0.16.1
      helm.sh/chart: external-dns-1.16.1
      helm.toolkit.fluxcd.io/name: external-dns
      helm.toolkit.fluxcd.io/namespace: network
    name: external-dns
    namespace: network
    resourceVersion: "92763125"
    uid: 51f53fa7-e9ab-4103-8056-bc94a0501dd6
  spec:
    clusterIP: 10.96.177.195
    clusterIPs:
    - 10.96.177.195
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 7979
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      external-dns.alpha.kubernetes.io/hostname: external.samboxlab.top
      lbipam.cilium.io/ips: 192.168.0.20
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:53Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      helm.toolkit.fluxcd.io/name: ingress-nginx-external
      helm.toolkit.fluxcd.io/namespace: network
    name: ingress-nginx-external-controller
    namespace: network
    resourceVersion: "88591107"
    uid: a193f385-d5f4-4773-9154-38fcc5018762
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.96.215.236
    clusterIPs:
    - 10.96.215.236
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http
      nodePort: 31277
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      nodePort: 32727
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    conditions:
    - lastTransitionTime: "2024-10-24T09:02:54Z"
      message: No pool exists with a CIDR containing '192.168.0.20'
      reason: no_pool
      status: "False"
      type: cilium.io/IPAMRequestSatisfied
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:53Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      helm.toolkit.fluxcd.io/name: ingress-nginx-external
      helm.toolkit.fluxcd.io/namespace: network
    name: ingress-nginx-external-controller-admission
    namespace: network
    resourceVersion: "88591100"
    uid: 7485cace-f03e-46f2-8abd-36ffdd15ad63
  spec:
    clusterIP: 10.96.139.54
    clusterIPs:
    - 10.96.139.54
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:53Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      helm.toolkit.fluxcd.io/name: ingress-nginx-external
      helm.toolkit.fluxcd.io/namespace: network
    name: ingress-nginx-external-controller-metrics
    namespace: network
    resourceVersion: "88591098"
    uid: b9b99ad2-fb30-45c9-8a34-61a911aa6de5
  spec:
    clusterIP: 10.96.66.247
    clusterIPs:
    - 10.96.66.247
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 10254
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      lbipam.cilium.io/ips: 192.168.0.19
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:57Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      helm.toolkit.fluxcd.io/name: ingress-nginx-internal
      helm.toolkit.fluxcd.io/namespace: network
    name: ingress-nginx-internal-controller
    namespace: network
    resourceVersion: "88591127"
    uid: a6355a72-2e5f-41a4-9259-62252b62bdf7
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.96.139.11
    clusterIPs:
    - 10.96.139.11
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http
      nodePort: 31383
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      nodePort: 30947
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    conditions:
    - lastTransitionTime: "2024-10-24T09:02:58Z"
      message: No pool exists with a CIDR containing '192.168.0.19'
      reason: no_pool
      status: "False"
      type: cilium.io/IPAMRequestSatisfied
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:57Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      helm.toolkit.fluxcd.io/name: ingress-nginx-internal
      helm.toolkit.fluxcd.io/namespace: network
    name: ingress-nginx-internal-controller-admission
    namespace: network
    resourceVersion: "88591122"
    uid: 66f724af-b6dc-4fd5-8a9b-31a28790665e
  spec:
    clusterIP: 10.96.10.162
    clusterIPs:
    - 10.96.10.162
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:57Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      helm.toolkit.fluxcd.io/name: ingress-nginx-internal
      helm.toolkit.fluxcd.io/namespace: network
    name: ingress-nginx-internal-controller-metrics
    namespace: network
    resourceVersion: "88591117"
    uid: 78b4c7c2-4e86-4fa6-8034-896b092de1d3
  spec:
    clusterIP: 10.96.109.192
    clusterIPs:
    - 10.96.109.192
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 10254
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      lbipam.cilium.io/ips: 192.168.0.35
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-24T08:27:02Z"
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      helm.toolkit.fluxcd.io/name: k8s-gateway
      helm.toolkit.fluxcd.io/namespace: network
    name: k8s-gateway
    namespace: network
    resourceVersion: "9651"
    uid: 05c0fe0a-fd3e-41e3-8552-65ad67b02df0
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.96.221.121
    clusterIPs:
    - 10.96.221.121
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns-udp
      nodePort: 30588
      port: 53
      protocol: UDP
      targetPort: dns-udp
    selector:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/name: k8s-gateway
    sessionAffinity: None
    type: LoadBalancer
  status:
    conditions:
    - lastTransitionTime: "2024-10-24T08:27:02Z"
      message: No pool exists with a CIDR containing '192.168.0.35'
      reason: no_pool
      status: "False"
      type: cilium.io/IPAMRequestSatisfied
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-03-02T17:14:24Z"
    labels:
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: qrapp-svc
    namespace: qrapp
    resourceVersion: "69905580"
    uid: 317149bc-b910-4b2c-90b3-4a0e82f33b9c
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.96.239.82
    clusterIPs:
    - 10.96.239.82
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 30817
      port: 80
      protocol: TCP
      targetPort: 5001
    - name: https
      nodePort: 30973
      port: 443
      protocol: TCP
      targetPort: 5001
    selector:
      app: qrapp
    sessionAffinity: None
    type: LoadBalancer
  status:
    conditions:
    - lastTransitionTime: "2025-03-02T17:14:25Z"
      message: ""
      reason: satisfied
      status: "True"
      type: cilium.io/IPAMRequestSatisfied
    loadBalancer:
      ingress:
      - ip: 192.168.0.131
        ipMode: VIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: starboard-operator
      meta.helm.sh/release-namespace: starboard-system
      prometheus.io/path: /metrics
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-26T05:28:04Z"
    labels:
      app.kubernetes.io/instance: starboard-operator
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: starboard-operator
      app.kubernetes.io/version: 0.15.3
      helm.sh/chart: starboard-operator-0.10.3
      helm.toolkit.fluxcd.io/name: starboard-operator
      helm.toolkit.fluxcd.io/namespace: starboard-system
    name: starboard-operator
    namespace: starboard-system
    resourceVersion: "834368"
    uid: 629a8f52-3699-4cbb-9fe5-7cc664a7ca0a
  spec:
    clusterIP: 10.96.216.190
    clusterIPs:
    - 10.96.216.190
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 80
      protocol: TCP
      targetPort: metrics
    selector:
      app.kubernetes.io/instance: starboard-operator
      app.kubernetes.io/name: starboard-operator
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: volsync
      meta.helm.sh/release-namespace: volsync-system
    creationTimestamp: "2025-05-07T03:02:08Z"
    labels:
      app.kubernetes.io/instance: volsync
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: volsync
      app.kubernetes.io/version: 0.12.1
      control-plane: volsync-controller
      helm.sh/chart: volsync-0.12.1
    name: volsync-metrics
    namespace: volsync-system
    resourceVersion: "102246322"
    uid: aa1d4369-d5e6-4a25-b16c-3a10b19ddf56
  spec:
    clusterIP: 10.96.33.247
    clusterIPs:
    - 10.96.33.247
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 8443
      protocol: TCP
      targetPort: https
    selector:
      control-plane: volsync-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "8"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T07:54:27Z"
    generation: 8
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cilium-agent
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: cilium
    name: cilium
    namespace: kube-system
    resourceVersion: "102241446"
    uid: 339df624-cdaf-4ba1-be49-e5f5c3944fe1
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: cilium
    template:
      metadata:
        annotations:
          cilium.io/cilium-configmap-checksum: f6f3225dd63a52d6a561c038b20f94f8936f01139c1dcbc637dc0df90f717d94
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: cilium-agent
          app.kubernetes.io/part-of: cilium
          k8s-app: cilium
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - args:
          - --config-dir=/tmp/cilium/config-map
          command:
          - cilium-agent
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_CLUSTERMESH_CONFIG
            value: /var/lib/cilium/clustermesh/
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - bash
                - -c
                - |
                  set -o errexit
                  set -o pipefail
                  set -o nounset

                  # When running in AWS ENI mode, it's likely that 'aws-node' has
                  # had a chance to install SNAT iptables rules. These can result
                  # in dropped traffic, so we should attempt to remove them.
                  # We do it using a 'postStart' hook since this may need to run
                  # for nodes which might have already been init'ed but may still
                  # have dangling rules. This is safe because there are no
                  # dependencies on anything that is part of the startup script
                  # itself, and can be safely run multiple times per node (e.g. in
                  # case of a restart).
                  if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                  then
                      echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                      iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                  fi
                  echo 'Done!'
            preStop:
              exec:
                command:
                - /cni-uninstall.sh
          livenessProbe:
            failureThreshold: 10
            httpGet:
              host: 127.0.0.1
              httpHeaders:
              - name: brief
                value: "true"
              path: /healthz
              port: 9879
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: cilium-agent
          ports:
          - containerPort: 4244
            hostPort: 4244
            name: peer-service
            protocol: TCP
          - containerPort: 9962
            hostPort: 9962
            name: prometheus
            protocol: TCP
          - containerPort: 9964
            hostPort: 9964
            name: envoy-metrics
            protocol: TCP
          - containerPort: 9901
            hostPort: 9901
            name: envoy-admin
            protocol: TCP
          - containerPort: 9965
            hostPort: 9965
            name: hubble-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              httpHeaders:
              - name: brief
                value: "true"
              path: /healthz
              port: 9879
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            capabilities:
              add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
              drop:
              - ALL
            seLinuxOptions:
              level: s0
              type: spc_t
          startupProbe:
            failureThreshold: 105
            httpGet:
              host: 127.0.0.1
              httpHeaders:
              - name: brief
                value: "true"
              path: /healthz
              port: 9879
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /host/proc/sys/net
            name: host-proc-sys-net
          - mountPath: /host/proc/sys/kernel
            name: host-proc-sys-kernel
          - mountPath: /sys/fs/bpf
            mountPropagation: HostToContainer
            name: bpf-maps
          - mountPath: /sys/fs/cgroup
            name: cilium-cgroup
          - mountPath: /var/run/cilium
            name: cilium-run
          - mountPath: /var/run/cilium/netns
            mountPropagation: HostToContainer
            name: cilium-netns
          - mountPath: /host/etc/cni/net.d
            name: etc-cni-netd
          - mountPath: /var/lib/cilium/clustermesh
            name: clustermesh-secrets
            readOnly: true
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /var/lib/cilium/tls/hubble
            name: hubble-tls
            readOnly: true
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - cilium-dbg
          - build-config
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
          imagePullPolicy: IfNotPresent
          name: config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        - command:
          - sh
          - -ec
          - |
            cp /usr/bin/cilium-mount /hostbin/cilium-mount;
            nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
            rm /hostbin/cilium-mount
          env:
          - name: CGROUP_ROOT
            value: /sys/fs/cgroup
          - name: BIN_PATH
            value: /opt/cni/bin
          image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
          imagePullPolicy: IfNotPresent
          name: mount-cgroup
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
              drop:
              - ALL
            seLinuxOptions:
              level: s0
              type: spc_t
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /hostproc
            name: hostproc
          - mountPath: /hostbin
            name: cni-path
        - command:
          - sh
          - -ec
          - |
            cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
            nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
            rm /hostbin/cilium-sysctlfix
          env:
          - name: BIN_PATH
            value: /opt/cni/bin
          image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
          imagePullPolicy: IfNotPresent
          name: apply-sysctl-overwrites
          resources: {}
          securityContext:
            capabilities:
              add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
              drop:
              - ALL
            seLinuxOptions:
              level: s0
              type: spc_t
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /hostproc
            name: hostproc
          - mountPath: /hostbin
            name: cni-path
        - args:
          - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
          command:
          - /bin/bash
          - -c
          - --
          image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
          imagePullPolicy: IfNotPresent
          name: mount-bpf-fs
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /sys/fs/bpf
            mountPropagation: Bidirectional
            name: bpf-maps
        - command:
          - /init-container.sh
          env:
          - name: CILIUM_ALL_STATE
            valueFrom:
              configMapKeyRef:
                key: clean-cilium-state
                name: cilium-config
                optional: true
          - name: CILIUM_BPF_STATE
            valueFrom:
              configMapKeyRef:
                key: clean-cilium-bpf-state
                name: cilium-config
                optional: true
          - name: WRITE_CNI_CONF_WHEN_READY
            valueFrom:
              configMapKeyRef:
                key: write-cni-conf-when-ready
                name: cilium-config
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
          imagePullPolicy: IfNotPresent
          name: clean-cilium-state
          resources: {}
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - SYS_ADMIN
              - SYS_RESOURCE
              drop:
              - ALL
            seLinuxOptions:
              level: s0
              type: spc_t
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /sys/fs/bpf
            name: bpf-maps
          - mountPath: /sys/fs/cgroup
            mountPropagation: HostToContainer
            name: cilium-cgroup
          - mountPath: /var/run/cilium
            name: cilium-run
        - command:
          - /install-plugin.sh
          image: quay.io/cilium/cilium:v1.17.3@sha256:1782794aeac951af139315c10eff34050aa7579c12827ee9ec376bb719b82873
          imagePullPolicy: IfNotPresent
          name: install-cni-binaries
          resources:
            requests:
              cpu: 100m
              memory: 10Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            seLinuxOptions:
              level: s0
              type: spc_t
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-path
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          appArmorProfile:
            type: Unconfined
        serviceAccount: cilium
        serviceAccountName: cilium
        terminationGracePeriodSeconds: 1
        tolerations:
        - operator: Exists
        volumes:
        - emptyDir: {}
          name: tmp
        - hostPath:
            path: /var/run/cilium
            type: DirectoryOrCreate
          name: cilium-run
        - hostPath:
            path: /var/run/netns
            type: DirectoryOrCreate
          name: cilium-netns
        - hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
          name: bpf-maps
        - hostPath:
            path: /proc
            type: Directory
          name: hostproc
        - hostPath:
            path: /sys/fs/cgroup
            type: DirectoryOrCreate
          name: cilium-cgroup
        - hostPath:
            path: /opt/cni/bin
            type: DirectoryOrCreate
          name: cni-path
        - hostPath:
            path: /etc/cni/net.d
            type: DirectoryOrCreate
          name: etc-cni-netd
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - name: clustermesh-secrets
          projected:
            defaultMode: 256
            sources:
            - secret:
                name: cilium-clustermesh
                optional: true
            - secret:
                items:
                - key: tls.key
                  path: common-etcd-client.key
                - key: tls.crt
                  path: common-etcd-client.crt
                - key: ca.crt
                  path: common-etcd-client-ca.crt
                name: clustermesh-apiserver-remote-cert
                optional: true
            - secret:
                items:
                - key: tls.key
                  path: local-etcd-client.key
                - key: tls.crt
                  path: local-etcd-client.crt
                - key: ca.crt
                  path: local-etcd-client-ca.crt
                name: clustermesh-apiserver-local-cert
                optional: true
        - hostPath:
            path: /proc/sys/net
            type: Directory
          name: host-proc-sys-net
        - hostPath:
            path: /proc/sys/kernel
            type: Directory
          name: host-proc-sys-kernel
        - name: hubble-tls
          projected:
            defaultMode: 256
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: server.crt
                - key: tls.key
                  path: server.key
                - key: ca.crt
                  path: client-ca.crt
                name: hubble-server-certs
                optional: true
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 2
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 8
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      meta.helm.sh/release-name: csi-driver-nfs
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-16T17:25:58Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: csi-driver-nfs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      helm.sh/chart: csi-driver-nfs-v4.10.0
    name: csi-nfs-node
    namespace: kube-system
    resourceVersion: "102239505"
    uid: 747761f5-f7cc-4f56-a782-80f565aa67f1
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-nfs-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-nfs-node
          app.kubernetes.io/instance: csi-driver-nfs
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: csi-driver-nfs
          app.kubernetes.io/version: v4.10.0
          helm.sh/chart: csi-driver-nfs-v4.10.0
      spec:
        containers:
        - args:
          - --csi-address=/csi/csi.sock
          - --probe-timeout=3s
          - --http-endpoint=localhost:29653
          - --v=2
          image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=2
          - --csi-address=/csi/csi.sock
          - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
          env:
          - name: DRIVER_REG_SOCK_PATH
            value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
          imagePullPolicy: IfNotPresent
          name: node-driver-registrar
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /registration
            name: registration-dir
        - args:
          - --v=5
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --drivername=nfs.csi.k8s.io
          - --mount-permissions=0
          env:
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /healthz
              port: 29653
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: nfs
          resources:
            limits:
              memory: 300Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /var/lib/kubelet/pods
            mountPropagation: Bidirectional
            name: pods-mount-dir
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: csi-nfs-node-sa
        serviceAccountName: csi-nfs-node-sa
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/plugins/csi-nfsplugin
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: pods-mount-dir
        - hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
          name: registration-dir
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      meta.helm.sh/release-name: csi-driver-nfs2
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-16T22:06:20Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: csi-driver-nfs2
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      helm.sh/chart: csi-driver-nfs-v4.10.0
    name: csi-nfs2-node
    namespace: kube-system
    resourceVersion: "102239555"
    uid: 7b5abb0c-1f43-411c-b745-9e8a8feaebe0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-nfs2-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-nfs2-node
          app.kubernetes.io/instance: csi-driver-nfs2
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: csi-driver-nfs
          app.kubernetes.io/version: v4.10.0
          helm.sh/chart: csi-driver-nfs-v4.10.0
      spec:
        containers:
        - args:
          - --csi-address=/csi/csi.sock
          - --probe-timeout=3s
          - --http-endpoint=localhost:39653
          - --v=2
          image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=2
          - --csi-address=/csi/csi.sock
          - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
          env:
          - name: DRIVER_REG_SOCK_PATH
            value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.13.0
          imagePullPolicy: IfNotPresent
          name: node-driver-registrar
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /registration
            name: registration-dir
        - args:
          - --v=5
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --drivername=nfs2.csi.k8s.io
          - --mount-permissions=0
          env:
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /healthz
              port: 39653
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: nfs
          resources:
            limits:
              memory: 300Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /var/lib/kubelet/pods
            mountPropagation: Bidirectional
            name: pods-mount-dir
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: csi-nfs2-node-sa
        serviceAccountName: csi-nfs2-node-sa
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/plugins/csi-nfsplugin
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: pods-mount-dir
        - hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
          name: registration-dir
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "4"
      meta.helm.sh/release-name: spegel
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:16:20Z"
    generation: 4
    labels:
      app.kubernetes.io/instance: spegel
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: spegel
      app.kubernetes.io/version: v0.2.0
      helm.sh/chart: spegel-0.2.0
      helm.toolkit.fluxcd.io/name: spegel
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: spegel
    namespace: kube-system
    resourceVersion: "102242040"
    uid: 675df56c-1660-498c-868c-8d9c1c937bdc
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: spegel
        app.kubernetes.io/name: spegel
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: spegel
          app.kubernetes.io/name: spegel
      spec:
        containers:
        - args:
          - registry
          - --log-level=INFO
          - --mirror-resolve-retries=3
          - --mirror-resolve-timeout=20ms
          - --registry-addr=:5000
          - --router-addr=:5001
          - --metrics-addr=:9090
          - --containerd-sock=/run/containerd/containerd.sock
          - --containerd-namespace=k8s.io
          - --containerd-registry-config-path=/etc/cri/conf.d/hosts
          - --bootstrap-kind=dns
          - --dns-bootstrap-domain=spegel-bootstrap.kube-system.svc.cluster.local.
          - --resolve-latest-tag=true
          - --containerd-content-path=/var/lib/containerd/io.containerd.content.v1.content
          - --debug-web-enabled=false
          env:
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          - name: NODE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          image: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
          imagePullPolicy: IfNotPresent
          name: registry
          ports:
          - containerPort: 5000
            hostPort: 29999
            name: registry
            protocol: TCP
          - containerPort: 5001
            name: router
            protocol: TCP
          - containerPort: 9090
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: registry
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 128Mi
          securityContext: {}
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /healthz
              port: registry
              scheme: HTTP
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /run/containerd/containerd.sock
            name: containerd-sock
          - mountPath: /var/lib/containerd/io.containerd.content.v1.content
            name: containerd-content
            readOnly: true
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - configuration
          - --log-level=INFO
          - --containerd-registry-config-path=/etc/cri/conf.d/hosts
          - --mirror-targets
          - http://$(NODE_IP):29999
          - http://$(NODE_IP):30021
          - --resolve-tags=true
          - --prepend-existing=false
          env:
          - name: NODE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          image: ghcr.io/spegel-org/spegel@sha256:d6b0e36e74d04336cf80cc94dd2d84181e9f14495f70496da1ecdc81967ee8a0
          imagePullPolicy: IfNotPresent
          name: configuration
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 128Mi
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cri/conf.d/hosts
            name: containerd-config
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: spegel
        serviceAccountName: spegel
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        volumes:
        - hostPath:
            path: /run/containerd/containerd.sock
            type: Socket
          name: containerd-sock
        - hostPath:
            path: /var/lib/containerd/io.containerd.content.v1.content
            type: Directory
          name: containerd-content
        - hostPath:
            path: /etc/cri/conf.d/hosts
            type: DirectoryOrCreate
          name: containerd-config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 4
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:28Z"
    generation: 7
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "102241497"
    uid: db2905ee-41a6-482f-b397-715b8ed4c566
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.17.2
          helm.sh/chart: cert-manager-v1.17.2
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.17.2
          - --max-concurrent-challenges=60
          - --dns01-recursive-nameservers-only=true
          - --dns01-recursive-nameservers=https://1.1.1.1:443/dns-query,https://1.0.0.1:443/dns-query
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.17.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:25:50Z"
      lastUpdateTime: "2025-04-26T08:37:33Z"
      message: ReplicaSet "cert-manager-6d6f549b9c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:50:53Z"
      lastUpdateTime: "2025-05-07T02:50:53Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:28Z"
    generation: 7
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-cainjector
    namespace: cert-manager
    resourceVersion: "102241727"
    uid: 177d80a4-b5df-407b-a01d-8106d31b2d94
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.17.2
          helm.sh/chart: cert-manager-v1.17.2
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.17.2
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:25:50Z"
      lastUpdateTime: "2025-04-26T08:37:09Z"
      message: ReplicaSet "cert-manager-cainjector-7cc5fd9895" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:51:33Z"
      lastUpdateTime: "2025-05-07T02:51:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:29Z"
    generation: 7
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      helm.toolkit.fluxcd.io/name: cert-manager
      helm.toolkit.fluxcd.io/namespace: cert-manager
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "102242255"
    uid: 8617a8e4-29b2-4dde-be3a-fe98dde6a020
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.17.2
          helm.sh/chart: cert-manager-v1.17.2
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.17.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:25:50Z"
      lastUpdateTime: "2025-04-26T08:37:17Z"
      message: ReplicaSet "cert-manager-webhook-7996dff45d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:05Z"
      lastUpdateTime: "2025-05-07T02:53:05Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: reflector
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-03-02T03:53:13Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: reflector
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: reflector
      app.kubernetes.io/version: 9.0.318
      helm.sh/chart: reflector-9.0.318
    name: reflector
    namespace: default
    resourceVersion: "102240696"
    uid: 10d7c1de-7df6-400f-9c16-5e1922976152
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: reflector
        app.kubernetes.io/name: reflector
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: reflector
          app.kubernetes.io/name: reflector
      spec:
        containers:
        - env:
          - name: ES_Serilog__MinimumLevel__Default
            value: Information
          - name: ES_Reflector__Watcher__Timeout
          - name: ES_Reflector__Kubernetes__SkipTlsVerify
            value: "false"
          image: docker.io/emberstack/kubernetes-reflector:9.0.318
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health/live
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: reflector
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          startupProbe:
            failureThreshold: 5
            httpGet:
              path: /health/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 2000
        serviceAccount: reflector
        serviceAccountName: reflector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-02T03:53:13Z"
      lastUpdateTime: "2025-03-02T03:53:56Z"
      message: ReplicaSet "reflector-dcc5cf554" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:47:42Z"
      lastUpdateTime: "2025-05-07T02:47:42Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-10-24T08:01:10Z"
    generation: 3
    labels:
      app.kubernetes.io/component: helm-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: helm-controller
    namespace: flux-system
    resourceVersion: "102242287"
    uid: bf20f6d3-d752-4647-8123-049206ef3517
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: helm-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: helm-controller
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          - --feature-gates=OOMWatch=true
          - --oom-watch-memory-threshold=95
          - --oom-watch-interval=500ms
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/helm-controller:v1.2.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: helm-controller
        serviceAccountName: helm-controller
        terminationGracePeriodSeconds: 600
        volumes:
        - emptyDir: {}
          name: temp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:01:10Z"
      lastUpdateTime: "2025-04-21T14:36:04Z"
      message: ReplicaSet "helm-controller-965c76748" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:06Z"
      lastUpdateTime: "2025-05-07T02:53:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-10-24T08:01:10Z"
    generation: 3
    labels:
      app.kubernetes.io/component: image-automation-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: image-automation-controller
    namespace: flux-system
    resourceVersion: "102242058"
    uid: 12e4f35b-ed1a-4ad5-8539-079964ee9b9f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: image-automation-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: image-automation-controller
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/image-automation-controller:v0.40.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: image-automation-controller
        serviceAccountName: image-automation-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:01:11Z"
      lastUpdateTime: "2025-04-21T14:35:58Z"
      message: ReplicaSet "image-automation-controller-8697d7cb68" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:52:39Z"
      lastUpdateTime: "2025-05-07T02:52:39Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-10-24T08:01:11Z"
    generation: 3
    labels:
      app.kubernetes.io/component: image-reflector-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: image-reflector-controller
    namespace: flux-system
    resourceVersion: "102242183"
    uid: 0535a3cc-473c-459e-bff8-e5ff120f2e99
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: image-reflector-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: image-reflector-controller
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/image-reflector-controller:v0.34.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
          - mountPath: /data
            name: data
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: image-reflector-controller
        serviceAccountName: image-reflector-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
        - emptyDir: {}
          name: data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:01:11Z"
      lastUpdateTime: "2025-04-21T14:36:12Z"
      message: ReplicaSet "image-reflector-controller-6cf5d6c6b8" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:52:58Z"
      lastUpdateTime: "2025-05-07T02:52:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-10-24T08:01:11Z"
    generation: 3
    labels:
      app.kubernetes.io/component: kustomize-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: kustomize-controller
    namespace: flux-system
    resourceVersion: "102242281"
    uid: bbf2e577-8548-4839-af0f-8e5dfd83b45b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kustomize-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: kustomize-controller
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/kustomize-controller:v1.5.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: kustomize-controller
        serviceAccountName: kustomize-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: temp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:01:11Z"
      lastUpdateTime: "2025-04-21T14:36:13Z"
      message: ReplicaSet "kustomize-controller-66f7cb4d86" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:06Z"
      lastUpdateTime: "2025-05-07T02:53:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-10-24T08:01:11Z"
    generation: 3
    labels:
      app.kubernetes.io/component: notification-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: notification-controller
    namespace: flux-system
    resourceVersion: "102242252"
    uid: 4307de9b-8ff2-4dba-8a8b-f86f479efed2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: notification-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: notification-controller
      spec:
        containers:
        - args:
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/notification-controller:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          - containerPort: 9292
            name: http-webhook
            protocol: TCP
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: notification-controller
        serviceAccountName: notification-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:01:12Z"
      lastUpdateTime: "2025-04-21T14:35:48Z"
      message: ReplicaSet "notification-controller-f9dc675b9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:04Z"
      lastUpdateTime: "2025-05-07T02:53:04Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-10-24T08:01:12Z"
    generation: 3
    labels:
      app.kubernetes.io/component: source-controller
      app.kubernetes.io/instance: flux-system
      app.kubernetes.io/part-of: flux
      app.kubernetes.io/version: v2.5.1
      control-plane: controller
      kustomize.toolkit.fluxcd.io/name: flux
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: source-controller
    namespace: flux-system
    resourceVersion: "102242504"
    uid: 37cb0dde-1b65-439b-9b01-d6bed4f56268
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: source-controller
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: source-controller
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --storage-path=/data
          - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: TUF_ROOT
            value: /tmp/.sigstore
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/source-controller:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: source-controller
        serviceAccountName: source-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:01:12Z"
      lastUpdateTime: "2025-04-21T14:35:56Z"
      message: ReplicaSet "source-controller-7ddc4d4f4c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:29Z"
      lastUpdateTime: "2025-05-07T02:53:29Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "8"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T07:54:27Z"
    generation: 8
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      io.cilium/app: operator
      name: cilium-operator
    name: cilium-operator
    namespace: kube-system
    resourceVersion: "100634945"
    uid: 0b00a562-4012-41bf-ae7f-7eb918ad980d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 100%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          cilium.io/cilium-configmap-checksum: f6f3225dd63a52d6a561c038b20f94f8936f01139c1dcbc637dc0df90f717d94
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: cilium-operator
          app.kubernetes.io/part-of: cilium
          io.cilium/app: operator
          name: cilium-operator
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - args:
          - --config-dir=/tmp/cilium/config-map
          - --debug=$(CILIUM_DEBUG)
          command:
          - cilium-operator-generic
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/operator-generic:v1.17.3@sha256:8bd38d0e97a955b2d725929d60df09d712fb62b60b930551a29abac2dd92e597
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          ports:
          - containerPort: 9963
            hostPort: 9963
            name: prometheus
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp/cilium/config-map
            name: cilium-config-path
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: cilium-config
          name: cilium-config-path
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T07:54:27Z"
      lastUpdateTime: "2024-10-24T07:54:27Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-24T07:54:27Z"
      lastUpdateTime: "2025-04-21T14:26:48Z"
      message: ReplicaSet "cilium-operator-79966f7757" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 8
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "6"
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T07:54:31Z"
    generation: 6
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: coredns
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: coredns-1.40.0
      helm.toolkit.fluxcd.io/name: coredns
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: coredns
    namespace: kube-system
    resourceVersion: "102240693"
    uid: fcf3ba80-0ec3-4b26-88f3-948db93084a6
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: coredns
        app.kubernetes.io/name: coredns
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 5e5e1aa27c0d50ff1167f19fcebcb65533c1e06bb3e8f58d50cdf764a2358cbd
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: coredns
          k8s-app: kube-dns
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: coredns/coredns:1.12.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: udp-53
            protocol: UDP
          - containerPort: 53
            name: tcp-53
            protocol: TCP
          - containerPort: 9153
            name: tcp-9153
            protocol: TCP
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T07:54:31Z"
      lastUpdateTime: "2024-10-24T07:54:31Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-24T07:54:31Z"
      lastUpdateTime: "2025-04-27T19:40:24Z"
      message: ReplicaSet "coredns-779c8488bd" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 6
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: csi-driver-nfs
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-16T17:25:58Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: csi-driver-nfs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      helm.sh/chart: csi-driver-nfs-v4.10.0
    name: csi-nfs-controller
    namespace: kube-system
    resourceVersion: "99309779"
    uid: 0ade97a9-f9e0-4b64-a13a-91f4cd61bdb3
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-nfs-controller
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-nfs-controller
          app.kubernetes.io/instance: csi-driver-nfs
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: csi-driver-nfs
          app.kubernetes.io/version: v4.10.0
          helm.sh/chart: csi-driver-nfs-v4.10.0
      spec:
        containers:
        - args:
          - -v=2
          - --csi-address=$(ADDRESS)
          - --leader-election
          - --leader-election-namespace=kube-system
          - --extra-create-metadata=true
          - --feature-gates=HonorPVReclaimPolicy=true
          - --timeout=1200s
          - --retry-interval-max=30m
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - -csi-address=$(ADDRESS)
          - -v=2
          - -leader-election
          - --leader-election-namespace=kube-system
          - -handle-volume-inuse-error=false
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=2
          - --csi-address=$(ADDRESS)
          - --leader-election-namespace=kube-system
          - --leader-election
          - --timeout=1200s
          - --retry-interval-max=30m
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.0
          imagePullPolicy: IfNotPresent
          name: csi-snapshotter
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=/csi/csi.sock
          - --probe-timeout=3s
          - --http-endpoint=localhost:29652
          - --v=2
          image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=5
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --drivername=nfs.csi.k8s.io
          - --mount-permissions=0
          - --working-mount-dir=/tmp
          - --default-ondelete-policy=delete
          - --use-tar-command-in-snapshot=false
          env:
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /healthz
              port: 29652
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: nfs
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kubelet/pods
            mountPropagation: Bidirectional
            name: pods-mount-dir
          - mountPath: /csi
            name: socket-dir
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: csi-nfs-controller-sa
        serviceAccountName: csi-nfs-controller-sa
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/controlplane
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: pods-mount-dir
        - emptyDir: {}
          name: socket-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-16T17:25:59Z"
      lastUpdateTime: "2025-03-16T17:29:00Z"
      message: ReplicaSet "csi-nfs-controller-7dfdd76f9f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-01T09:40:02Z"
      lastUpdateTime: "2025-05-01T09:40:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: csi-driver-nfs2
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-16T22:06:20Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: csi-driver-nfs2
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      helm.sh/chart: csi-driver-nfs-v4.10.0
    name: csi-nfs2-controller
    namespace: kube-system
    resourceVersion: "102415814"
    uid: 26648bd5-4469-485d-924c-2afa6fd1316a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: csi-nfs2-controller
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-nfs2-controller
          app.kubernetes.io/instance: csi-driver-nfs2
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: csi-driver-nfs
          app.kubernetes.io/version: v4.10.0
          helm.sh/chart: csi-driver-nfs-v4.10.0
      spec:
        containers:
        - args:
          - -v=2
          - --csi-address=$(ADDRESS)
          - --leader-election
          - --leader-election-namespace=kube-system
          - --extra-create-metadata=true
          - --feature-gates=HonorPVReclaimPolicy=true
          - --timeout=1200s
          - --retry-interval-max=30m
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - -csi-address=$(ADDRESS)
          - -v=2
          - -leader-election
          - --leader-election-namespace=kube-system
          - -handle-volume-inuse-error=false
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=2
          - --csi-address=$(ADDRESS)
          - --leader-election-namespace=kube-system
          - --leader-election
          - --timeout=1200s
          - --retry-interval-max=30m
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.0
          imagePullPolicy: IfNotPresent
          name: csi-snapshotter
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=/csi/csi.sock
          - --probe-timeout=3s
          - --http-endpoint=localhost:29652
          - --v=2
          image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=5
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --drivername=nfs2.csi.k8s.io
          - --mount-permissions=0
          - --working-mount-dir=/tmp
          - --default-ondelete-policy=delete
          - --use-tar-command-in-snapshot=false
          env:
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /healthz
              port: 29652
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: nfs
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kubelet/pods
            mountPropagation: Bidirectional
            name: pods-mount-dir
          - mountPath: /csi
            name: socket-dir
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: csi-nfs2-controller-sa
        serviceAccountName: csi-nfs2-controller-sa
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/controlplane
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: pods-mount-dir
        - emptyDir: {}
          name: socket-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-16T22:06:20Z"
      lastUpdateTime: "2025-03-16T22:07:07Z"
      message: ReplicaSet "csi-nfs2-controller-5cdf8b7f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T09:38:24Z"
      lastUpdateTime: "2025-05-07T09:38:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:03:24Z"
    generation: 7
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: hubble-relay
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: hubble-relay
    name: hubble-relay
    namespace: kube-system
    resourceVersion: "102241493"
    uid: b1278694-2976-4858-b39d-9d5863bc4256
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: hubble-relay
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          cilium.io/hubble-relay-configmap-checksum: eff0e5f47a53fa4b010591dc8fd68bffd75ccd6298d9d502cc7125e0b3fede93
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-relay
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-relay
      spec:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: false
        containers:
        - args:
          - serve
          command:
          - hubble-relay
          image: quay.io/cilium/hubble-relay:v1.17.3@sha256:f8674b5139111ac828a8818da7f2d344b4a5bfbaeb122c5dc9abed3e74000c55
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 12
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: hubble-relay
          ports:
          - containerPort: 4245
            name: grpc
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            grpc:
              port: 4222
              service: ""
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          startupProbe:
            failureThreshold: 20
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65532
        serviceAccount: hubble-relay
        serviceAccountName: hubble-relay
        terminationGracePeriodSeconds: 1
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: config.yaml
              path: config.yaml
            name: hubble-relay-config
          name: config
        - name: tls
          projected:
            defaultMode: 256
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
                name: hubble-relay-client-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:03:30Z"
      lastUpdateTime: "2024-10-24T08:03:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-24T08:03:29Z"
      lastUpdateTime: "2025-04-21T14:26:48Z"
      message: ReplicaSet "hubble-relay-557d84fdf8" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T09:02:29Z"
    generation: 5
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: hubble-ui
      app.kubernetes.io/part-of: cilium
      helm.toolkit.fluxcd.io/name: cilium
      helm.toolkit.fluxcd.io/namespace: kube-system
      k8s-app: hubble-ui
    name: hubble-ui
    namespace: kube-system
    resourceVersion: "102241496"
    uid: 8bcdd077-0c93-48e8-83e0-38def7ac8f66
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: hubble-ui
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          cilium.io/hubble-ui-nginx-configmap-checksum: de069d2597e16e4de004ce684b15d74b2ab6051c717ae073d86199a76d91fcf1
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-ui
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-ui
      spec:
        automountServiceAccountToken: true
        containers:
        - image: quay.io/cilium/hubble-ui:v0.13.2@sha256:9e37c1296b802830834cc87342a9182ccbb71ffebb711971e849221bd9d59392
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: frontend
          ports:
          - containerPort: 8081
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            name: hubble-ui-nginx-conf
            subPath: nginx.conf
          - mountPath: /tmp
            name: tmp-dir
        - env:
          - name: EVENTS_SERVER_PORT
            value: "8090"
          - name: FLOWS_API_ADDR
            value: hubble-relay:80
          image: quay.io/cilium/hubble-ui-backend:v0.13.2@sha256:a034b7e98e6ea796ed26df8f4e71f83fc16465a19d166eff67a03b822c0bfa15
          imagePullPolicy: IfNotPresent
          name: backend
          ports:
          - containerPort: 8090
            name: grpc
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
          runAsGroup: 1001
          runAsUser: 1001
        serviceAccount: hubble-ui
        serviceAccountName: hubble-ui
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: hubble-ui-nginx
          name: hubble-ui-nginx-conf
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T09:02:30Z"
      lastUpdateTime: "2024-10-24T09:02:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-24T09:02:30Z"
      lastUpdateTime: "2025-04-14T00:40:50Z"
      message: ReplicaSet "hubble-ui-7fd6bc845b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: kubelet-csr-approver
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T07:54:35Z"
    generation: 3
    labels:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubelet-csr-approver
      app.kubernetes.io/version: v1.2.7
      helm.sh/chart: kubelet-csr-approver-1.2.7
      helm.toolkit.fluxcd.io/name: kubelet-csr-approver
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: kubelet-csr-approver
    namespace: kube-system
    resourceVersion: "102415873"
    uid: 781c33a3-2896-41bb-bfd8-a20ca5235600
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubelet-csr-approver
        app.kubernetes.io/name: kubelet-csr-approver
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: kubelet-csr-approver
          app.kubernetes.io/name: kubelet-csr-approver
      spec:
        containers:
        - args:
          - -metrics-bind-address
          - :8080
          - -health-probe-bind-address
          - :8081
          - -leader-election
          env:
          - name: PROVIDER_REGEX
            value: ^(talos-controlplane|talos-worker01|talos-worker02)$
          - name: BYPASS_DNS_RESOLUTION
            value: "true"
          - name: ALLOWED_DNS_NAMES
            value: "1"
          image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: kubelet-csr-approver
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubelet-csr-approver
        serviceAccountName: kubelet-csr-approver
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-10-24T07:54:35Z"
      lastUpdateTime: "2025-04-19T00:02:37Z"
      message: ReplicaSet "kubelet-csr-approver-56fd689858" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T09:38:30Z"
      lastUpdateTime: "2025-05-07T09:38:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:21:34Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: metrics-server
      app.kubernetes.io/version: 0.7.2
      helm.sh/chart: metrics-server-3.12.2
      helm.toolkit.fluxcd.io/name: metrics-server
      helm.toolkit.fluxcd.io/namespace: kube-system
    name: metrics-server
    namespace: kube-system
    resourceVersion: "102240697"
    uid: 4b3d0b0c-06a1-4695-b244-1752a8e5bb68
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: metrics-server
        app.kubernetes.io/name: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: metrics-server
          app.kubernetes.io/name: metrics-server
      spec:
        containers:
        - args:
          - --secure-port=10250
          - --cert-dir=/tmp
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --authorization-always-allow-paths=/metrics
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:25:50Z"
      lastUpdateTime: "2024-10-24T08:26:32Z"
      message: ReplicaSet "metrics-server-6dbd494876" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:47:42Z"
      lastUpdateTime: "2025-05-07T02:47:42Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: reloader
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:16:18Z"
    generation: 4
    labels:
      app: reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-2.1.3
      group: com.stakater.platform
      helm.toolkit.fluxcd.io/name: reloader
      helm.toolkit.fluxcd.io/namespace: kube-system
      heritage: Helm
      provider: stakater
      release: reloader
      version: v1.4.2
    name: reloader
    namespace: kube-system
    resourceVersion: "102241588"
    uid: 4ece6382-2506-4832-9da5-d274594f4f30
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: reloader
        release: reloader
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reloader
          app.kubernetes.io/managed-by: Helm
          chart: reloader-2.1.3
          group: com.stakater.platform
          heritage: Helm
          provider: stakater
          release: reloader
          version: v1.4.2
      spec:
        containers:
        - args:
          - --log-level=info
          env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: ghcr.io/stakater/reloader:v1.4.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /live
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: reloader
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: reloader
        serviceAccountName: reloader
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    collisionCount: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:19:13Z"
      lastUpdateTime: "2025-05-03T22:14:37Z"
      message: ReplicaSet "reloader-7b656d6bcf" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:51:11Z"
      lastUpdateTime: "2025-05-07T02:51:11Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 4
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "9"
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-03-15T22:08:45Z"
    generation: 15
    labels:
      app: homepage
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: homepage
    namespace: myapps
    resourceVersion: "102242694"
    uid: 3e6e3abb-d90b-4a27-8200-00055c4be3e7
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 1
    selector:
      matchLabels:
        app: homepage
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          deploy-date: deploy-date-value
        creationTimestamp: null
        labels:
          app: homepage
      spec:
        containers:
        - env:
          - name: HOMEPAGE_ALLOWED_HOSTS
            value: dashboard.samboxlab.top,192.168.0.129:3000
          - name: STAKATER_HOMEPAGE_CONFIGMAP
            value: addd3251293854442f46347b0fe999d0e6dd4502
          image: ghcr.io/gethomepage/homepage:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: homepage
          ports:
          - containerPort: 3000
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/custom.js
            name: homepage-config
            subPath: custom.js
          - mountPath: /app/config/custom.css
            name: homepage-config
            subPath: custom.css
          - mountPath: /app/config/bookmarks.yaml
            name: homepage-config
            subPath: bookmarks.yaml
          - mountPath: /app/config/docker.yaml
            name: homepage-config
            subPath: docker.yaml
          - mountPath: /app/config/kubernetes.yaml
            name: homepage-config
            subPath: kubernetes.yaml
          - mountPath: /app/config/services.yaml
            name: homepage-config
            subPath: services.yaml
          - mountPath: /app/config/settings.yaml
            name: homepage-config
            subPath: settings.yaml
          - mountPath: /app/config/widgets.yaml
            name: homepage-config
            subPath: widgets.yaml
          - mountPath: /app/config/logs
            name: logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: homepage
          name: homepage-config
        - emptyDir: {}
          name: logs
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-03-16T00:12:28Z"
      lastUpdateTime: "2025-03-16T17:46:28Z"
      message: ReplicaSet "homepage-6b57c9c69b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:47Z"
      lastUpdateTime: "2025-05-07T02:53:47Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 15
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2024-10-24T08:39:45Z"
    generation: 7
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cloudflared
      helm.sh/chart: app-template-3.7.1
      helm.toolkit.fluxcd.io/name: cloudflared
      helm.toolkit.fluxcd.io/namespace: network
    name: cloudflared
    namespace: network
    resourceVersion: "102241500"
    uid: a7f293b2-787f-4077-9e46-feabc30a5b75
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          image: docker.io/cloudflare/cloudflared:2025.2.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:39:45Z"
      lastUpdateTime: "2025-03-01T02:26:07Z"
      message: ReplicaSet "cloudflared-6475d654f4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:50:57Z"
      lastUpdateTime: "2025-05-07T02:50:57Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: echo-server
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:09:36Z"
    generation: 4
    labels:
      app.kubernetes.io/component: echo-server
      app.kubernetes.io/instance: echo-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: echo-server
      helm.sh/chart: app-template-3.7.1
      helm.toolkit.fluxcd.io/name: echo-server
      helm.toolkit.fluxcd.io/namespace: network
    name: echo-server
    namespace: network
    resourceVersion: "102242540"
    uid: 5b0186bc-85a8-4b27-94ad-2566c8c824cd
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 3
    selector:
      matchLabels:
        app.kubernetes.io/component: echo-server
        app.kubernetes.io/instance: echo-server
        app.kubernetes.io/name: echo-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: echo-server
          app.kubernetes.io/instance: echo-server
          app.kubernetes.io/name: echo-server
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: HTTP_PORT
            value: "8080"
          - name: LOG_IGNORE_PATH
            value: /healthz
          - name: LOG_WITHOUT_NEWLINE
            value: "true"
          - name: PROMETHEUS_ENABLED
            value: "true"
          image: ghcr.io/mendhak/http-https-echo:36
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:09:37Z"
      lastUpdateTime: "2025-04-14T00:35:08Z"
      message: ReplicaSet "echo-server-67ddcf754d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:32Z"
      lastUpdateTime: "2025-05-07T02:53:32Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 4
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:15:49Z"
    generation: 3
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: external-dns
      app.kubernetes.io/version: 0.16.1
      helm.sh/chart: external-dns-1.16.1
      helm.toolkit.fluxcd.io/name: external-dns
      helm.toolkit.fluxcd.io/namespace: network
    name: external-dns
    namespace: network
    resourceVersion: "103165997"
    uid: 4ec5197e-6dfd-4106-8da0-fdc8942e8523
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=samboxlab.top
          - --provider=cloudflare
          - --ingress-class=external
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.16.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    collisionCount: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:19:13Z"
      lastUpdateTime: "2025-04-21T14:23:58Z"
      message: ReplicaSet "external-dns-c6cc76596" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-08T14:30:59Z"
      lastUpdateTime: "2025-05-08T14:30:59Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:54Z"
    generation: 7
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      helm.toolkit.fluxcd.io/name: ingress-nginx-external
      helm.toolkit.fluxcd.io/namespace: network
    name: ingress-nginx-external-controller
    namespace: network
    resourceVersion: "102242223"
    uid: 88c1e42a-0c8b-4d63-8ce4-df662059b3ad
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-external
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-external
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.1
          helm.sh/chart: ingress-nginx-4.12.1
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --election-id=ingress-nginx-external-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.1@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-external
        serviceAccountName: ingress-nginx-external
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-external-admission
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T09:02:54Z"
      lastUpdateTime: "2025-04-14T18:39:21Z"
      message: ReplicaSet "ingress-nginx-external-controller-7c88d5d6c9" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:02Z"
      lastUpdateTime: "2025-05-07T02:53:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:58Z"
    generation: 7
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      helm.toolkit.fluxcd.io/name: ingress-nginx-internal
      helm.toolkit.fluxcd.io/namespace: network
    name: ingress-nginx-internal-controller
    namespace: network
    resourceVersion: "102242212"
    uid: afac2468-2478-4ac7-b214-8c70a24e264d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-internal
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-internal
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.1
          helm.sh/chart: ingress-nginx-4.12.1
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --election-id=ingress-nginx-internal-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.1@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-internal
        serviceAccountName: ingress-nginx-internal
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-internal-admission
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T09:02:58Z"
      lastUpdateTime: "2025-04-14T18:39:21Z"
      message: ReplicaSet "ingress-nginx-internal-controller-5b84f885c5" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:53:02Z"
      lastUpdateTime: "2025-05-07T02:53:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:27:02Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      helm.toolkit.fluxcd.io/name: k8s-gateway
      helm.toolkit.fluxcd.io/namespace: network
    name: k8s-gateway
    namespace: network
    resourceVersion: "102240703"
    uid: 6fbf9e5b-f20c-419f-bf54-b9bce85d4e05
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: k8s-gateway
        app.kubernetes.io/name: k8s-gateway
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: e7ea78763a51fc11ab37df9f0bcf0f67594cd1e879d240beb6c4038d13e139b4
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: k8s-gateway
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: k8s-gateway
          app.kubernetes.io/version: 0.4.0
          helm.sh/chart: k8s-gateway-2.4.0
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: quay.io/oriedge/k8s_gateway:v0.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: k8s-gateway
          ports:
          - containerPort: 1053
            name: dns-udp
            protocol: UDP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: k8s-gateway
        serviceAccountName: k8s-gateway
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: k8s-gateway
          name: config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-24T08:27:02Z"
      lastUpdateTime: "2024-10-24T08:27:23Z"
      message: ReplicaSet "k8s-gateway-6bc954c59d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:47:44Z"
      lastUpdateTime: "2025-05-07T02:47:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: openebs
      meta.helm.sh/release-namespace: openebs-system
    creationTimestamp: "2025-03-01T01:58:54Z"
    generation: 1
    labels:
      app: localpv-provisioner
      app.kubernetes.io/managed-by: Helm
      chart: localpv-provisioner-4.1.1
      component: localpv-provisioner
      helm.toolkit.fluxcd.io/name: openebs
      helm.toolkit.fluxcd.io/namespace: openebs-system
      heritage: Helm
      openebs.io/component-name: openebs-localpv-provisioner
      openebs.io/version: 4.1.1
      release: openebs
    name: openebs-localpv-provisioner
    namespace: openebs-system
    resourceVersion: "103660663"
    uid: 6866b130-ad27-4345-93a6-9a6ddda8bdd2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: localpv-provisioner
        component: localpv-provisioner
        release: openebs
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: localpv-provisioner
          chart: localpv-provisioner-4.1.1
          component: localpv-provisioner
          heritage: Helm
          name: openebs-localpv-provisioner
          openebs.io/component-name: openebs-localpv-provisioner
          openebs.io/version: 4.1.1
          release: openebs
      spec:
        containers:
        - env:
          - name: OPENEBS_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: OPENEBS_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: OPENEBS_IO_ENABLE_ANALYTICS
            value: "true"
          - name: OPENEBS_IO_BASE_PATH
            value: /var/openebs/local
          - name: OPENEBS_IO_HELPER_IMAGE
            value: quay.io/openebs/linux-utils:4.1.0
          - name: OPENEBS_IO_INSTALLER_TYPE
            value: localpv-charts-helm
          - name: LEADER_ELECTION_ENABLED
            value: "true"
          image: quay.io/openebs/provisioner-localpv:4.1.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - test `pgrep -c "^provisioner-loc.*"` = 1
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 1
          name: openebs-localpv-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: openebs-localpv-provisioner
        serviceAccountName: openebs-localpv-provisioner
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-03-01T01:58:54Z"
      lastUpdateTime: "2025-03-01T02:01:12Z"
      message: ReplicaSet "openebs-localpv-provisioner-56d8447b9" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-09T09:30:35Z"
      lastUpdateTime: "2025-05-09T09:30:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-03-02T17:14:22Z"
    generation: 4
    labels:
      kustomize.toolkit.fluxcd.io/name: cluster-apps
      kustomize.toolkit.fluxcd.io/namespace: flux-system
    name: qrapp
    namespace: qrapp
    resourceVersion: "102239610"
    uid: c6ddb132-db85-4b06-b2a5-235f3fb31496
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: qrapp
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: qrapp
      spec:
        containers:
        - image: therealsojay/qrcodeapp:1.0.60
          imagePullPolicy: IfNotPresent
          name: qrapp
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-03-02T17:14:22Z"
      lastUpdateTime: "2025-03-02T17:14:35Z"
      message: ReplicaSet "qrapp-579c8c86c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-07T02:42:41Z"
      lastUpdateTime: "2025-05-07T02:42:41Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 4
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: starboard-operator
      meta.helm.sh/release-namespace: starboard-system
    creationTimestamp: "2024-10-26T05:28:04Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: starboard-operator
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: starboard-operator
      app.kubernetes.io/version: 0.15.3
      helm.sh/chart: starboard-operator-0.10.3
      helm.toolkit.fluxcd.io/name: starboard-operator
      helm.toolkit.fluxcd.io/namespace: starboard-system
    name: starboard-operator
    namespace: starboard-system
    resourceVersion: "103958985"
    uid: 6e2b04a1-9f13-4196-84d3-a9d6f24a32cc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: starboard-operator
        app.kubernetes.io/name: starboard-operator
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: starboard-operator
          app.kubernetes.io/name: starboard-operator
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: OPERATOR_NAMESPACE
            value: starboard-system
          - name: OPERATOR_TARGET_NAMESPACES
          - name: OPERATOR_EXCLUDE_NAMESPACES
            value: kube-system,starboard-system
          - name: OPERATOR_SERVICE_ACCOUNT
            value: starboard-operator
          - name: OPERATOR_LOG_DEV_MODE
            value: "false"
          - name: OPERATOR_SCAN_JOB_TIMEOUT
            value: 5m
          - name: OPERATOR_CONCURRENT_SCAN_JOBS_LIMIT
            value: "10"
          - name: OPERATOR_SCAN_JOB_RETRY_AFTER
            value: 30s
          - name: OPERATOR_BATCH_DELETE_LIMIT
            value: "10"
          - name: OPERATOR_BATCH_DELETE_DELAY
            value: 10s
          - name: OPERATOR_METRICS_BIND_ADDRESS
            value: :8080
          - name: OPERATOR_HEALTH_PROBE_BIND_ADDRESS
            value: :9090
          - name: OPERATOR_CIS_KUBERNETES_BENCHMARK_ENABLED
            value: "true"
          - name: OPERATOR_VULNERABILITY_SCANNER_ENABLED
            value: "true"
          - name: OPERATOR_VULNERABILITY_SCANNER_SCAN_ONLY_CURRENT_REVISIONS
            value: "false"
          - name: OPERATOR_VULNERABILITY_SCANNER_REPORT_TTL
          - name: OPERATOR_CONFIG_AUDIT_SCANNER_ENABLED
            value: "false"
          - name: OPERATOR_CONFIG_AUDIT_SCANNER_BUILTIN
            value: "true"
          - name: OPERATOR_CLUSTER_COMPLIANCE_ENABLED
            value: "true"
          image: docker.io/aquasec/starboard-operator:0.15.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz/
              port: probes
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: starboard-operator
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: probes
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz/
              port: probes
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-10-26T05:28:04Z"
      lastUpdateTime: "2024-10-26T05:28:27Z"
      message: ReplicaSet "starboard-operator-f54444f68" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-09T20:59:39Z"
      lastUpdateTime: "2025-05-09T20:59:39Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: volsync
      meta.helm.sh/release-namespace: volsync-system
    creationTimestamp: "2025-05-07T03:02:08Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: volsync
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: volsync
      app.kubernetes.io/version: 0.12.1
      control-plane: volsync-controller
      helm.sh/chart: volsync-0.12.1
    name: volsync
    namespace: volsync-system
    resourceVersion: "103958371"
    uid: 2c5e5818-da8c-4ebf-805e-346968b0164d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: volsync
        app.kubernetes.io/name: volsync
        control-plane: volsync-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: manager
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: volsync
          app.kubernetes.io/name: volsync
          control-plane: volsync-controller
      spec:
        containers:
        - args:
          - --secure-listen-address=0.0.0.0:8443
          - --upstream=http://127.0.0.1:8080/
          - --logtostderr=true
          - --tls-min-version=VersionTLS12
          - --v=0
          image: quay.io/brancz/kube-rbac-proxy:v0.18.2
          imagePullPolicy: IfNotPresent
          name: kube-rbac-proxy
          ports:
          - containerPort: 8443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 5m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
          - --health-probe-bind-address=:8081
          - --metrics-bind-address=127.0.0.1:8080
          - --leader-elect
          - --rclone-container-image=quay.io/backube/volsync:0.12.1
          - --restic-container-image=quay.io/backube/volsync:0.12.1
          - --rsync-container-image=quay.io/backube/volsync:0.12.1
          - --rsync-tls-container-image=quay.io/backube/volsync:0.12.1
          - --syncthing-container-image=quay.io/backube/volsync:0.12.1
          - --scc-name=volsync-privileged-mover
          command:
          - /manager
          env:
          - name: VOLSYNC_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/backube/volsync:0.12.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tempdir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: volsync
        serviceAccountName: volsync
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir:
            medium: Memory
          name: tempdir
  status:
    conditions:
    - lastTransitionTime: "2025-05-07T03:02:09Z"
      lastUpdateTime: "2025-05-07T03:04:50Z"
      message: ReplicaSet "volsync-5cfbddb45c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-05-09T20:58:16Z"
      lastUpdateTime: "2025-05-09T20:58:16Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-01-19T06:26:39Z"
    generation: 2
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      pod-template-hash: 5865d4fd69
    name: cert-manager-5865d4fd69
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: db2905ee-41a6-482f-b397-715b8ed4c566
    resourceVersion: "62250038"
    uid: 60aa0fb5-32ff-4f64-a75a-24a8e5a7c814
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 5865d4fd69
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.16.3
          helm.sh/chart: cert-manager-v1.16.3
          pod-template-hash: 5865d4fd69
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.3
          - --max-concurrent-challenges=60
          - --dns01-recursive-nameservers-only=true
          - --dns01-recursive-nameservers=https://1.1.1.1:443/dns-query,https://1.0.0.1:443/dns-query
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.16.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-12-09T05:22:11Z"
    generation: 2
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.2
      helm.sh/chart: cert-manager-v1.16.2
      pod-template-hash: 659dbd9c7f
    name: cert-manager-659dbd9c7f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: db2905ee-41a6-482f-b397-715b8ed4c566
    resourceVersion: "43078392"
    uid: 22da70c6-97bc-4445-b5ae-16f4f847c2c1
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 659dbd9c7f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.16.2
          helm.sh/chart: cert-manager-v1.16.2
          pod-template-hash: 659dbd9c7f
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.2
          - --max-concurrent-challenges=60
          - --dns01-recursive-nameservers-only=true
          - --dns01-recursive-nameservers=https://1.1.1.1:443/dns-query,https://1.0.0.1:443/dns-query
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.16.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:50Z"
    generation: 2
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.16.1
      helm.sh/chart: cert-manager-v1.16.1
      pod-template-hash: 68f6c5cb5
    name: cert-manager-68f6c5cb5
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: db2905ee-41a6-482f-b397-715b8ed4c566
    resourceVersion: "21929234"
    uid: e8815c8e-1ac3-4d09-b313-644ad5e5ec81
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 68f6c5cb5
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.16.1
          helm.sh/chart: cert-manager-v1.16.1
          pod-template-hash: 68f6c5cb5
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.16.1
          - --max-concurrent-challenges=60
          - --dns01-recursive-nameservers-only=true
          - --dns01-recursive-nameservers=https://1.1.1.1:443/dns-query,https://1.0.0.1:443/dns-query
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.16.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-04-26T08:36:31Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      pod-template-hash: 6d6f549b9c
    name: cert-manager-6d6f549b9c
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: db2905ee-41a6-482f-b397-715b8ed4c566
    resourceVersion: "102241435"
    uid: a1746c18-2116-4043-a5e0-c5e19d22ccbd
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 6d6f549b9c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.17.2
          helm.sh/chart: cert-manager-v1.17.2
          pod-template-hash: 6d6f549b9c
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.17.2
          - --max-concurrent-challenges=60
          - --dns01-recursive-nameservers-only=true
          - --dns01-recursive-nameservers=https://1.1.1.1:443/dns-query,https://1.0.0.1:443/dns-query
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.17.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:50Z"
    generation: 2
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.16.1
      helm.sh/chart: cert-manager-v1.16.1
      pod-template-hash: 66785cb58f
    name: cert-manager-cainjector-66785cb58f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 177d80a4-b5df-407b-a01d-8106d31b2d94
    resourceVersion: "21929268"
    uid: 11f19997-23df-48ea-a747-91a6aa92d3de
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 66785cb58f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.16.1
          helm.sh/chart: cert-manager-v1.16.1
          pod-template-hash: 66785cb58f
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.16.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-01-19T06:26:36Z"
    generation: 2
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      pod-template-hash: 69bf859c5f
    name: cert-manager-cainjector-69bf859c5f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 177d80a4-b5df-407b-a01d-8106d31b2d94
    resourceVersion: "62249950"
    uid: 55bf4145-ebbb-41a6-9f23-36c22d4f6c90
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 69bf859c5f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.16.3
          helm.sh/chart: cert-manager-v1.16.3
          pod-template-hash: 69bf859c5f
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.16.3
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-04-26T08:36:30Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      pod-template-hash: 7cc5fd9895
    name: cert-manager-cainjector-7cc5fd9895
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 177d80a4-b5df-407b-a01d-8106d31b2d94
    resourceVersion: "102241715"
    uid: 86a775be-01f6-43a5-babf-e038c00ed5ba
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 7cc5fd9895
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.17.2
          helm.sh/chart: cert-manager-v1.17.2
          pod-template-hash: 7cc5fd9895
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.17.2
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      deployment.kubernetes.io/revision-history: "4"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-03-01T01:50:50Z"
    generation: 4
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.17.1
      helm.sh/chart: cert-manager-v1.17.1
      pod-template-hash: bc8dbfcdd
    name: cert-manager-cainjector-bc8dbfcdd
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 177d80a4-b5df-407b-a01d-8106d31b2d94
    resourceVersion: "95933783"
    uid: bf7ff72d-7274-4104-b884-4e05f2b6c39b
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: bc8dbfcdd
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.17.1
          helm.sh/chart: cert-manager-v1.17.1
          pod-template-hash: bc8dbfcdd
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.17.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-12-09T05:22:11Z"
    generation: 2
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.16.2
      helm.sh/chart: cert-manager-v1.16.2
      pod-template-hash: c879b86d6
    name: cert-manager-cainjector-c879b86d6
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 177d80a4-b5df-407b-a01d-8106d31b2d94
    resourceVersion: "43078351"
    uid: fefc7dfd-700a-4a76-93cf-26017951fef4
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: c879b86d6
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.16.2
          helm.sh/chart: cert-manager-v1.16.2
          pod-template-hash: c879b86d6
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.16.2
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      deployment.kubernetes.io/revision-history: "4"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-03-01T01:50:51Z"
    generation: 4
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.17.1
      helm.sh/chart: cert-manager-v1.17.1
      pod-template-hash: cc9ddc6c
    name: cert-manager-cc9ddc6c
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: db2905ee-41a6-482f-b397-715b8ed4c566
    resourceVersion: "95933989"
    uid: 609ec917-20f1-4bff-91d2-e41262f4e40b
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: cc9ddc6c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.17.1
          helm.sh/chart: cert-manager-v1.17.1
          pod-template-hash: cc9ddc6c
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.17.1
          - --max-concurrent-challenges=60
          - --dns01-recursive-nameservers-only=true
          - --dns01-recursive-nameservers=https://1.1.1.1:443/dns-query,https://1.0.0.1:443/dns-query
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.17.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-01-19T06:26:42Z"
    generation: 4
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.16.3
      helm.sh/chart: cert-manager-v1.16.3
      pod-template-hash: 578f66dcd
    name: cert-manager-webhook-578f66dcd
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 8617a8e4-29b2-4dde-be3a-fe98dde6a020
    resourceVersion: "62250106"
    uid: b0476b6e-0077-43b5-9da9-9579d5d2f3da
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 578f66dcd
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.16.3
          helm.sh/chart: cert-manager-v1.16.3
          pod-template-hash: 578f66dcd
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.16.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      deployment.kubernetes.io/revision-history: "4"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-03-01T01:50:56Z"
    generation: 4
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.17.1
      helm.sh/chart: cert-manager-v1.17.1
      pod-template-hash: 5f65ff988f
    name: cert-manager-webhook-5f65ff988f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 8617a8e4-29b2-4dde-be3a-fe98dde6a020
    resourceVersion: "95933865"
    uid: 95b0e706-dc64-4265-b53d-b4845d75d080
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 5f65ff988f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.17.1
          helm.sh/chart: cert-manager-v1.17.1
          pod-template-hash: 5f65ff988f
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.17.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-10-24T08:25:50Z"
    generation: 2
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.16.1
      helm.sh/chart: cert-manager-v1.16.1
      pod-template-hash: 74d876558d
    name: cert-manager-webhook-74d876558d
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 8617a8e4-29b2-4dde-be3a-fe98dde6a020
    resourceVersion: "21929237"
    uid: 202391ef-90d6-4662-9233-11a1eb2de553
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 74d876558d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.16.1
          helm.sh/chart: cert-manager-v1.16.1
          pod-template-hash: 74d876558d
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.16.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-04-26T08:36:32Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.17.2
      helm.sh/chart: cert-manager-v1.17.2
      pod-template-hash: 7996dff45d
    name: cert-manager-webhook-7996dff45d
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 8617a8e4-29b2-4dde-be3a-fe98dde6a020
    resourceVersion: "102242250"
    uid: 4d51dedf-4aee-4166-9bf8-6a5fd349a6ff
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 7996dff45d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.17.2
          helm.sh/chart: cert-manager-v1.17.2
          pod-template-hash: 7996dff45d
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.17.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2024-12-09T05:22:12Z"
    generation: 2
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.16.2
      helm.sh/chart: cert-manager-v1.16.2
      pod-template-hash: 857864cb8c
    name: cert-manager-webhook-857864cb8c
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 8617a8e4-29b2-4dde-be3a-fe98dde6a020
    resourceVersion: "43078439"
    uid: d48e5f96-29ff-4367-b7b6-d52d2dcf947a
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 857864cb8c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.16.2
          helm.sh/chart: cert-manager-v1.16.2
          pod-template-hash: 857864cb8c
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.16.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: reflector
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-03-02T03:53:13Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: reflector
      app.kubernetes.io/name: reflector
      pod-template-hash: dcc5cf554
    name: reflector-dcc5cf554
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: reflector
      uid: 10d7c1de-7df6-400f-9c16-5e1922976152
    resourceVersion: "102240634"
    uid: 29adb112-d75e-49d9-a967-681fec107d9d
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: reflector
        app.kubernetes.io/name: reflector
        pod-template-hash: dcc5cf554
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: reflector
          app.kubernetes.io/name: reflector
          pod-template-hash: dcc5cf554
      spec:
        containers:
        - env:
          - name: ES_Serilog__MinimumLevel__Default
            value: Information
          - name: ES_Reflector__Watcher__Timeout
          - name: ES_Reflector__Kubernetes__SkipTlsVerify
            value: "false"
          image: docker.io/emberstack/kubernetes-reflector:9.0.318
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health/live
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: reflector
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /health/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          startupProbe:
            failureThreshold: 5
            httpGet:
              path: /health/ready
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 2000
        serviceAccount: reflector
        serviceAccountName: reflector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-10-24T08:03:27Z"
    generation: 2
    labels:
      app: helm-controller
      pod-template-hash: 64cd59b777
    name: helm-controller-64cd59b777
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: helm-controller
      uid: bf20f6d3-d752-4647-8123-049206ef3517
    resourceVersion: "92767951"
    uid: 7fee9449-601b-4d57-a498-cf9009e8d129
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: helm-controller
        pod-template-hash: 64cd59b777
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: helm-controller
          pod-template-hash: 64cd59b777
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          - --feature-gates=OOMWatch=true
          - --oom-watch-memory-threshold=95
          - --oom-watch-interval=500ms
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/helm-controller:v1.1.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: helm-controller
        serviceAccountName: helm-controller
        terminationGracePeriodSeconds: 600
        volumes:
        - emptyDir: {}
          name: temp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-24T08:01:10Z"
    generation: 2
    labels:
      app: helm-controller
      pod-template-hash: 79bb868f5d
    name: helm-controller-79bb868f5d
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: helm-controller
      uid: bf20f6d3-d752-4647-8123-049206ef3517
    resourceVersion: "3878"
    uid: 99711b01-147f-40bd-a6f3-a9e5d7925535
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: helm-controller
        pod-template-hash: 79bb868f5d
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: helm-controller
          pod-template-hash: 79bb868f5d
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/helm-controller:v1.1.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: helm-controller
        serviceAccountName: helm-controller
        terminationGracePeriodSeconds: 600
        volumes:
        - emptyDir: {}
          name: temp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-04-21T14:31:24Z"
    generation: 1
    labels:
      app: helm-controller
      pod-template-hash: 965c76748
    name: helm-controller-965c76748
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: helm-controller
      uid: bf20f6d3-d752-4647-8123-049206ef3517
    resourceVersion: "102242284"
    uid: be248554-fcd8-4587-b6f6-2233b992cc2c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: helm-controller
        pod-template-hash: 965c76748
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: helm-controller
          pod-template-hash: 965c76748
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          - --feature-gates=OOMWatch=true
          - --oom-watch-memory-threshold=95
          - --oom-watch-interval=500ms
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/helm-controller:v1.2.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: helm-controller
        serviceAccountName: helm-controller
        terminationGracePeriodSeconds: 600
        volumes:
        - emptyDir: {}
          name: temp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-04-21T14:31:24Z"
    generation: 1
    labels:
      app: image-automation-controller
      pod-template-hash: 8697d7cb68
    name: image-automation-controller-8697d7cb68
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: image-automation-controller
      uid: 12e4f35b-ed1a-4ad5-8539-079964ee9b9f
    resourceVersion: "102242056"
    uid: dca5f91b-eab7-45cc-9463-43b0c7cc9ec3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: image-automation-controller
        pod-template-hash: 8697d7cb68
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: image-automation-controller
          pod-template-hash: 8697d7cb68
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/image-automation-controller:v0.40.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: image-automation-controller
        serviceAccountName: image-automation-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-10-24T08:03:27Z"
    generation: 2
    labels:
      app: image-automation-controller
      pod-template-hash: bc8787464
    name: image-automation-controller-bc8787464
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: image-automation-controller
      uid: 12e4f35b-ed1a-4ad5-8539-079964ee9b9f
    resourceVersion: "92767852"
    uid: 483be5e8-a9f4-417f-870b-442adaae6004
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: image-automation-controller
        pod-template-hash: bc8787464
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: image-automation-controller
          pod-template-hash: bc8787464
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/image-automation-controller:v0.39.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: image-automation-controller
        serviceAccountName: image-automation-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-24T08:01:11Z"
    generation: 2
    labels:
      app: image-automation-controller
      pod-template-hash: cb5ff5bf9
    name: image-automation-controller-cb5ff5bf9
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: image-automation-controller
      uid: 12e4f35b-ed1a-4ad5-8539-079964ee9b9f
    resourceVersion: "3876"
    uid: 5c3bb5c2-deb4-45dd-b71f-7b0ea804e800
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: image-automation-controller
        pod-template-hash: cb5ff5bf9
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: image-automation-controller
          pod-template-hash: cb5ff5bf9
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/image-automation-controller:v0.39.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: image-automation-controller
        serviceAccountName: image-automation-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-24T08:01:11Z"
    generation: 2
    labels:
      app: image-reflector-controller
      pod-template-hash: 568fc784cb
    name: image-reflector-controller-568fc784cb
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: image-reflector-controller
      uid: 0535a3cc-473c-459e-bff8-e5ff120f2e99
    resourceVersion: "3873"
    uid: c61105dc-684c-4a76-aca2-9ac3bc90838f
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: image-reflector-controller
        pod-template-hash: 568fc784cb
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: image-reflector-controller
          pod-template-hash: 568fc784cb
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/image-reflector-controller:v0.33.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
          - mountPath: /data
            name: data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: image-reflector-controller
        serviceAccountName: image-reflector-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
        - emptyDir: {}
          name: data
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-04-21T14:31:24Z"
    generation: 1
    labels:
      app: image-reflector-controller
      pod-template-hash: 6cf5d6c6b8
    name: image-reflector-controller-6cf5d6c6b8
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: image-reflector-controller
      uid: 0535a3cc-473c-459e-bff8-e5ff120f2e99
    resourceVersion: "102242175"
    uid: f5602c0f-9a23-4211-831f-da8125d15398
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: image-reflector-controller
        pod-template-hash: 6cf5d6c6b8
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: image-reflector-controller
          pod-template-hash: 6cf5d6c6b8
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/image-reflector-controller:v0.34.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
          - mountPath: /data
            name: data
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: image-reflector-controller
        serviceAccountName: image-reflector-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
        - emptyDir: {}
          name: data
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-10-24T08:03:27Z"
    generation: 2
    labels:
      app: image-reflector-controller
      pod-template-hash: 7cdc88c5c7
    name: image-reflector-controller-7cdc88c5c7
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: image-reflector-controller
      uid: 0535a3cc-473c-459e-bff8-e5ff120f2e99
    resourceVersion: "92768006"
    uid: dab82c09-639a-44f4-870c-ba0a716577d8
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: image-reflector-controller
        pod-template-hash: 7cdc88c5c7
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: image-reflector-controller
          pod-template-hash: 7cdc88c5c7
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/image-reflector-controller:v0.33.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
          - mountPath: /data
            name: data
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: image-reflector-controller
        serviceAccountName: image-reflector-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
        - emptyDir: {}
          name: data
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-10-24T08:03:27Z"
    generation: 2
    labels:
      app: kustomize-controller
      pod-template-hash: 54f65db458
    name: kustomize-controller-54f65db458
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kustomize-controller
      uid: bbf2e577-8548-4839-af0f-8e5dfd83b45b
    resourceVersion: "92768017"
    uid: 3a1e4650-d4ae-4796-9a04-aa9a8f253495
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: kustomize-controller
        pod-template-hash: 54f65db458
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: kustomize-controller
          pod-template-hash: 54f65db458
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/kustomize-controller:v1.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: kustomize-controller
        serviceAccountName: kustomize-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: temp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-04-21T14:31:24Z"
    generation: 1
    labels:
      app: kustomize-controller
      pod-template-hash: 66f7cb4d86
    name: kustomize-controller-66f7cb4d86
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kustomize-controller
      uid: bbf2e577-8548-4839-af0f-8e5dfd83b45b
    resourceVersion: "102242279"
    uid: 58c8f13d-77d3-4a66-a0ad-aaec163ca8df
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kustomize-controller
        pod-template-hash: 66f7cb4d86
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: kustomize-controller
          pod-template-hash: 66f7cb4d86
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/kustomize-controller:v1.5.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: kustomize-controller
        serviceAccountName: kustomize-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: temp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-24T08:01:11Z"
    generation: 2
    labels:
      app: kustomize-controller
      pod-template-hash: 866fbd5855
    name: kustomize-controller-866fbd5855
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kustomize-controller
      uid: bbf2e577-8548-4839-af0f-8e5dfd83b45b
    resourceVersion: "3879"
    uid: 4fc0682a-6979-4e05-8808-be21c8c0198a
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: kustomize-controller
        pod-template-hash: 866fbd5855
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: kustomize-controller
          pod-template-hash: 866fbd5855
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/kustomize-controller:v1.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: kustomize-controller
        serviceAccountName: kustomize-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: temp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-10-24T08:03:27Z"
    generation: 2
    labels:
      app: notification-controller
      pod-template-hash: 556b8867f8
    name: notification-controller-556b8867f8
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: notification-controller
      uid: 4307de9b-8ff2-4dba-8a8b-f86f479efed2
    resourceVersion: "92767651"
    uid: 1351ed00-427f-42b5-81fe-63d3761f5de8
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: notification-controller
        pod-template-hash: 556b8867f8
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: notification-controller
          pod-template-hash: 556b8867f8
      spec:
        containers:
        - args:
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/notification-controller:v1.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          - containerPort: 9292
            name: http-webhook
            protocol: TCP
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: notification-controller
        serviceAccountName: notification-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-24T08:01:12Z"
    generation: 2
    labels:
      app: notification-controller
      pod-template-hash: 75846575bf
    name: notification-controller-75846575bf
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: notification-controller
      uid: 4307de9b-8ff2-4dba-8a8b-f86f479efed2
    resourceVersion: "3027"
    uid: 305cfc2a-208d-4dbd-96eb-520778e1df5d
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: notification-controller
        pod-template-hash: 75846575bf
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: notification-controller
          pod-template-hash: 75846575bf
      spec:
        containers:
        - args:
          - --watch-all-namespaces
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/notification-controller:v1.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          - containerPort: 9292
            name: http-webhook
            protocol: TCP
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: notification-controller
        serviceAccountName: notification-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-04-21T14:31:24Z"
    generation: 1
    labels:
      app: notification-controller
      pod-template-hash: f9dc675b9
    name: notification-controller-f9dc675b9
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: notification-controller
      uid: 4307de9b-8ff2-4dba-8a8b-f86f479efed2
    resourceVersion: "102242245"
    uid: 1ec5baae-61c1-4a4b-8c50-392509223d84
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: notification-controller
        pod-template-hash: f9dc675b9
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: notification-controller
          pod-template-hash: f9dc675b9
      spec:
        containers:
        - args:
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/notification-controller:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          - containerPort: 9292
            name: http-webhook
            protocol: TCP
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: temp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: notification-controller
        serviceAccountName: notification-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: temp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2025-04-21T14:32:52Z"
    generation: 1
    labels:
      app: source-controller
      pod-template-hash: 7ddc4d4f4c
    name: source-controller-7ddc4d4f4c
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: source-controller
      uid: 37cb0dde-1b65-439b-9b01-d6bed4f56268
    resourceVersion: "102242502"
    uid: 8f1a1556-6fca-4dfa-ac3f-04511f988635
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: source-controller
        pod-template-hash: 7ddc4d4f4c
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: source-controller
          pod-template-hash: 7ddc4d4f4c
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --storage-path=/data
          - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: TUF_ROOT
            value: /tmp/.sigstore
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/source-controller:v1.5.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: source-controller
        serviceAccountName: source-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-10-24T08:03:31Z"
    generation: 2
    labels:
      app: source-controller
      pod-template-hash: 865dd7cff
    name: source-controller-865dd7cff
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: source-controller
      uid: 37cb0dde-1b65-439b-9b01-d6bed4f56268
    resourceVersion: "92765992"
    uid: a4e4dcb9-028f-41dd-9fa1-d753bab80f55
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: source-controller
        pod-template-hash: 865dd7cff
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: source-controller
          pod-template-hash: 865dd7cff
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces=true
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --storage-path=/data
          - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
          - --concurrent=8
          - --kube-api-qps=500
          - --kube-api-burst=1000
          - --requeue-dependency=5s
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: TUF_ROOT
            value: /tmp/.sigstore
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/source-controller:v1.4.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: source-controller
        serviceAccountName: source-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: tmp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-24T08:01:12Z"
    generation: 2
    labels:
      app: source-controller
      pod-template-hash: cc7bd674d
    name: source-controller-cc7bd674d
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: source-controller
      uid: 37cb0dde-1b65-439b-9b01-d6bed4f56268
    resourceVersion: "2447"
    uid: 28d076af-c588-4216-af09-539433864062
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: source-controller
        pod-template-hash: cc7bd674d
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: source-controller
          pod-template-hash: cc7bd674d
      spec:
        containers:
        - args:
          - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
          - --watch-all-namespaces
          - --log-level=info
          - --log-encoding=json
          - --enable-leader-election
          - --storage-path=/data
          - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
          env:
          - name: RUNTIME_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: TUF_ROOT
            value: /tmp/.sigstore
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                containerName: manager
                divisor: "0"
                resource: limits.memory
          image: ghcr.io/fluxcd/source-controller:v1.4.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          - containerPort: 8080
            name: http-prom
            protocol: TCP
          - containerPort: 9440
            name: healthz
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: data
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: source-controller
        serviceAccountName: source-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: tmp
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      deployment.kubernetes.io/revision-history: "5"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-04-14T00:25:53Z"
    generation: 4
    labels:
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 59b7b95544
    name: cilium-operator-59b7b95544
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cilium-operator
      uid: 0b00a562-4012-41bf-ae7f-7eb918ad980d
    resourceVersion: "92763635"
    uid: 5781c68c-5996-4575-bc38-dbb44dfb082a
  spec:
    replicas: 0
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
        pod-template-hash: 59b7b95544
    template:
      metadata:
        annotations:
          cilium.io/cilium-configmap-checksum: f6f3225dd63a52d6a561c038b20f94f8936f01139c1dcbc637dc0df90f717d94
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: cilium-operator
          app.kubernetes.io/part-of: cilium
          io.cilium/app: operator
          name: cilium-operator
          pod-template-hash: 59b7b95544
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - args:
          - --config-dir=/tmp/cilium/config-map
          - --debug=$(CILIUM_DEBUG)
          command:
          - cilium-operator-generic
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/operator-generic:v1.17.2@sha256:81f2d7198366e8dec2903a3a8361e4c68d47d19c68a0d42f0b7b6e3f0523f249
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          ports:
          - containerPort: 9963
            hostPort: 9963
            name: prometheus
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp/cilium/config-map
            name: cilium-config-path
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: cilium-config
          name: cilium-config-path
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T07:54:27Z"
    generation: 2
    labels:
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 659548cd7
    name: cilium-operator-659548cd7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cilium-operator
      uid: 0b00a562-4012-41bf-ae7f-7eb918ad980d
    resourceVersion: "2460"
    uid: 8050a53f-e6da-4fec-a28a-2cab9dee0a38
  spec:
    replicas: 0
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
        pod-template-hash: 659548cd7
    template:
      metadata:
        annotations:
          cilium.io/cilium-configmap-checksum: c0ff299dc63f40e7f4f963d4bfe83feadb0cca4357b1f426cfbf5668981e716e
          prometheus.io/port: "9963"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: cilium-operator
          app.kubernetes.io/part-of: cilium
          io.cilium/app: operator
          name: cilium-operator
          pod-template-hash: 659548cd7
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - args:
          - --config-dir=/tmp/cilium/config-map
          - --debug=$(CILIUM_DEBUG)
          command:
          - cilium-operator-generic
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/operator-generic:v1.16.3@sha256:6e2925ef47a1c76e183c48f95d4ce0d34a1e5e848252f910476c3e11ce1ec94b
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          ports:
          - containerPort: 9963
            hostPort: 9963
            name: prometheus
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp/cilium/config-map
            name: cilium-config-path
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: cilium-config
          name: cilium-config-path
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      deployment.kubernetes.io/revision-history: "4"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-01T01:37:36Z"
    generation: 4
    labels:
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 67bcf78987
    name: cilium-operator-67bcf78987
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cilium-operator
      uid: 0b00a562-4012-41bf-ae7f-7eb918ad980d
    resourceVersion: "88094598"
    uid: 8e0b4d2a-23fd-4887-88c4-77cf648329ff
  spec:
    replicas: 0
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
        pod-template-hash: 67bcf78987
    template:
      metadata:
        annotations:
          cilium.io/cilium-configmap-checksum: 162e9807fff5db0f5d994179417741742749bad43ac7d7dc9f1104e90fa08c12
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: cilium-operator
          app.kubernetes.io/part-of: cilium
          io.cilium/app: operator
          name: cilium-operator
          pod-template-hash: 67bcf78987
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - args:
          - --config-dir=/tmp/cilium/config-map
          - --debug=$(CILIUM_DEBUG)
          command:
          - cilium-operator-generic
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/operator-generic:v1.17.1@sha256:628becaeb3e4742a1c36c4897721092375891b58bae2bfcae48bbf4420aaee97
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          ports:
          - containerPort: 9963
            hostPort: 9963
            name: prometheus
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp/cilium/config-map
            name: cilium-config-path
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: cilium-config
          name: cilium-config-path
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-12-09T05:22:16Z"
    generation: 2
    labels:
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 746d76bd4c
    name: cilium-operator-746d76bd4c
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cilium-operator
      uid: 0b00a562-4012-41bf-ae7f-7eb918ad980d
    resourceVersion: "62241991"
    uid: b95fc8d2-0afe-4316-8379-414b9bc30c3b
  spec:
    replicas: 0
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
        pod-template-hash: 746d76bd4c
    template:
      metadata:
        annotations:
          cilium.io/cilium-configmap-checksum: 7533203f2012832165266485468c181d8cae49c327eecc6052834c5ab9d73a6c
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: cilium-operator
          app.kubernetes.io/part-of: cilium
          io.cilium/app: operator
          name: cilium-operator
          pod-template-hash: 746d76bd4c
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - args:
          - --config-dir=/tmp/cilium/config-map
          - --debug=$(CILIUM_DEBUG)
          command:
          - cilium-operator-generic
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/operator-generic:v1.16.4@sha256:c55a7cbe19fe0b6b28903a085334edb586a3201add9db56d2122c8485f7a51c5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          ports:
          - containerPort: 9963
            hostPort: 9963
            name: prometheus
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp/cilium/config-map
            name: cilium-config-path
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: cilium-config
          name: cilium-config-path
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "8"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-04-21T14:24:05Z"
    generation: 1
    labels:
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 79966f7757
    name: cilium-operator-79966f7757
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cilium-operator
      uid: 0b00a562-4012-41bf-ae7f-7eb918ad980d
    resourceVersion: "100634944"
    uid: da7c60ca-b946-4845-9afc-4dd56e9fe039
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
        pod-template-hash: 79966f7757
    template:
      metadata:
        annotations:
          cilium.io/cilium-configmap-checksum: f6f3225dd63a52d6a561c038b20f94f8936f01139c1dcbc637dc0df90f717d94
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: cilium-operator
          app.kubernetes.io/part-of: cilium
          io.cilium/app: operator
          name: cilium-operator
          pod-template-hash: 79966f7757
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - args:
          - --config-dir=/tmp/cilium/config-map
          - --debug=$(CILIUM_DEBUG)
          command:
          - cilium-operator-generic
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/operator-generic:v1.17.3@sha256:8bd38d0e97a955b2d725929d60df09d712fb62b60b930551a29abac2dd92e597
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          ports:
          - containerPort: 9963
            hostPort: 9963
            name: prometheus
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp/cilium/config-map
            name: cilium-config-path
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: cilium-config
          name: cilium-config-path
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:03:28Z"
    generation: 2
    labels:
      app.kubernetes.io/name: cilium-operator
      app.kubernetes.io/part-of: cilium
      io.cilium/app: operator
      name: cilium-operator
      pod-template-hash: 7b986bb8f5
    name: cilium-operator-7b986bb8f5
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cilium-operator
      uid: 0b00a562-4012-41bf-ae7f-7eb918ad980d
    resourceVersion: "21927493"
    uid: 7d64a54f-2b76-45e6-a6a6-2c644ce1e448
  spec:
    replicas: 0
    selector:
      matchLabels:
        io.cilium/app: operator
        name: cilium-operator
        pod-template-hash: 7b986bb8f5
    template:
      metadata:
        annotations:
          cilium.io/cilium-configmap-checksum: 22babd62155381316a0fa1afd8a5b44d33806c82e678dac226f4ad8e3f8e37f7
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: cilium-operator
          app.kubernetes.io/part-of: cilium
          io.cilium/app: operator
          name: cilium-operator
          pod-template-hash: 7b986bb8f5
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: true
        containers:
        - args:
          - --config-dir=/tmp/cilium/config-map
          - --debug=$(CILIUM_DEBUG)
          command:
          - cilium-operator-generic
          env:
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CILIUM_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CILIUM_DEBUG
            valueFrom:
              configMapKeyRef:
                key: debug
                name: cilium-config
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 127.0.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "7445"
          image: quay.io/cilium/operator-generic:v1.16.3@sha256:6e2925ef47a1c76e183c48f95d4ce0d34a1e5e848252f910476c3e11ce1ec94b
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: cilium-operator
          ports:
          - containerPort: 9963
            hostPort: 9963
            name: prometheus
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 9234
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp/cilium/config-map
            name: cilium-config-path
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: cilium-operator
        serviceAccountName: cilium-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: cilium-config
          name: cilium-config-path
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T07:54:31Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
      pod-template-hash: 6bc8fb9ddb
    name: coredns-6bc8fb9ddb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: fcf3ba80-0ec3-4b26-88f3-948db93084a6
    resourceVersion: "7891914"
    uid: 877b416e-ab58-4453-9656-21e39a701ab8
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: coredns
        app.kubernetes.io/name: coredns
        k8s-app: kube-dns
        pod-template-hash: 6bc8fb9ddb
    template:
      metadata:
        annotations:
          checksum/config: 0f5d3b0bb82a32ac9e3003cf6f0f116744177859c5641934e762af1bc9e41c4a
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: coredns
          k8s-app: kube-dns
          pod-template-hash: 6bc8fb9ddb
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: coredns/coredns:1.11.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: udp-53
            protocol: UDP
          - containerPort: 53
            name: tcp-53
            protocol: TCP
          - containerPort: 9153
            name: tcp-9153
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-12-14T18:31:07Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
      pod-template-hash: 6fd5d59bb7
    name: coredns-6fd5d59bb7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: fcf3ba80-0ec3-4b26-88f3-948db93084a6
    resourceVersion: "62245560"
    uid: 8202d7ba-4852-424b-8470-d79f0f423299
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: coredns
        app.kubernetes.io/name: coredns
        k8s-app: kube-dns
        pod-template-hash: 6fd5d59bb7
    template:
      metadata:
        annotations:
          checksum/config: 4307c4511fae30a2d74e6fb24080ba10d555369a63db72a9ed1b9f7e2aed4358
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: coredns
          k8s-app: kube-dns
          pod-template-hash: 6fd5d59bb7
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: coredns/coredns:1.11.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: udp-53
            protocol: UDP
          - containerPort: 53
            name: tcp-53
            protocol: TCP
          - containerPort: 9153
            name: tcp-9153
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-04-27T19:38:54Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
      pod-template-hash: 779c8488bd
    name: coredns-779c8488bd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: fcf3ba80-0ec3-4b26-88f3-948db93084a6
    resourceVersion: "102240629"
    uid: ac75922b-0b51-4bcf-a75d-09dc003db33f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: coredns
        app.kubernetes.io/name: coredns
        k8s-app: kube-dns
        pod-template-hash: 779c8488bd
    template:
      metadata:
        annotations:
          checksum/config: 5e5e1aa27c0d50ff1167f19fcebcb65533c1e06bb3e8f58d50cdf764a2358cbd
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: coredns
          k8s-app: kube-dns
          pod-template-hash: 779c8488bd
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: coredns/coredns:1.12.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: udp-53
            protocol: UDP
          - containerPort: 53
            name: tcp-53
            protocol: TCP
          - containerPort: 9153
            name: tcp-9153
            protocol: TCP
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-01T01:50:32Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
      pod-template-hash: 7c5f695549
    name: coredns-7c5f695549
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: fcf3ba80-0ec3-4b26-88f3-948db93084a6
    resourceVersion: "88091307"
    uid: 216e0d59-733b-444a-839b-27556222c069
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: coredns
        app.kubernetes.io/name: coredns
        k8s-app: kube-dns
        pod-template-hash: 7c5f695549
    template:
      metadata:
        annotations:
          checksum/config: f7ca94d8c2f45fb47f400754f81cf29e89090a21cb628acc44f8a21732db2704
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: coredns
          k8s-app: kube-dns
          pod-template-hash: 7c5f695549
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: coredns/coredns:1.12.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: udp-53
            protocol: UDP
          - containerPort: 53
            name: tcp-53
            protocol: TCP
          - containerPort: 9153
            name: tcp-9153
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-11-08T21:48:12Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
      pod-template-hash: 7c66d8f845
    name: coredns-7c66d8f845
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: fcf3ba80-0ec3-4b26-88f3-948db93084a6
    resourceVersion: "24803989"
    uid: 636ee356-006e-4ae1-90f7-9e883150a2ad
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: coredns
        app.kubernetes.io/name: coredns
        k8s-app: kube-dns
        pod-template-hash: 7c66d8f845
    template:
      metadata:
        annotations:
          checksum/config: f1bc8b95d93d9e17d761b8d1da818caa154933439c04fc5d7244719aa13d00d9
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: coredns
          k8s-app: kube-dns
          pod-template-hash: 7c66d8f845
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: coredns/coredns:1.11.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: udp-53
            protocol: UDP
          - containerPort: 53
            name: tcp-53
            protocol: TCP
          - containerPort: 9153
            name: tcp-9153
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            capabilities:
              add:
              - NET_BIND_SERVICE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: coredns
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-04-14T00:25:53Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: coredns
      app.kubernetes.io/name: coredns
      k8s-app: kube-dns
      pod-template-hash: 7d4b4bf58
    name: coredns-7d4b4bf58
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: fcf3ba80-0ec3-4b26-88f3-948db93084a6
    resourceVersion: "96910607"
    uid: be852ce6-3960-4215-9348-7bbd9b8c3870
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: coredns
        app.kubernetes.io/name: coredns
        k8s-app: kube-dns
        pod-template-hash: 7d4b4bf58
    template:
      metadata:
        annotations:
          checksum/config: e05d0b2bf09817f95939d112d93a3598fb3060275988d809814d4ef4b02dea60
          scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
            "operator":"Exists"}]'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: coredns
          app.kubernetes.io/name: coredns
          k8s-app: kube-dns
          pod-template-hash: 7d4b4bf58
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: coredns/coredns:1.12.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: udp-53
            protocol: UDP
          - containerPort: 53
            name: tcp-53
            protocol: TCP
          - containerPort: 9153
            name: tcp-9153
            protocol: TCP
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: Default
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: csi-driver-nfs
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-16T17:25:59Z"
    generation: 1
    labels:
      app: csi-nfs-controller
      app.kubernetes.io/instance: csi-driver-nfs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-hash: 7dfdd76f9f
    name: csi-nfs-controller-7dfdd76f9f
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: csi-nfs-controller
      uid: 0ade97a9-f9e0-4b64-a13a-91f4cd61bdb3
    resourceVersion: "99309778"
    uid: 5b6bc7d3-c249-491b-8196-be7e8e191812
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: csi-nfs-controller
        pod-template-hash: 7dfdd76f9f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-nfs-controller
          app.kubernetes.io/instance: csi-driver-nfs
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: csi-driver-nfs
          app.kubernetes.io/version: v4.10.0
          helm.sh/chart: csi-driver-nfs-v4.10.0
          pod-template-hash: 7dfdd76f9f
      spec:
        containers:
        - args:
          - -v=2
          - --csi-address=$(ADDRESS)
          - --leader-election
          - --leader-election-namespace=kube-system
          - --extra-create-metadata=true
          - --feature-gates=HonorPVReclaimPolicy=true
          - --timeout=1200s
          - --retry-interval-max=30m
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - -csi-address=$(ADDRESS)
          - -v=2
          - -leader-election
          - --leader-election-namespace=kube-system
          - -handle-volume-inuse-error=false
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=2
          - --csi-address=$(ADDRESS)
          - --leader-election-namespace=kube-system
          - --leader-election
          - --timeout=1200s
          - --retry-interval-max=30m
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.0
          imagePullPolicy: IfNotPresent
          name: csi-snapshotter
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=/csi/csi.sock
          - --probe-timeout=3s
          - --http-endpoint=localhost:29652
          - --v=2
          image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=5
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --drivername=nfs.csi.k8s.io
          - --mount-permissions=0
          - --working-mount-dir=/tmp
          - --default-ondelete-policy=delete
          - --use-tar-command-in-snapshot=false
          env:
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /healthz
              port: 29652
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: nfs
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kubelet/pods
            mountPropagation: Bidirectional
            name: pods-mount-dir
          - mountPath: /csi
            name: socket-dir
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: csi-nfs-controller-sa
        serviceAccountName: csi-nfs-controller-sa
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/controlplane
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: pods-mount-dir
        - emptyDir: {}
          name: socket-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: csi-driver-nfs2
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-16T22:06:20Z"
    generation: 1
    labels:
      app: csi-nfs2-controller
      app.kubernetes.io/instance: csi-driver-nfs2
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: csi-driver-nfs
      app.kubernetes.io/version: v4.10.0
      helm.sh/chart: csi-driver-nfs-v4.10.0
      pod-template-hash: 5cdf8b7f
    name: csi-nfs2-controller-5cdf8b7f
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: csi-nfs2-controller
      uid: 26648bd5-4469-485d-924c-2afa6fd1316a
    resourceVersion: "102415813"
    uid: 2ac28978-ae3f-4df4-85bf-b4fd5ad21050
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: csi-nfs2-controller
        pod-template-hash: 5cdf8b7f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: csi-nfs2-controller
          app.kubernetes.io/instance: csi-driver-nfs2
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: csi-driver-nfs
          app.kubernetes.io/version: v4.10.0
          helm.sh/chart: csi-driver-nfs-v4.10.0
          pod-template-hash: 5cdf8b7f
      spec:
        containers:
        - args:
          - -v=2
          - --csi-address=$(ADDRESS)
          - --leader-election
          - --leader-election-namespace=kube-system
          - --extra-create-metadata=true
          - --feature-gates=HonorPVReclaimPolicy=true
          - --timeout=1200s
          - --retry-interval-max=30m
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-provisioner:v5.2.0
          imagePullPolicy: IfNotPresent
          name: csi-provisioner
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - -csi-address=$(ADDRESS)
          - -v=2
          - -leader-election
          - --leader-election-namespace=kube-system
          - -handle-volume-inuse-error=false
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-resizer:v1.13.1
          imagePullPolicy: IfNotPresent
          name: csi-resizer
          resources:
            limits:
              memory: 400Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=2
          - --csi-address=$(ADDRESS)
          - --leader-election-namespace=kube-system
          - --leader-election
          - --timeout=1200s
          - --retry-interval-max=30m
          env:
          - name: ADDRESS
            value: /csi/csi.sock
          image: registry.k8s.io/sig-storage/csi-snapshotter:v8.2.0
          imagePullPolicy: IfNotPresent
          name: csi-snapshotter
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --csi-address=/csi/csi.sock
          - --probe-timeout=3s
          - --http-endpoint=localhost:29652
          - --v=2
          image: registry.k8s.io/sig-storage/livenessprobe:v2.15.0
          imagePullPolicy: IfNotPresent
          name: liveness-probe
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
        - args:
          - --v=5
          - --nodeid=$(NODE_ID)
          - --endpoint=$(CSI_ENDPOINT)
          - --drivername=nfs2.csi.k8s.io
          - --mount-permissions=0
          - --working-mount-dir=/tmp
          - --default-ondelete-policy=delete
          - --use-tar-command-in-snapshot=false
          env:
          - name: NODE_ID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          image: registry.k8s.io/sig-storage/nfsplugin:v4.10.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              host: localhost
              path: /healthz
              port: 29652
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: nfs
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 10m
              memory: 20Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_ADMIN
              drop:
              - ALL
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kubelet/pods
            mountPropagation: Bidirectional
            name: pods-mount-dir
          - mountPath: /csi
            name: socket-dir
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: csi-nfs2-controller-sa
        serviceAccountName: csi-nfs2-controller-sa
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/controlplane
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
        - effect: NoSchedule
          key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
          name: pods-mount-dir
        - emptyDir: {}
          name: socket-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-04-21T14:24:08Z"
    generation: 1
    labels:
      app.kubernetes.io/name: hubble-relay
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-relay
      pod-template-hash: 557d84fdf8
    name: hubble-relay-557d84fdf8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hubble-relay
      uid: b1278694-2976-4858-b39d-9d5863bc4256
    resourceVersion: "102241440"
    uid: c313ce1a-57eb-4d8a-8458-f1b5be3cd931
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: hubble-relay
        pod-template-hash: 557d84fdf8
    template:
      metadata:
        annotations:
          cilium.io/hubble-relay-configmap-checksum: eff0e5f47a53fa4b010591dc8fd68bffd75ccd6298d9d502cc7125e0b3fede93
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-relay
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-relay
          pod-template-hash: 557d84fdf8
      spec:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: false
        containers:
        - args:
          - serve
          command:
          - hubble-relay
          image: quay.io/cilium/hubble-relay:v1.17.3@sha256:f8674b5139111ac828a8818da7f2d344b4a5bfbaeb122c5dc9abed3e74000c55
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 12
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: hubble-relay
          ports:
          - containerPort: 4245
            name: grpc
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            grpc:
              port: 4222
              service: ""
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          startupProbe:
            failureThreshold: 20
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65532
        serviceAccount: hubble-relay
        serviceAccountName: hubble-relay
        terminationGracePeriodSeconds: 1
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: config.yaml
              path: config.yaml
            name: hubble-relay-config
          name: config
        - name: tls
          projected:
            defaultMode: 256
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
                name: hubble-relay-client-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      deployment.kubernetes.io/revision-history: "4"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-04-14T00:25:53Z"
    generation: 4
    labels:
      app.kubernetes.io/name: hubble-relay
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-relay
      pod-template-hash: 5c48576f87
    name: hubble-relay-5c48576f87
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hubble-relay
      uid: b1278694-2976-4858-b39d-9d5863bc4256
    resourceVersion: "92763642"
    uid: 22d8fc2d-3828-460a-812a-2abb6a45a608
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: hubble-relay
        pod-template-hash: 5c48576f87
    template:
      metadata:
        annotations:
          cilium.io/hubble-relay-configmap-checksum: eff0e5f47a53fa4b010591dc8fd68bffd75ccd6298d9d502cc7125e0b3fede93
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-relay
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-relay
          pod-template-hash: 5c48576f87
      spec:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: false
        containers:
        - args:
          - serve
          command:
          - hubble-relay
          image: quay.io/cilium/hubble-relay:v1.17.2@sha256:42a8db5c256c516cacb5b8937c321b2373ad7a6b0a1e5a5120d5028433d586cc
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 12
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: hubble-relay
          ports:
          - containerPort: 4245
            name: grpc
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            grpc:
              port: 4222
              service: ""
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          startupProbe:
            failureThreshold: 20
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65532
        serviceAccount: hubble-relay
        serviceAccountName: hubble-relay
        terminationGracePeriodSeconds: 1
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: config.yaml
              path: config.yaml
            name: hubble-relay-config
          name: config
        - name: tls
          projected:
            defaultMode: 256
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
                name: hubble-relay-client-certs
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-12-09T05:22:17Z"
    generation: 2
    labels:
      app.kubernetes.io/name: hubble-relay
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-relay
      pod-template-hash: 5dff9b9744
    name: hubble-relay-5dff9b9744
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hubble-relay
      uid: b1278694-2976-4858-b39d-9d5863bc4256
    resourceVersion: "62242014"
    uid: d122ea64-9c7d-4a8d-b4d1-fd7020ba6674
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: hubble-relay
        pod-template-hash: 5dff9b9744
    template:
      metadata:
        annotations:
          cilium.io/hubble-relay-configmap-checksum: 058d4aa45f038b89c2abca9819ce810326aeb9f8c6d1560d4a2070e0db250b02
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-relay
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-relay
          pod-template-hash: 5dff9b9744
      spec:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: false
        containers:
        - args:
          - serve
          command:
          - hubble-relay
          image: quay.io/cilium/hubble-relay:v1.16.4@sha256:fb2c7d127a1c809f6ba23c05973f3dd00f6b6a48e4aee2da95db925a4f0351d2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 12
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: hubble-relay
          ports:
          - containerPort: 4245
            name: grpc
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            grpc:
              port: 4222
              service: ""
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          startupProbe:
            failureThreshold: 20
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65532
        serviceAccount: hubble-relay
        serviceAccountName: hubble-relay
        terminationGracePeriodSeconds: 1
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: config.yaml
              path: config.yaml
            name: hubble-relay-config
          name: config
        - name: tls
          projected:
            defaultMode: 256
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
                name: hubble-relay-client-certs
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-01T01:37:36Z"
    generation: 4
    labels:
      app.kubernetes.io/name: hubble-relay
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-relay
      pod-template-hash: 6449dbbb5
    name: hubble-relay-6449dbbb5
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hubble-relay
      uid: b1278694-2976-4858-b39d-9d5863bc4256
    resourceVersion: "88094589"
    uid: f31878ee-9668-431f-93c3-d15208fd712d
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: hubble-relay
        pod-template-hash: 6449dbbb5
    template:
      metadata:
        annotations:
          cilium.io/hubble-relay-configmap-checksum: eff0e5f47a53fa4b010591dc8fd68bffd75ccd6298d9d502cc7125e0b3fede93
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-relay
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-relay
          pod-template-hash: 6449dbbb5
      spec:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: false
        containers:
        - args:
          - serve
          command:
          - hubble-relay
          image: quay.io/cilium/hubble-relay:v1.17.1@sha256:397e8fbb188157f744390a7b272a1dec31234e605bcbe22d8919a166d202a3dc
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 12
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: hubble-relay
          ports:
          - containerPort: 4245
            name: grpc
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            grpc:
              port: 4222
              service: ""
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          startupProbe:
            failureThreshold: 20
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65532
        serviceAccount: hubble-relay
        serviceAccountName: hubble-relay
        terminationGracePeriodSeconds: 1
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: config.yaml
              path: config.yaml
            name: hubble-relay-config
          name: config
        - name: tls
          projected:
            defaultMode: 256
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
                name: hubble-relay-client-certs
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:03:29Z"
    generation: 2
    labels:
      app.kubernetes.io/name: hubble-relay
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-relay
      pod-template-hash: 754b4d964f
    name: hubble-relay-754b4d964f
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hubble-relay
      uid: b1278694-2976-4858-b39d-9d5863bc4256
    resourceVersion: "21927512"
    uid: 5ce7e57c-23fc-4176-b2a4-9b43fc302103
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: hubble-relay
        pod-template-hash: 754b4d964f
    template:
      metadata:
        annotations:
          cilium.io/hubble-relay-configmap-checksum: 058d4aa45f038b89c2abca9819ce810326aeb9f8c6d1560d4a2070e0db250b02
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-relay
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-relay
          pod-template-hash: 754b4d964f
      spec:
        affinity:
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
        automountServiceAccountToken: false
        containers:
        - args:
          - serve
          command:
          - hubble-relay
          image: quay.io/cilium/hubble-relay:v1.16.3@sha256:feb60efd767e0e7863a94689f4a8db56a0acc7c1d2b307dee66422e3dc25a089
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 12
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: hubble-relay
          ports:
          - containerPort: 4245
            name: grpc
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            grpc:
              port: 4222
              service: ""
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources: {}
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          startupProbe:
            failureThreshold: 20
            grpc:
              port: 4222
              service: ""
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65532
        serviceAccount: hubble-relay
        serviceAccountName: hubble-relay
        terminationGracePeriodSeconds: 1
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: config.yaml
              path: config.yaml
            name: hubble-relay-config
          name: config
        - name: tls
          projected:
            defaultMode: 256
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
                name: hubble-relay-client-certs
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-04-14T00:25:53Z"
    generation: 3
    labels:
      app.kubernetes.io/name: hubble-ui
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-ui
      pod-template-hash: 7fd6bc845b
    name: hubble-ui-7fd6bc845b
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hubble-ui
      uid: 8bcdd077-0c93-48e8-83e0-38def7ac8f66
    resourceVersion: "102241437"
    uid: b5a723cb-71d8-4b56-80ff-1a15494787ba
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: hubble-ui
        pod-template-hash: 7fd6bc845b
    template:
      metadata:
        annotations:
          cilium.io/hubble-ui-nginx-configmap-checksum: de069d2597e16e4de004ce684b15d74b2ab6051c717ae073d86199a76d91fcf1
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-ui
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-ui
          pod-template-hash: 7fd6bc845b
      spec:
        automountServiceAccountToken: true
        containers:
        - image: quay.io/cilium/hubble-ui:v0.13.2@sha256:9e37c1296b802830834cc87342a9182ccbb71ffebb711971e849221bd9d59392
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: frontend
          ports:
          - containerPort: 8081
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            name: hubble-ui-nginx-conf
            subPath: nginx.conf
          - mountPath: /tmp
            name: tmp-dir
        - env:
          - name: EVENTS_SERVER_PORT
            value: "8090"
          - name: FLOWS_API_ADDR
            value: hubble-relay:80
          image: quay.io/cilium/hubble-ui-backend:v0.13.2@sha256:a034b7e98e6ea796ed26df8f4e71f83fc16465a19d166eff67a03b822c0bfa15
          imagePullPolicy: IfNotPresent
          name: backend
          ports:
          - containerPort: 8090
            name: grpc
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
          runAsGroup: 1001
          runAsUser: 1001
        serviceAccount: hubble-ui
        serviceAccountName: hubble-ui
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: hubble-ui-nginx
          name: hubble-ui-nginx-conf
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      deployment.kubernetes.io/revision-history: "2"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-03-01T01:37:40Z"
    generation: 4
    labels:
      app.kubernetes.io/name: hubble-ui
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-ui
      pod-template-hash: 89d5b457c
    name: hubble-ui-89d5b457c
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hubble-ui
      uid: 8bcdd077-0c93-48e8-83e0-38def7ac8f66
    resourceVersion: "88094623"
    uid: 412e4566-abb2-4739-bee8-00215d0b9459
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: hubble-ui
        pod-template-hash: 89d5b457c
    template:
      metadata:
        annotations:
          cilium.io/hubble-ui-nginx-configmap-checksum: de069d2597e16e4de004ce684b15d74b2ab6051c717ae073d86199a76d91fcf1
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-ui
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-ui
          pod-template-hash: 89d5b457c
      spec:
        automountServiceAccountToken: true
        containers:
        - image: quay.io/cilium/hubble-ui:v0.13.1@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: frontend
          ports:
          - containerPort: 8081
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            name: hubble-ui-nginx-conf
            subPath: nginx.conf
          - mountPath: /tmp
            name: tmp-dir
        - env:
          - name: EVENTS_SERVER_PORT
            value: "8090"
          - name: FLOWS_API_ADDR
            value: hubble-relay:80
          image: quay.io/cilium/hubble-ui-backend:v0.13.1@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b
          imagePullPolicy: IfNotPresent
          name: backend
          ports:
          - containerPort: 8090
            name: grpc
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
          runAsGroup: 1001
          runAsUser: 1001
        serviceAccount: hubble-ui
        serviceAccountName: hubble-ui
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: hubble-ui-nginx
          name: hubble-ui-nginx-conf
        - emptyDir: {}
          name: tmp-dir
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cilium
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T09:02:30Z"
    generation: 2
    labels:
      app.kubernetes.io/name: hubble-ui
      app.kubernetes.io/part-of: cilium
      k8s-app: hubble-ui
      pod-template-hash: dff775b8d
    name: hubble-ui-dff775b8d
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: hubble-ui
      uid: 8bcdd077-0c93-48e8-83e0-38def7ac8f66
    resourceVersion: "62242064"
    uid: 92cf2a01-1b5a-4bfb-b8c6-20a311372f64
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: hubble-ui
        pod-template-hash: dff775b8d
    template:
      metadata:
        annotations:
          cilium.io/hubble-ui-nginx-configmap-checksum: e8acee96ed990156efd0291c8c33709d2c7902d2ec993eefa16c7cd3d1a9d84b
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: hubble-ui
          app.kubernetes.io/part-of: cilium
          k8s-app: hubble-ui
          pod-template-hash: dff775b8d
      spec:
        automountServiceAccountToken: true
        containers:
        - image: quay.io/cilium/hubble-ui:v0.13.1@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: frontend
          ports:
          - containerPort: 8081
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/default.conf
            name: hubble-ui-nginx-conf
            subPath: nginx.conf
          - mountPath: /tmp
            name: tmp-dir
        - env:
          - name: EVENTS_SERVER_PORT
            value: "8090"
          - name: FLOWS_API_ADDR
            value: hubble-relay:80
          image: quay.io/cilium/hubble-ui-backend:v0.13.1@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b
          imagePullPolicy: IfNotPresent
          name: backend
          ports:
          - containerPort: 8090
            name: grpc
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
          runAsGroup: 1001
          runAsUser: 1001
        serviceAccount: hubble-ui
        serviceAccountName: hubble-ui
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: hubble-ui-nginx
          name: hubble-ui-nginx-conf
        - emptyDir: {}
          name: tmp-dir
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: kubelet-csr-approver
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-01-15T05:45:45Z"
    generation: 4
    labels:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/name: kubelet-csr-approver
      pod-template-hash: 54d749b9bd
    name: kubelet-csr-approver-54d749b9bd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubelet-csr-approver
      uid: 781c33a3-2896-41bb-bfd8-a20ca5235600
    resourceVersion: "91268979"
    uid: 0df27573-ef1e-4904-8912-dfe2497a348d
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubelet-csr-approver
        app.kubernetes.io/name: kubelet-csr-approver
        pod-template-hash: 54d749b9bd
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: kubelet-csr-approver
          app.kubernetes.io/name: kubelet-csr-approver
          pod-template-hash: 54d749b9bd
      spec:
        containers:
        - args:
          - -metrics-bind-address
          - :8080
          - -health-probe-bind-address
          - :8081
          - -leader-election
          env:
          - name: PROVIDER_REGEX
            value: ^(talos-controlplane|talos-worker01|talos-worker02)$
          - name: BYPASS_DNS_RESOLUTION
            value: "true"
          - name: ALLOWED_DNS_NAMES
            value: "1"
          image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: kubelet-csr-approver
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubelet-csr-approver
        serviceAccountName: kubelet-csr-approver
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: kubelet-csr-approver
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-04-19T00:01:58Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/name: kubelet-csr-approver
      pod-template-hash: 56fd689858
    name: kubelet-csr-approver-56fd689858
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubelet-csr-approver
      uid: 781c33a3-2896-41bb-bfd8-a20ca5235600
    resourceVersion: "102415867"
    uid: 1c9a41bb-304a-427d-af51-ec937cd8f8d7
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubelet-csr-approver
        app.kubernetes.io/name: kubelet-csr-approver
        pod-template-hash: 56fd689858
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: kubelet-csr-approver
          app.kubernetes.io/name: kubelet-csr-approver
          pod-template-hash: 56fd689858
      spec:
        containers:
        - args:
          - -metrics-bind-address
          - :8080
          - -health-probe-bind-address
          - :8081
          - -leader-election
          env:
          - name: PROVIDER_REGEX
            value: ^(talos-controlplane|talos-worker01|talos-worker02)$
          - name: BYPASS_DNS_RESOLUTION
            value: "true"
          - name: ALLOWED_DNS_NAMES
            value: "1"
          image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: kubelet-csr-approver
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubelet-csr-approver
        serviceAccountName: kubelet-csr-approver
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubelet-csr-approver
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T07:54:35Z"
    generation: 3
    labels:
      app.kubernetes.io/instance: kubelet-csr-approver
      app.kubernetes.io/name: kubelet-csr-approver
      pod-template-hash: 796bc55878
    name: kubelet-csr-approver-796bc55878
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubelet-csr-approver
      uid: 781c33a3-2896-41bb-bfd8-a20ca5235600
    resourceVersion: "40997994"
    uid: 75213ce0-3cf1-4c44-b319-3599562991c9
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubelet-csr-approver
        app.kubernetes.io/name: kubelet-csr-approver
        pod-template-hash: 796bc55878
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: kubelet-csr-approver
          app.kubernetes.io/name: kubelet-csr-approver
          pod-template-hash: 796bc55878
      spec:
        containers:
        - args:
          - -metrics-bind-address
          - :8080
          - -health-probe-bind-address
          - :8081
          - -leader-election
          env:
          - name: PROVIDER_REGEX
            value: ^(talos-controlplane|talos-worker01|talos-worker02)$
          - name: BYPASS_DNS_RESOLUTION
            value: "true"
          - name: ALLOWED_DNS_NAMES
            value: "1"
          image: ghcr.io/postfinance/kubelet-csr-approver:v1.2.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: kubelet-csr-approver
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubelet-csr-approver
        serviceAccountName: kubelet-csr-approver
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
  status:
    observedGeneration: 3
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-24T08:25:50Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: metrics-server
      app.kubernetes.io/name: metrics-server
      pod-template-hash: 6dbd494876
    name: metrics-server-6dbd494876
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: 4b3d0b0c-06a1-4695-b244-1752a8e5bb68
    resourceVersion: "102240630"
    uid: c74c0806-d9ce-4659-b50d-b4eaa1617fb6
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: metrics-server
        app.kubernetes.io/name: metrics-server
        pod-template-hash: 6dbd494876
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: metrics-server
          app.kubernetes.io/name: metrics-server
          pod-template-hash: 6dbd494876
      spec:
        containers:
        - args:
          - --secure-port=10250
          - --cert-dir=/tmp
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --authorization-always-allow-paths=/metrics
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: reloader
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-05-03T22:14:01Z"
    generation: 1
    labels:
      app: reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-2.1.3
      group: com.stakater.platform
      heritage: Helm
      pod-template-hash: 7b656d6bcf
      provider: stakater
      release: reloader
      version: v1.4.2
    name: reloader-7b656d6bcf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: reloader
      uid: 4ece6382-2506-4832-9da5-d274594f4f30
    resourceVersion: "102241584"
    uid: 4bce34d2-d034-4b0f-abe7-2c7e843e91c1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: reloader
        pod-template-hash: 7b656d6bcf
        release: reloader
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reloader
          app.kubernetes.io/managed-by: Helm
          chart: reloader-2.1.3
          group: com.stakater.platform
          heritage: Helm
          pod-template-hash: 7b656d6bcf
          provider: stakater
          release: reloader
          version: v1.4.2
      spec:
        containers:
        - args:
          - --log-level=info
          env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: ghcr.io/stakater/reloader:v1.4.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /live
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: reloader
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: reloader
        serviceAccountName: reloader
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: reloader
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-01-19T06:26:21Z"
    generation: 2
    labels:
      app: reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-1.2.1
      group: com.stakater.platform
      heritage: Helm
      pod-template-hash: 889fbbd47
      provider: stakater
      release: reloader
      version: v1.2.1
    name: reloader-889fbbd47
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: reloader
      uid: 4ece6382-2506-4832-9da5-d274594f4f30
    resourceVersion: "100981710"
    uid: ca662be5-4686-4673-a0c6-b7d6d2e8f933
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: reloader
        pod-template-hash: 889fbbd47
        release: reloader
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reloader
          app.kubernetes.io/managed-by: Helm
          chart: reloader-1.2.1
          group: com.stakater.platform
          heritage: Helm
          pod-template-hash: 889fbbd47
          provider: stakater
          release: reloader
          version: v1.2.1
      spec:
        containers:
        - args:
          - --log-level=info
          env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: ghcr.io/stakater/reloader:v1.2.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /live
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: reloader
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: reloader
        serviceAccountName: reloader
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: reloader
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-12-14T18:53:19Z"
    generation: 2
    labels:
      app: reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-1.2.0
      group: com.stakater.platform
      heritage: Helm
      pod-template-hash: 9996f94cb
      provider: stakater
      release: reloader
      version: v1.2.0
    name: reloader-9996f94cb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: reloader
      uid: 4ece6382-2506-4832-9da5-d274594f4f30
    resourceVersion: "43078054"
    uid: 13765b41-4ac4-48f6-8875-dd7490314699
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: reloader
        pod-template-hash: 9996f94cb
        release: reloader
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reloader
          app.kubernetes.io/managed-by: Helm
          chart: reloader-1.2.0
          group: com.stakater.platform
          heritage: Helm
          pod-template-hash: 9996f94cb
          provider: stakater
          release: reloader
          version: v1.2.0
      spec:
        containers:
        - args:
          - --log-level=info
          env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: ghcr.io/stakater/reloader:v1.2.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /live
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: reloader
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: reloader
        serviceAccountName: reloader
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "9"
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-03-16T17:44:01Z"
    generation: 3
    labels:
      app: homepage
      pod-template-hash: 6b57c9c69b
    name: homepage-6b57c9c69b
    namespace: myapps
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: homepage
      uid: 3e6e3abb-d90b-4a27-8200-00055c4be3e7
    resourceVersion: "102242691"
    uid: 08e71c94-333a-47fa-a36a-ae1414b91ebb
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: homepage
        pod-template-hash: 6b57c9c69b
    template:
      metadata:
        annotations:
          deploy-date: deploy-date-value
        creationTimestamp: null
        labels:
          app: homepage
          pod-template-hash: 6b57c9c69b
      spec:
        containers:
        - env:
          - name: HOMEPAGE_ALLOWED_HOSTS
            value: dashboard.samboxlab.top,192.168.0.129:3000
          - name: STAKATER_HOMEPAGE_CONFIGMAP
            value: addd3251293854442f46347b0fe999d0e6dd4502
          image: ghcr.io/gethomepage/homepage:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: homepage
          ports:
          - containerPort: 3000
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/custom.js
            name: homepage-config
            subPath: custom.js
          - mountPath: /app/config/custom.css
            name: homepage-config
            subPath: custom.css
          - mountPath: /app/config/bookmarks.yaml
            name: homepage-config
            subPath: bookmarks.yaml
          - mountPath: /app/config/docker.yaml
            name: homepage-config
            subPath: docker.yaml
          - mountPath: /app/config/kubernetes.yaml
            name: homepage-config
            subPath: kubernetes.yaml
          - mountPath: /app/config/services.yaml
            name: homepage-config
            subPath: services.yaml
          - mountPath: /app/config/settings.yaml
            name: homepage-config
            subPath: settings.yaml
          - mountPath: /app/config/widgets.yaml
            name: homepage-config
            subPath: widgets.yaml
          - mountPath: /app/config/logs
            name: logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: homepage
          name: homepage-config
        - emptyDir: {}
          name: logs
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 3
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "8"
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-03-16T17:42:05Z"
    generation: 4
    labels:
      app: homepage
      pod-template-hash: 7b5d6565d4
    name: homepage-7b5d6565d4
    namespace: myapps
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: homepage
      uid: 3e6e3abb-d90b-4a27-8200-00055c4be3e7
    resourceVersion: "70213132"
    uid: 80f6fc92-5e74-4e83-a622-6975169f501c
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: homepage
        pod-template-hash: 7b5d6565d4
    template:
      metadata:
        annotations:
          deploy-date: deploy-date-value
        creationTimestamp: null
        labels:
          app: homepage
          pod-template-hash: 7b5d6565d4
      spec:
        containers:
        - env:
          - name: HOMEPAGE_ALLOWED_HOSTS
            value: dashboard.samboxlab.top,192.168.0.129:3000
          - name: STAKATER_HOMEPAGE_CONFIGMAP
            value: 77f4b81116fb1543543bdf172769fd7f3620eb82
          image: ghcr.io/gethomepage/homepage:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: homepage
          ports:
          - containerPort: 3000
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 128Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/custom.js
            name: homepage-config
            subPath: custom.js
          - mountPath: /app/config/custom.css
            name: homepage-config
            subPath: custom.css
          - mountPath: /app/config/bookmarks.yaml
            name: homepage-config
            subPath: bookmarks.yaml
          - mountPath: /app/config/docker.yaml
            name: homepage-config
            subPath: docker.yaml
          - mountPath: /app/config/kubernetes.yaml
            name: homepage-config
            subPath: kubernetes.yaml
          - mountPath: /app/config/services.yaml
            name: homepage-config
            subPath: services.yaml
          - mountPath: /app/config/settings.yaml
            name: homepage-config
            subPath: settings.yaml
          - mountPath: /app/config/widgets.yaml
            name: homepage-config
            subPath: widgets.yaml
          - mountPath: /app/config/logs
            name: logs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: homepage
          name: homepage-config
        - emptyDir: {}
          name: logs
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2024-12-20T00:04:32Z"
    generation: 2
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 54664d979c
    name: cloudflared-54664d979c
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cloudflared
      uid: a7f293b2-787f-4077-9e46-feabc30a5b75
    resourceVersion: "40996592"
    uid: 45df3314-2fd5-41e7-a853-0d02e478b1f5
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
        pod-template-hash: 54664d979c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
          pod-template-hash: 54664d979c
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          image: docker.io/cloudflare/cloudflared:2024.12.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2024-12-09T05:21:14Z"
    generation: 2
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 5b56f4877
    name: cloudflared-5b56f4877
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cloudflared
      uid: a7f293b2-787f-4077-9e46-feabc30a5b75
    resourceVersion: "27489063"
    uid: 55929185-26b4-424b-aacb-0253eb7b0e46
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
        pod-template-hash: 5b56f4877
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
          pod-template-hash: 5b56f4877
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          image: docker.io/cloudflare/cloudflared:2024.11.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-03-01T02:25:48Z"
    generation: 1
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 6475d654f4
    name: cloudflared-6475d654f4
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cloudflared
      uid: a7f293b2-787f-4077-9e46-feabc30a5b75
    resourceVersion: "102241458"
    uid: 20171bfc-163d-49b6-a843-be6a3334af70
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
        pod-template-hash: 6475d654f4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
          pod-template-hash: 6475d654f4
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          image: docker.io/cloudflare/cloudflared:2025.2.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      meta.helm.sh/release-name: cloudflared
      meta.helm.sh/release-namespace: network
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2025-01-15T05:44:45Z"
    generation: 2
    labels:
      app.kubernetes.io/component: cloudflared
      app.kubernetes.io/instance: cloudflared
      app.kubernetes.io/name: cloudflared
      pod-template-hash: 65d489f956
    name: cloudflared-65d489f956
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cloudflared
      uid: a7f293b2-787f-4077-9e46-feabc30a5b75
    resourceVersion: "62259751"
    uid: 07146bb2-8b22-4e3c-8694-fbdf0888e1fe
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cloudflared
        app.kubernetes.io/instance: cloudflared
        app.kubernetes.io/name: cloudflared
        pod-template-hash: 65d489f956
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: cloudflared
          app.kubernetes.io/instance: cloudflared
          app.kubernetes.io/name: cloudflared
          pod-template-hash: 65d489f956
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - tunnel
          - --config
          - /etc/cloudflared/config/config.yaml
          - run
          - $(TUNNEL_ID)
          env:
          - name: NO_AUTOUPDATE
            value: "true"
          - name: TUNNEL_CRED_FILE
            value: /etc/cloudflared/creds/credentials.json
          - name: TUNNEL_ID
            valueFrom:
              secretKeyRef:
                key: TUNNEL_ID
                name: cloudflared-secret
          - name: TUNNEL_METRICS
            value: 0.0.0.0:8080
          - name: TUNNEL_ORIGIN_ENABLE_HTTP2
            value: "true"
          - name: TUNNEL_POST_QUANTUM
            value: "true"
          - name: TUNNEL_TRANSPORT_PROTOCOL
            value: quic
          image: docker.io/cloudflare/cloudflared:2025.1.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cloudflared/config/config.yaml
            name: config
            readOnly: true
            subPath: config.yaml
          - mountPath: /etc/cloudflared/creds/credentials.json
            name: creds
            readOnly: true
            subPath: credentials.json
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: cloudflared-configmap
          name: config
        - name: creds
          secret:
            defaultMode: 420
            secretName: cloudflared-secret
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      deployment.kubernetes.io/revision-history: "2"
      meta.helm.sh/release-name: echo-server
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-04-14T00:25:53Z"
    generation: 3
    labels:
      app.kubernetes.io/component: echo-server
      app.kubernetes.io/instance: echo-server
      app.kubernetes.io/name: echo-server
      pod-template-hash: 67ddcf754d
    name: echo-server-67ddcf754d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: echo-server
      uid: 5b0186bc-85a8-4b27-94ad-2566c8c824cd
    resourceVersion: "102242539"
    uid: a51b3112-9ea3-4158-93a8-ee6f5ea2167e
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: echo-server
        app.kubernetes.io/instance: echo-server
        app.kubernetes.io/name: echo-server
        pod-template-hash: 67ddcf754d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: echo-server
          app.kubernetes.io/instance: echo-server
          app.kubernetes.io/name: echo-server
          pod-template-hash: 67ddcf754d
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: HTTP_PORT
            value: "8080"
          - name: LOG_IGNORE_PATH
            value: /healthz
          - name: LOG_WITHOUT_NEWLINE
            value: "true"
          - name: PROMETHEUS_ENABLED
            value: "true"
          image: ghcr.io/mendhak/http-https-echo:36
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      deployment.kubernetes.io/revision-history: "1"
      meta.helm.sh/release-name: echo-server
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:09:37Z"
    generation: 2
    labels:
      app.kubernetes.io/component: echo-server
      app.kubernetes.io/instance: echo-server
      app.kubernetes.io/name: echo-server
      pod-template-hash: 7bfc9b45c9
    name: echo-server-7bfc9b45c9
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: echo-server
      uid: 5b0186bc-85a8-4b27-94ad-2566c8c824cd
    resourceVersion: "88094101"
    uid: 5036f813-86bc-46bb-9105-3fd0de5ed585
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: echo-server
        app.kubernetes.io/instance: echo-server
        app.kubernetes.io/name: echo-server
        pod-template-hash: 7bfc9b45c9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: echo-server
          app.kubernetes.io/instance: echo-server
          app.kubernetes.io/name: echo-server
          pod-template-hash: 7bfc9b45c9
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: HTTP_PORT
            value: "8080"
          - name: LOG_IGNORE_PATH
            value: /healthz
          - name: LOG_WITHOUT_NEWLINE
            value: "true"
          - name: PROMETHEUS_ENABLED
            value: "true"
          image: ghcr.io/mendhak/http-https-echo:35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: app
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 10m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: default
        serviceAccountName: default
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-03-01T01:50:42Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 58bb85df98
    name: external-dns-58bb85df98
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: 4ec5197e-6dfd-4106-8da0-fdc8942e8523
    resourceVersion: "92763156"
    uid: 9442bc3a-70e3-46ac-9081-db415fc87c73
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 58bb85df98
    template:
      metadata:
        annotations:
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 58bb85df98
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=samboxlab.top
          - --provider=cloudflare
          - --ingress-class=external
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:19:13Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: 87c64b58f
    name: external-dns-87c64b58f
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: 4ec5197e-6dfd-4106-8da0-fdc8942e8523
    resourceVersion: "62245552"
    uid: 05e5ed67-7765-4bd5-bdce-1481668f4fed
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: 87c64b58f
    template:
      metadata:
        annotations:
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: 87c64b58f
      spec:
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=samboxlab.top
          - --provider=cloudflare
          - --ingress-class=external
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.15.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: external-dns
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-04-21T14:23:34Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
      pod-template-hash: c6cc76596
    name: external-dns-c6cc76596
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-dns
      uid: 4ec5197e-6dfd-4106-8da0-fdc8942e8523
    resourceVersion: "103165995"
    uid: 2b92e5cd-7ba5-4efc-a88a-9bed1e70dae5
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
        pod-template-hash: c6cc76596
    template:
      metadata:
        annotations:
          secret.reloader.stakater.com/reload: external-dns-secret
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: external-dns
          app.kubernetes.io/name: external-dns
          pod-template-hash: c6cc76596
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --log-level=info
          - --log-format=text
          - --interval=1m
          - --source=crd
          - --source=ingress
          - --policy=sync
          - --registry=txt
          - --txt-owner-id=default
          - --txt-prefix=k8s.
          - --domain-filter=samboxlab.top
          - --provider=cloudflare
          - --ingress-class=external
          - --cloudflare-proxied
          - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
          - --crd-source-kind=DNSEndpoint
          env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: api-token
                name: external-dns-secret
          image: registry.k8s.io/external-dns/external-dns:v0.16.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: external-dns
          ports:
          - containerPort: 7979
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: external-dns
        serviceAccountName: external-dns
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-03-01T02:26:39Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 56ff4d894f
    name: ingress-nginx-external-controller-56ff4d894f
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-external-controller
      uid: 88c1e42a-0c8b-4d63-8ce4-df662059b3ad
    resourceVersion: "88591950"
    uid: 5c04e37e-ecab-4a45-8929-32c5e94c489c
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-external
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 56ff4d894f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-external
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: 56ff4d894f
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --election-id=ingress-nginx-external-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-external
        serviceAccountName: ingress-nginx-external
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-external-admission
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:54Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
      pod-template-hash: 7b97c4b4cb
    name: ingress-nginx-external-controller-7b97c4b4cb
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-external-controller
      uid: 88c1e42a-0c8b-4d63-8ce4-df662059b3ad
    resourceVersion: "24540"
    uid: c14e3326-d36a-47d2-9cd2-2b6858d36912
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-external
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 7b97c4b4cb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-external
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          helm.sh/chart: ingress-nginx-4.11.2
          pod-template-hash: 7b97c4b4cb
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --election-id=ingress-nginx-external-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --default-ssl-certificate=network/samboxlab-top-staging-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-external
        serviceAccountName: ingress-nginx-external
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-external-admission
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-04-14T18:37:17Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      pod-template-hash: 7c88d5d6c9
    name: ingress-nginx-external-controller-7c88d5d6c9
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-external-controller
      uid: 88c1e42a-0c8b-4d63-8ce4-df662059b3ad
    resourceVersion: "102242221"
    uid: 463984b3-e95c-4f9c-baba-210bb46889d7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-external
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 7c88d5d6c9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-external
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.1
          helm.sh/chart: ingress-nginx-4.12.1
          pod-template-hash: 7c88d5d6c9
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --election-id=ingress-nginx-external-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.1@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-external
        serviceAccountName: ingress-nginx-external
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-external-admission
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T23:01:55Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.3
      helm.sh/chart: ingress-nginx-4.11.3
      pod-template-hash: 7f99bc94cf
    name: ingress-nginx-external-controller-7f99bc94cf
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-external-controller
      uid: 88c1e42a-0c8b-4d63-8ce4-df662059b3ad
    resourceVersion: "62260478"
    uid: 3e517d19-215a-463a-a719-ddb5a093bfdb
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-external
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 7f99bc94cf
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-external
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.3
          helm.sh/chart: ingress-nginx-4.11.3
          pod-template-hash: 7f99bc94cf
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --election-id=ingress-nginx-external-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.3@sha256:d56f135b6462cfc476447cfe564b83a45e8bb7da2774963b00d12161112270b7
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-external
        serviceAccountName: ingress-nginx-external
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-external-admission
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      deployment.kubernetes.io/revision-history: "2"
      meta.helm.sh/release-name: ingress-nginx-external
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:08:06Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-external
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
      pod-template-hash: 94c776b7d
    name: ingress-nginx-external-controller-94c776b7d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-external-controller
      uid: 88c1e42a-0c8b-4d63-8ce4-df662059b3ad
    resourceVersion: "24808277"
    uid: b9b3f3f0-1631-4840-ad06-f539d62863c3
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-external
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 94c776b7d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-external
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          helm.sh/chart: ingress-nginx-4.11.2
          pod-template-hash: 94c776b7d
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --election-id=ingress-nginx-external-leader
          - --controller-class=k8s.io/external
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-external-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-external
        serviceAccountName: ingress-nginx-external
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-external-admission
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T23:01:53Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.3
      helm.sh/chart: ingress-nginx-4.11.3
      pod-template-hash: 54876f9f59
    name: ingress-nginx-internal-controller-54876f9f59
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-internal-controller
      uid: afac2468-2478-4ac7-b214-8c70a24e264d
    resourceVersion: "62260152"
    uid: 65b0aece-b77b-4240-9314-9ab4a33ba284
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-internal
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 54876f9f59
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-internal
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.3
          helm.sh/chart: ingress-nginx-4.11.3
          pod-template-hash: 54876f9f59
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --election-id=ingress-nginx-internal-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.3@sha256:d56f135b6462cfc476447cfe564b83a45e8bb7da2774963b00d12161112270b7
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-internal
        serviceAccountName: ingress-nginx-internal
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-internal-admission
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      deployment.kubernetes.io/revision-history: "2"
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:08:11Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
      pod-template-hash: 54c96f7f46
    name: ingress-nginx-internal-controller-54c96f7f46
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-internal-controller
      uid: afac2468-2478-4ac7-b214-8c70a24e264d
    resourceVersion: "24808348"
    uid: 4da14976-d30b-496f-85a7-c9856ce3b670
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-internal
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 54c96f7f46
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-internal
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          helm.sh/chart: ingress-nginx-4.11.2
          pod-template-hash: 54c96f7f46
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --election-id=ingress-nginx-internal-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-internal
        serviceAccountName: ingress-nginx-internal
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-internal-admission
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-04-14T18:37:17Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.1
      helm.sh/chart: ingress-nginx-4.12.1
      pod-template-hash: 5b84f885c5
    name: ingress-nginx-internal-controller-5b84f885c5
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-internal-controller
      uid: afac2468-2478-4ac7-b214-8c70a24e264d
    resourceVersion: "102242207"
    uid: cc568b1d-e1ba-4314-995c-6fd0b91b6e8d
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-internal
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 5b84f885c5
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-internal
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.1
          helm.sh/chart: ingress-nginx-4.12.1
          pod-template-hash: 5b84f885c5
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --election-id=ingress-nginx-internal-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.1@sha256:d2fbc4ec70d8aa2050dd91a91506e998765e86c96f32cffb56c503c9c34eed5b
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-internal
        serviceAccountName: ingress-nginx-internal
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-internal-admission
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2025-03-01T02:26:22Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.12.0
      helm.sh/chart: ingress-nginx-4.12.0
      pod-template-hash: 744d5fd4df
    name: ingress-nginx-internal-controller-744d5fd4df
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-internal-controller
      uid: afac2468-2478-4ac7-b214-8c70a24e264d
    resourceVersion: "88591955"
    uid: 86ac8182-47e3-4d4e-810f-ae2d56d7f588
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-internal
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 744d5fd4df
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-internal
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.12.0
          helm.sh/chart: ingress-nginx-4.12.0
          pod-template-hash: 744d5fd4df
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --election-id=ingress-nginx-internal-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=true
          - --default-ssl-certificate=network/samboxlab-top-production-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.12.0@sha256:e6b8de175acda6ca913891f0f727bca4527e797d52688cbe9fec9040d6f6b6fa
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 82
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-internal
        serviceAccountName: ingress-nginx-internal
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-internal-admission
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ingress-nginx-internal
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T09:02:58Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx-internal
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
      pod-template-hash: ddfcdb79b
    name: ingress-nginx-internal-controller-ddfcdb79b
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-internal-controller
      uid: afac2468-2478-4ac7-b214-8c70a24e264d
    resourceVersion: "24565"
    uid: c716f730-0a85-4e77-8cbe-3d30042f0b18
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx-internal
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: ddfcdb79b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx-internal
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          helm.sh/chart: ingress-nginx-4.11.2
          pod-template-hash: ddfcdb79b
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --election-id=ingress-nginx-internal-leader
          - --controller-class=k8s.io/internal
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-internal-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --default-ssl-certificate=network/samboxlab-top-staging-tls
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-internal
        serviceAccountName: ingress-nginx-internal
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-internal-admission
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: k8s-gateway
      meta.helm.sh/release-namespace: network
    creationTimestamp: "2024-10-24T08:27:02Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: k8s-gateway
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: k8s-gateway
      app.kubernetes.io/version: 0.4.0
      helm.sh/chart: k8s-gateway-2.4.0
      pod-template-hash: 6bc954c59d
    name: k8s-gateway-6bc954c59d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: k8s-gateway
      uid: 6fbf9e5b-f20c-419f-bf54-b9bce85d4e05
    resourceVersion: "102240650"
    uid: b06dc1f1-ca03-4530-8b95-ec708a3b4738
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: k8s-gateway
        app.kubernetes.io/name: k8s-gateway
        pod-template-hash: 6bc954c59d
    template:
      metadata:
        annotations:
          checksum/config: e7ea78763a51fc11ab37df9f0bcf0f67594cd1e879d240beb6c4038d13e139b4
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: k8s-gateway
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: k8s-gateway
          app.kubernetes.io/version: 0.4.0
          helm.sh/chart: k8s-gateway-2.4.0
          pod-template-hash: 6bc954c59d
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: quay.io/oriedge/k8s_gateway:v0.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: k8s-gateway
          ports:
          - containerPort: 1053
            name: dns-udp
            protocol: UDP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: k8s-gateway
        serviceAccountName: k8s-gateway
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: k8s-gateway
          name: config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: openebs
      meta.helm.sh/release-namespace: openebs-system
    creationTimestamp: "2025-03-01T01:58:54Z"
    generation: 1
    labels:
      app: localpv-provisioner
      chart: localpv-provisioner-4.1.1
      component: localpv-provisioner
      heritage: Helm
      name: openebs-localpv-provisioner
      openebs.io/component-name: openebs-localpv-provisioner
      openebs.io/version: 4.1.1
      pod-template-hash: 56d8447b9
      release: openebs
    name: openebs-localpv-provisioner-56d8447b9
    namespace: openebs-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: openebs-localpv-provisioner
      uid: 6866b130-ad27-4345-93a6-9a6ddda8bdd2
    resourceVersion: "103660662"
    uid: bb0ef625-6b8f-4566-aad6-e242ad1a360f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: localpv-provisioner
        component: localpv-provisioner
        pod-template-hash: 56d8447b9
        release: openebs
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: localpv-provisioner
          chart: localpv-provisioner-4.1.1
          component: localpv-provisioner
          heritage: Helm
          name: openebs-localpv-provisioner
          openebs.io/component-name: openebs-localpv-provisioner
          openebs.io/version: 4.1.1
          pod-template-hash: 56d8447b9
          release: openebs
      spec:
        containers:
        - env:
          - name: OPENEBS_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: OPENEBS_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.serviceAccountName
          - name: OPENEBS_IO_ENABLE_ANALYTICS
            value: "true"
          - name: OPENEBS_IO_BASE_PATH
            value: /var/openebs/local
          - name: OPENEBS_IO_HELPER_IMAGE
            value: quay.io/openebs/linux-utils:4.1.0
          - name: OPENEBS_IO_INSTALLER_TYPE
            value: localpv-charts-helm
          - name: LEADER_ELECTION_ENABLED
            value: "true"
          image: quay.io/openebs/provisioner-localpv:4.1.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - test `pgrep -c "^provisioner-loc.*"` = 1
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 1
          name: openebs-localpv-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: openebs-localpv-provisioner
        serviceAccountName: openebs-localpv-provisioner
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-03-02T17:14:22Z"
    generation: 1
    labels:
      app: qrapp
      pod-template-hash: 579c8c86c
    name: qrapp-579c8c86c
    namespace: qrapp
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qrapp
      uid: c6ddb132-db85-4b06-b2a5-235f3fb31496
    resourceVersion: "102239602"
    uid: da7ca652-c7ea-45ac-bc78-d4c604667677
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: qrapp
        pod-template-hash: 579c8c86c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: qrapp
          pod-template-hash: 579c8c86c
      spec:
        containers:
        - image: therealsojay/qrcodeapp:1.0.60
          imagePullPolicy: IfNotPresent
          name: qrapp
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: starboard-operator
      meta.helm.sh/release-namespace: starboard-system
    creationTimestamp: "2024-10-26T05:28:04Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: starboard-operator
      app.kubernetes.io/name: starboard-operator
      pod-template-hash: f54444f68
    name: starboard-operator-f54444f68
    namespace: starboard-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: starboard-operator
      uid: 6e2b04a1-9f13-4196-84d3-a9d6f24a32cc
    resourceVersion: "103958984"
    uid: 9a03b3fb-e5a2-40af-8400-af0f9dd1f79d
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: starboard-operator
        app.kubernetes.io/name: starboard-operator
        pod-template-hash: f54444f68
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: starboard-operator
          app.kubernetes.io/name: starboard-operator
          pod-template-hash: f54444f68
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: OPERATOR_NAMESPACE
            value: starboard-system
          - name: OPERATOR_TARGET_NAMESPACES
          - name: OPERATOR_EXCLUDE_NAMESPACES
            value: kube-system,starboard-system
          - name: OPERATOR_SERVICE_ACCOUNT
            value: starboard-operator
          - name: OPERATOR_LOG_DEV_MODE
            value: "false"
          - name: OPERATOR_SCAN_JOB_TIMEOUT
            value: 5m
          - name: OPERATOR_CONCURRENT_SCAN_JOBS_LIMIT
            value: "10"
          - name: OPERATOR_SCAN_JOB_RETRY_AFTER
            value: 30s
          - name: OPERATOR_BATCH_DELETE_LIMIT
            value: "10"
          - name: OPERATOR_BATCH_DELETE_DELAY
            value: 10s
          - name: OPERATOR_METRICS_BIND_ADDRESS
            value: :8080
          - name: OPERATOR_HEALTH_PROBE_BIND_ADDRESS
            value: :9090
          - name: OPERATOR_CIS_KUBERNETES_BENCHMARK_ENABLED
            value: "true"
          - name: OPERATOR_VULNERABILITY_SCANNER_ENABLED
            value: "true"
          - name: OPERATOR_VULNERABILITY_SCANNER_SCAN_ONLY_CURRENT_REVISIONS
            value: "false"
          - name: OPERATOR_VULNERABILITY_SCANNER_REPORT_TTL
          - name: OPERATOR_CONFIG_AUDIT_SCANNER_ENABLED
            value: "false"
          - name: OPERATOR_CONFIG_AUDIT_SCANNER_BUILTIN
            value: "true"
          - name: OPERATOR_CLUSTER_COMPLIANCE_ENABLED
            value: "true"
          image: docker.io/aquasec/starboard-operator:0.15.3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz/
              port: probes
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: starboard-operator
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          - containerPort: 9090
            name: probes
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz/
              port: probes
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: volsync
      meta.helm.sh/release-namespace: volsync-system
    creationTimestamp: "2025-05-07T03:02:08Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: volsync
      app.kubernetes.io/name: volsync
      control-plane: volsync-controller
      pod-template-hash: 5cfbddb45c
    name: volsync-5cfbddb45c
    namespace: volsync-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: volsync
      uid: 2c5e5818-da8c-4ebf-805e-346968b0164d
    resourceVersion: "103958369"
    uid: d6797c3b-a886-41d0-b600-729a950d0588
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: volsync
        app.kubernetes.io/name: volsync
        control-plane: volsync-controller
        pod-template-hash: 5cfbddb45c
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: manager
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: volsync
          app.kubernetes.io/name: volsync
          control-plane: volsync-controller
          pod-template-hash: 5cfbddb45c
      spec:
        containers:
        - args:
          - --secure-listen-address=0.0.0.0:8443
          - --upstream=http://127.0.0.1:8080/
          - --logtostderr=true
          - --tls-min-version=VersionTLS12
          - --v=0
          image: quay.io/brancz/kube-rbac-proxy:v0.18.2
          imagePullPolicy: IfNotPresent
          name: kube-rbac-proxy
          ports:
          - containerPort: 8443
            name: https
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 5m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
          - --health-probe-bind-address=:8081
          - --metrics-bind-address=127.0.0.1:8080
          - --leader-elect
          - --rclone-container-image=quay.io/backube/volsync:0.12.1
          - --restic-container-image=quay.io/backube/volsync:0.12.1
          - --rsync-container-image=quay.io/backube/volsync:0.12.1
          - --rsync-tls-container-image=quay.io/backube/volsync:0.12.1
          - --syncthing-container-image=quay.io/backube/volsync:0.12.1
          - --scc-name=volsync-privileged-mover
          command:
          - /manager
          env:
          - name: VOLSYNC_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/backube/volsync:0.12.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tempdir
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: volsync
        serviceAccountName: volsync
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir:
            medium: Memory
          name: tempdir
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      helm.sh/hook: pre-upgrade
      helm.sh/hook-delete-policy: hook-succeeded
      helm.sh/hook-weight: "0"
    creationTimestamp: "2025-03-01T01:50:25Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: openebs
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 4.2.0
      helm.sh/chart: openebs-4.2.0
    name: openebs-pre-upgrade-hook
    namespace: openebs-system
    resourceVersion: "62248491"
    uid: a54bd177-db76-4dd8-9ae9-acf1423bbae3
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: a54bd177-db76-4dd8-9ae9-acf1423bbae3
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: openebs
          app.kubernetes.io/managed-by: Helm
          batch.kubernetes.io/controller-uid: a54bd177-db76-4dd8-9ae9-acf1423bbae3
          batch.kubernetes.io/job-name: openebs-pre-upgrade-hook
          controller-uid: a54bd177-db76-4dd8-9ae9-acf1423bbae3
          helm.sh/chart: openebs-4.2.0
          job-name: openebs-pre-upgrade-hook
        name: openebs-pre-upgrade-hook
      spec:
        containers:
        - args:
          - (kubectl annotate --overwrite crd volumesnapshots.snapshot.storage.k8s.io
            volumesnapshotclasses.snapshot.storage.k8s.io volumesnapshotcontents.snapshot.storage.k8s.io
            helm.sh/resource-policy=keep || true) && (kubectl -n openebs-system delete
            deploy -l openebs.io/component-name=openebs-localpv-provisioner --ignore-not-found)
          command:
          - /bin/sh
          - -c
          image: docker.io/bitnami/kubectl:1.25.15
          imagePullPolicy: IfNotPresent
          name: pre-upgrade-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: openebs-pre-upgrade-hook
        serviceAccountName: openebs-pre-upgrade-hook
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2025-03-01T01:58:26Z"
    conditions:
    - lastProbeTime: "2025-03-01T01:58:26Z"
      lastTransitionTime: "2025-03-01T01:58:26Z"
      message: Reached expected number of succeeded pods
      reason: CompletionsReached
      status: "True"
      type: SuccessCriteriaMet
    - lastProbeTime: "2025-03-01T01:58:26Z"
      lastTransitionTime: "2025-03-01T01:58:26Z"
      message: Reached expected number of succeeded pods
      reason: CompletionsReached
      status: "True"
      type: Complete
    ready: 0
    startTime: "2025-03-01T01:50:26Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    creationTimestamp: "2024-10-26T05:28:24Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      kubeBenchReport.scanner: "true"
      starboard.resource.kind: Node
      starboard.resource.name: talos-controlplane
    name: scan-cisbenchmark-569fd998f8
    namespace: starboard-system
    resourceVersion: "835893"
    uid: f3a30fe4-edaa-45ef-aad0-373af3e895a2
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: f3a30fe4-edaa-45ef-aad0-373af3e895a2
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: f3a30fe4-edaa-45ef-aad0-373af3e895a2
          batch.kubernetes.io/job-name: scan-cisbenchmark-569fd998f8
          controller-uid: f3a30fe4-edaa-45ef-aad0-373af3e895a2
          job-name: scan-cisbenchmark-569fd998f8
          kubeBenchReport.scanner: "true"
          starboard.resource.kind: Node
          starboard.resource.name: talos-controlplane
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - -c
          - kube-bench --json 2> /dev/null
          command:
          - sh
          image: docker.io/aquasec/kube-bench:v0.6.6
          imagePullPolicy: IfNotPresent
          name: kube-bench
          resources:
            limits:
              cpu: 300m
              memory: 300M
            requests:
              cpu: 50m
              memory: 50M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/lib/etcd
            name: var-lib-etcd
            readOnly: true
          - mountPath: /var/lib/kubelet
            name: var-lib-kubelet
            readOnly: true
          - mountPath: /etc/systemd
            name: etc-systemd
            readOnly: true
          - mountPath: /etc/kubernetes
            name: etc-kubernetes
            readOnly: true
          - mountPath: /usr/local/mount-from-host/bin
            name: usr-bin
            readOnly: true
        dnsPolicy: ClusterFirst
        hostPID: true
        nodeName: talos-controlplane
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 0
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/lib/etcd
            type: ""
          name: var-lib-etcd
        - hostPath:
            path: /var/lib/kubelet
            type: ""
          name: var-lib-kubelet
        - hostPath:
            path: /etc/systemd
            type: ""
          name: etc-systemd
        - hostPath:
            path: /etc/kubernetes
            type: ""
          name: etc-kubernetes
        - hostPath:
            path: /usr/bin
            type: ""
          name: usr-bin
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:35:54Z"
      lastTransitionTime: "2024-10-26T05:35:54Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:02Z"
      lastTransitionTime: "2024-10-26T05:36:02Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: Failed
    failed: 1
    ready: 0
    startTime: "2024-10-26T05:28:24Z"
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    creationTimestamp: "2024-10-26T05:28:22Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      kubeBenchReport.scanner: "true"
      starboard.resource.kind: Node
      starboard.resource.name: talos-worker02
    name: scan-cisbenchmark-6b789f7bf5
    namespace: starboard-system
    resourceVersion: "835933"
    uid: 3aeac3a4-79fe-4539-a553-137d90fed5c8
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 3aeac3a4-79fe-4539-a553-137d90fed5c8
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: 3aeac3a4-79fe-4539-a553-137d90fed5c8
          batch.kubernetes.io/job-name: scan-cisbenchmark-6b789f7bf5
          controller-uid: 3aeac3a4-79fe-4539-a553-137d90fed5c8
          job-name: scan-cisbenchmark-6b789f7bf5
          kubeBenchReport.scanner: "true"
          starboard.resource.kind: Node
          starboard.resource.name: talos-worker02
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - -c
          - kube-bench --json 2> /dev/null
          command:
          - sh
          image: docker.io/aquasec/kube-bench:v0.6.6
          imagePullPolicy: IfNotPresent
          name: kube-bench
          resources:
            limits:
              cpu: 300m
              memory: 300M
            requests:
              cpu: 50m
              memory: 50M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/lib/etcd
            name: var-lib-etcd
            readOnly: true
          - mountPath: /var/lib/kubelet
            name: var-lib-kubelet
            readOnly: true
          - mountPath: /etc/systemd
            name: etc-systemd
            readOnly: true
          - mountPath: /etc/kubernetes
            name: etc-kubernetes
            readOnly: true
          - mountPath: /usr/local/mount-from-host/bin
            name: usr-bin
            readOnly: true
        dnsPolicy: ClusterFirst
        hostPID: true
        nodeName: talos-worker02
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 0
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/lib/etcd
            type: ""
          name: var-lib-etcd
        - hostPath:
            path: /var/lib/kubelet
            type: ""
          name: var-lib-kubelet
        - hostPath:
            path: /etc/systemd
            type: ""
          name: etc-systemd
        - hostPath:
            path: /etc/kubernetes
            type: ""
          name: etc-kubernetes
        - hostPath:
            path: /usr/bin
            type: ""
          name: usr-bin
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:35:54Z"
      lastTransitionTime: "2024-10-26T05:35:54Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:03Z"
      lastTransitionTime: "2024-10-26T05:36:03Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: Failed
    failed: 1
    ready: 0
    startTime: "2024-10-26T05:28:24Z"
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    creationTimestamp: "2024-10-26T05:28:20Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      kubeBenchReport.scanner: "true"
      starboard.resource.kind: Node
      starboard.resource.name: talos-worker01
    name: scan-cisbenchmark-6b957c5754
    namespace: starboard-system
    resourceVersion: "835926"
    uid: 5466db0f-5986-4a89-a23a-9c8d724ff594
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 5466db0f-5986-4a89-a23a-9c8d724ff594
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: 5466db0f-5986-4a89-a23a-9c8d724ff594
          batch.kubernetes.io/job-name: scan-cisbenchmark-6b957c5754
          controller-uid: 5466db0f-5986-4a89-a23a-9c8d724ff594
          job-name: scan-cisbenchmark-6b957c5754
          kubeBenchReport.scanner: "true"
          starboard.resource.kind: Node
          starboard.resource.name: talos-worker01
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - -c
          - kube-bench --json 2> /dev/null
          command:
          - sh
          image: docker.io/aquasec/kube-bench:v0.6.6
          imagePullPolicy: IfNotPresent
          name: kube-bench
          resources:
            limits:
              cpu: 300m
              memory: 300M
            requests:
              cpu: 50m
              memory: 50M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/lib/etcd
            name: var-lib-etcd
            readOnly: true
          - mountPath: /var/lib/kubelet
            name: var-lib-kubelet
            readOnly: true
          - mountPath: /etc/systemd
            name: etc-systemd
            readOnly: true
          - mountPath: /etc/kubernetes
            name: etc-kubernetes
            readOnly: true
          - mountPath: /usr/local/mount-from-host/bin
            name: usr-bin
            readOnly: true
        dnsPolicy: ClusterFirst
        hostPID: true
        nodeName: talos-worker01
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext:
          runAsGroup: 0
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /var/lib/etcd
            type: ""
          name: var-lib-etcd
        - hostPath:
            path: /var/lib/kubelet
            type: ""
          name: var-lib-kubelet
        - hostPath:
            path: /etc/systemd
            type: ""
          name: etc-systemd
        - hostPath:
            path: /etc/kubernetes
            type: ""
          name: etc-kubernetes
        - hostPath:
            path: /usr/bin
            type: ""
          name: usr-bin
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:35:54Z"
      lastTransitionTime: "2024-10-26T05:35:54Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:03Z"
      lastTransitionTime: "2024-10-26T05:36:03Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: Failed
    failed: 1
    ready: 0
    startTime: "2024-10-26T05:28:20Z"
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      starboard.container-images: '{"controller":"registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce"}'
    creationTimestamp: "2024-10-26T05:28:25Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      resource-spec-hash: 7b67f88bc8
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-internal-controller-ddfcdb79b
      starboard.resource.namespace: network
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-56b45d9566
    namespace: starboard-system
    resourceVersion: "835809"
    uid: b776bae4-2b1e-4512-8190-cde650041e68
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: b776bae4-2b1e-4512-8190-cde650041e68
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: b776bae4-2b1e-4512-8190-cde650041e68
          batch.kubernetes.io/job-name: scan-vulnerabilityreport-56b45d9566
          controller-uid: b776bae4-2b1e-4512-8190-cde650041e68
          job-name: scan-vulnerabilityreport-56b45d9566
          resource-spec-hash: 7b67f88bc8
          starboard.resource.kind: ReplicaSet
          starboard.resource.name: ingress-nginx-internal-controller-ddfcdb79b
          starboard.resource.namespace: network
          vulnerabilityReport.scanner: Trivy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
        automountServiceAccountToken: false
        containers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - --quiet
          - image
          - --skip-update
          - --format
          - json
          - registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          command:
          - trivy
          env:
          - name: TRIVY_SEVERITY
            valueFrom:
              configMapKeyRef:
                key: trivy.severity
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_IGNORE_UNFIXED
            valueFrom:
              configMapKeyRef:
                key: trivy.ignoreUnfixed
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: trivy.timeout
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_FILES
            valueFrom:
              configMapKeyRef:
                key: trivy.skipFiles
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_DIRS
            valueFrom:
              configMapKeyRef:
                key: trivy.skipDirs
                name: starboard-trivy-config
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: controller
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - image
          - --download-db-only
          command:
          - trivy
          env:
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: trivy.githubToken
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: b8927148-8580-485c-b013-6bda85cb0128
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:35:54Z"
      lastTransitionTime: "2024-10-26T05:35:54Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:35:55Z"
      lastTransitionTime: "2024-10-26T05:35:55Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: Failed
    failed: 1
    ready: 0
    startTime: "2024-10-26T05:28:26Z"
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      starboard.container-images: '{"cert-manager-webhook":"quay.io/jetstack/cert-manager-webhook:v1.16.1"}'
    creationTimestamp: "2024-10-26T05:28:24Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      resource-spec-hash: 75dc9cc59
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-webhook-74d876558d
      starboard.resource.namespace: cert-manager
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-59f9d577bb
    namespace: starboard-system
    resourceVersion: "835819"
    uid: eabc811c-2f96-4001-b57a-820162b1ad19
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: eabc811c-2f96-4001-b57a-820162b1ad19
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: eabc811c-2f96-4001-b57a-820162b1ad19
          batch.kubernetes.io/job-name: scan-vulnerabilityreport-59f9d577bb
          controller-uid: eabc811c-2f96-4001-b57a-820162b1ad19
          job-name: scan-vulnerabilityreport-59f9d577bb
          resource-spec-hash: 75dc9cc59
          starboard.resource.kind: ReplicaSet
          starboard.resource.name: cert-manager-webhook-74d876558d
          starboard.resource.namespace: cert-manager
          vulnerabilityReport.scanner: Trivy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
        automountServiceAccountToken: false
        containers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - --quiet
          - image
          - --skip-update
          - --format
          - json
          - quay.io/jetstack/cert-manager-webhook:v1.16.1
          command:
          - trivy
          env:
          - name: TRIVY_SEVERITY
            valueFrom:
              configMapKeyRef:
                key: trivy.severity
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_IGNORE_UNFIXED
            valueFrom:
              configMapKeyRef:
                key: trivy.ignoreUnfixed
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: trivy.timeout
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_FILES
            valueFrom:
              configMapKeyRef:
                key: trivy.skipFiles
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_DIRS
            valueFrom:
              configMapKeyRef:
                key: trivy.skipDirs
                name: starboard-trivy-config
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: cert-manager-webhook
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - image
          - --download-db-only
          command:
          - trivy
          env:
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: trivy.githubToken
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: c0d7ab01-3ff8-4720-9c6f-1d56b834f6c3
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:35:54Z"
      lastTransitionTime: "2024-10-26T05:35:54Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:35:57Z"
      lastTransitionTime: "2024-10-26T05:35:57Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: Failed
    failed: 1
    ready: 0
    startTime: "2024-10-26T05:28:24Z"
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      starboard.container-images: '{"cert-manager-controller":"quay.io/jetstack/cert-manager-controller:v1.16.1"}'
    creationTimestamp: "2024-10-26T05:28:26Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      resource-spec-hash: 6bb7b598f7
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-68f6c5cb5
      starboard.resource.namespace: cert-manager
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-5d5849664
    namespace: starboard-system
    resourceVersion: "835847"
    uid: b2c52b92-facd-4327-938e-e4689687f95a
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: b2c52b92-facd-4327-938e-e4689687f95a
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: b2c52b92-facd-4327-938e-e4689687f95a
          batch.kubernetes.io/job-name: scan-vulnerabilityreport-5d5849664
          controller-uid: b2c52b92-facd-4327-938e-e4689687f95a
          job-name: scan-vulnerabilityreport-5d5849664
          resource-spec-hash: 6bb7b598f7
          starboard.resource.kind: ReplicaSet
          starboard.resource.name: cert-manager-68f6c5cb5
          starboard.resource.namespace: cert-manager
          vulnerabilityReport.scanner: Trivy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
        automountServiceAccountToken: false
        containers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - --quiet
          - image
          - --skip-update
          - --format
          - json
          - quay.io/jetstack/cert-manager-controller:v1.16.1
          command:
          - trivy
          env:
          - name: TRIVY_SEVERITY
            valueFrom:
              configMapKeyRef:
                key: trivy.severity
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_IGNORE_UNFIXED
            valueFrom:
              configMapKeyRef:
                key: trivy.ignoreUnfixed
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: trivy.timeout
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_FILES
            valueFrom:
              configMapKeyRef:
                key: trivy.skipFiles
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_DIRS
            valueFrom:
              configMapKeyRef:
                key: trivy.skipDirs
                name: starboard-trivy-config
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: cert-manager-controller
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - image
          - --download-db-only
          command:
          - trivy
          env:
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: trivy.githubToken
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: d770a22b-f52f-4c1b-bc9b-0da0c719ad93
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:35:58Z"
      lastTransitionTime: "2024-10-26T05:35:58Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:01Z"
      lastTransitionTime: "2024-10-26T05:36:01Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: Failed
    failed: 1
    ready: 0
    startTime: "2024-10-26T05:28:27Z"
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      starboard.container-images: '{"app":"docker.io/cloudflare/cloudflared:2024.10.0"}'
    creationTimestamp: "2024-10-26T05:28:22Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      resource-spec-hash: 585cbf5799
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cloudflared-fd9564b49
      starboard.resource.namespace: network
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-5f9f484df8
    namespace: starboard-system
    resourceVersion: "835859"
    uid: 282c2356-1c9b-4033-8240-79a556c80dfa
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 282c2356-1c9b-4033-8240-79a556c80dfa
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: 282c2356-1c9b-4033-8240-79a556c80dfa
          batch.kubernetes.io/job-name: scan-vulnerabilityreport-5f9f484df8
          controller-uid: 282c2356-1c9b-4033-8240-79a556c80dfa
          job-name: scan-vulnerabilityreport-5f9f484df8
          resource-spec-hash: 585cbf5799
          starboard.resource.kind: ReplicaSet
          starboard.resource.name: cloudflared-fd9564b49
          starboard.resource.namespace: network
          vulnerabilityReport.scanner: Trivy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
        automountServiceAccountToken: false
        containers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - --quiet
          - image
          - --skip-update
          - --format
          - json
          - docker.io/cloudflare/cloudflared:2024.10.0
          command:
          - trivy
          env:
          - name: TRIVY_SEVERITY
            valueFrom:
              configMapKeyRef:
                key: trivy.severity
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_IGNORE_UNFIXED
            valueFrom:
              configMapKeyRef:
                key: trivy.ignoreUnfixed
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: trivy.timeout
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_FILES
            valueFrom:
              configMapKeyRef:
                key: trivy.skipFiles
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_DIRS
            valueFrom:
              configMapKeyRef:
                key: trivy.skipDirs
                name: starboard-trivy-config
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: app
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - image
          - --download-db-only
          command:
          - trivy
          env:
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: trivy.githubToken
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: 3ec0b74b-e043-4b62-920d-25ff4885c113
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:36:01Z"
      lastTransitionTime: "2024-10-26T05:36:01Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:01Z"
      lastTransitionTime: "2024-10-26T05:36:01Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: Failed
    ready: 0
    startTime: "2024-10-26T05:28:24Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      starboard.container-images: '{"app":"docker.io/cloudflare/cloudflared:2024.10.1"}'
    creationTimestamp: "2024-10-26T05:28:20Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      resource-spec-hash: ff4b5d594
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cloudflared-588dfdf7d6
      starboard.resource.namespace: network
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-6cc8555dc5
    namespace: starboard-system
    resourceVersion: "835877"
    uid: 26d01452-b5ed-491b-b4ad-ba1fdbc7ecdf
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 26d01452-b5ed-491b-b4ad-ba1fdbc7ecdf
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: 26d01452-b5ed-491b-b4ad-ba1fdbc7ecdf
          batch.kubernetes.io/job-name: scan-vulnerabilityreport-6cc8555dc5
          controller-uid: 26d01452-b5ed-491b-b4ad-ba1fdbc7ecdf
          job-name: scan-vulnerabilityreport-6cc8555dc5
          resource-spec-hash: ff4b5d594
          starboard.resource.kind: ReplicaSet
          starboard.resource.name: cloudflared-588dfdf7d6
          starboard.resource.namespace: network
          vulnerabilityReport.scanner: Trivy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
        automountServiceAccountToken: false
        containers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - --quiet
          - image
          - --skip-update
          - --format
          - json
          - docker.io/cloudflare/cloudflared:2024.10.1
          command:
          - trivy
          env:
          - name: TRIVY_SEVERITY
            valueFrom:
              configMapKeyRef:
                key: trivy.severity
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_IGNORE_UNFIXED
            valueFrom:
              configMapKeyRef:
                key: trivy.ignoreUnfixed
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: trivy.timeout
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_FILES
            valueFrom:
              configMapKeyRef:
                key: trivy.skipFiles
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_DIRS
            valueFrom:
              configMapKeyRef:
                key: trivy.skipDirs
                name: starboard-trivy-config
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: app
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - image
          - --download-db-only
          command:
          - trivy
          env:
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: trivy.githubToken
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: 00a9f65c-665a-45d7-ac36-fe3e0b33298c
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:36:01Z"
      lastTransitionTime: "2024-10-26T05:36:01Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:02Z"
      lastTransitionTime: "2024-10-26T05:36:02Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: Failed
    ready: 0
    startTime: "2024-10-26T05:28:20Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      starboard.container-images: '{"manager":"ghcr.io/fluxcd/image-reflector-controller:v0.33.0"}'
    creationTimestamp: "2024-10-26T05:28:24Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      resource-spec-hash: 7c74886bd4
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: image-reflector-controller-568fc784cb
      starboard.resource.namespace: flux-system
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-7cf49b8448
    namespace: starboard-system
    resourceVersion: "835885"
    uid: 860156fc-fbda-45ff-9104-519f1d3a00a0
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 860156fc-fbda-45ff-9104-519f1d3a00a0
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: 860156fc-fbda-45ff-9104-519f1d3a00a0
          batch.kubernetes.io/job-name: scan-vulnerabilityreport-7cf49b8448
          controller-uid: 860156fc-fbda-45ff-9104-519f1d3a00a0
          job-name: scan-vulnerabilityreport-7cf49b8448
          resource-spec-hash: 7c74886bd4
          starboard.resource.kind: ReplicaSet
          starboard.resource.name: image-reflector-controller-568fc784cb
          starboard.resource.namespace: flux-system
          vulnerabilityReport.scanner: Trivy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
        automountServiceAccountToken: false
        containers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - --quiet
          - image
          - --skip-update
          - --format
          - json
          - ghcr.io/fluxcd/image-reflector-controller:v0.33.0
          command:
          - trivy
          env:
          - name: TRIVY_SEVERITY
            valueFrom:
              configMapKeyRef:
                key: trivy.severity
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_IGNORE_UNFIXED
            valueFrom:
              configMapKeyRef:
                key: trivy.ignoreUnfixed
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: trivy.timeout
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_FILES
            valueFrom:
              configMapKeyRef:
                key: trivy.skipFiles
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_DIRS
            valueFrom:
              configMapKeyRef:
                key: trivy.skipDirs
                name: starboard-trivy-config
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: manager
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - image
          - --download-db-only
          command:
          - trivy
          env:
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: trivy.githubToken
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: 8421452c-1d65-42d6-bcce-ee1355d923f1
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:36:01Z"
      lastTransitionTime: "2024-10-26T05:36:01Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:02Z"
      lastTransitionTime: "2024-10-26T05:36:02Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: Failed
    failed: 1
    ready: 0
    startTime: "2024-10-26T05:28:25Z"
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      starboard.container-images: '{"controller":"registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce"}'
    creationTimestamp: "2024-10-26T05:28:25Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      resource-spec-hash: 7889b6ddcb
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-external-controller-7b97c4b4cb
      starboard.resource.namespace: network
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-7d46d65f5d
    namespace: starboard-system
    resourceVersion: "835879"
    uid: cc8fbd55-d981-474c-9228-e085850fa415
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: cc8fbd55-d981-474c-9228-e085850fa415
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: cc8fbd55-d981-474c-9228-e085850fa415
          batch.kubernetes.io/job-name: scan-vulnerabilityreport-7d46d65f5d
          controller-uid: cc8fbd55-d981-474c-9228-e085850fa415
          job-name: scan-vulnerabilityreport-7d46d65f5d
          resource-spec-hash: 7889b6ddcb
          starboard.resource.kind: ReplicaSet
          starboard.resource.name: ingress-nginx-external-controller-7b97c4b4cb
          starboard.resource.namespace: network
          vulnerabilityReport.scanner: Trivy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
        automountServiceAccountToken: false
        containers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - --quiet
          - image
          - --skip-update
          - --format
          - json
          - registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          command:
          - trivy
          env:
          - name: TRIVY_SEVERITY
            valueFrom:
              configMapKeyRef:
                key: trivy.severity
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_IGNORE_UNFIXED
            valueFrom:
              configMapKeyRef:
                key: trivy.ignoreUnfixed
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: trivy.timeout
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_FILES
            valueFrom:
              configMapKeyRef:
                key: trivy.skipFiles
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_DIRS
            valueFrom:
              configMapKeyRef:
                key: trivy.skipDirs
                name: starboard-trivy-config
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: controller
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - image
          - --download-db-only
          command:
          - trivy
          env:
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: trivy.githubToken
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: 808a5bb2-737c-4925-9637-d94316f1f37f
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:36:01Z"
      lastTransitionTime: "2024-10-26T05:36:01Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:02Z"
      lastTransitionTime: "2024-10-26T05:36:02Z"
      message: Job was active longer than specified deadline
      reason: DeadlineExceeded
      status: "True"
      type: Failed
    ready: 0
    startTime: "2024-10-26T05:28:25Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      starboard.container-images: '{"controller":"registry.k8s.io/ingress-nginx/controller:v1.11.3@sha256:d56f135b6462cfc476447cfe564b83a45e8bb7da2774963b00d12161112270b7"}'
    creationTimestamp: "2024-10-26T05:28:25Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: starboard
      resource-spec-hash: 698878f7
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-external-controller-7f99bc94cf
      starboard.resource.namespace: network
      vulnerabilityReport.scanner: Trivy
    name: scan-vulnerabilityreport-7db8cddb8f
    namespace: starboard-system
    resourceVersion: "835883"
    uid: 7bc47212-fc53-47cd-8061-6e09df5a168e
  spec:
    activeDeadlineSeconds: 300
    backoffLimit: 0
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 7bc47212-fc53-47cd-8061-6e09df5a168e
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/managed-by: starboard
          batch.kubernetes.io/controller-uid: 7bc47212-fc53-47cd-8061-6e09df5a168e
          batch.kubernetes.io/job-name: scan-vulnerabilityreport-7db8cddb8f
          controller-uid: 7bc47212-fc53-47cd-8061-6e09df5a168e
          job-name: scan-vulnerabilityreport-7db8cddb8f
          resource-spec-hash: 698878f7
          starboard.resource.kind: ReplicaSet
          starboard.resource.name: ingress-nginx-external-controller-7f99bc94cf
          starboard.resource.namespace: network
          vulnerabilityReport.scanner: Trivy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
        automountServiceAccountToken: false
        containers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - --quiet
          - image
          - --skip-update
          - --format
          - json
          - registry.k8s.io/ingress-nginx/controller:v1.11.3@sha256:d56f135b6462cfc476447cfe564b83a45e8bb7da2774963b00d12161112270b7
          command:
          - trivy
          env:
          - name: TRIVY_SEVERITY
            valueFrom:
              configMapKeyRef:
                key: trivy.severity
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_IGNORE_UNFIXED
            valueFrom:
              configMapKeyRef:
                key: trivy.ignoreUnfixed
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_TIMEOUT
            valueFrom:
              configMapKeyRef:
                key: trivy.timeout
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_FILES
            valueFrom:
              configMapKeyRef:
                key: trivy.skipFiles
                name: starboard-trivy-config
                optional: true
          - name: TRIVY_SKIP_DIRS
            valueFrom:
              configMapKeyRef:
                key: trivy.skipDirs
                name: starboard-trivy-config
                optional: true
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: controller
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --cache-dir
          - /tmp/trivy/.cache
          - image
          - --download-db-only
          command:
          - trivy
          env:
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpProxy
                name: starboard-trivy-config
                optional: true
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.httpsProxy
                name: starboard-trivy-config
                optional: true
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: trivy.noProxy
                name: starboard-trivy-config
                optional: true
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: trivy.githubToken
                name: starboard-trivy-config
                optional: true
          image: docker.io/aquasec/trivy:0.24.2
          imagePullPolicy: IfNotPresent
          name: a7ad2925-82a2-487f-8607-9abd97df77c2
          resources:
            limits:
              cpu: 500m
              memory: 500M
            requests:
              cpu: 100m
              memory: 100M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: starboard-operator
        serviceAccountName: starboard-operator
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    conditions:
    - lastProbeTime: "2024-10-26T05:36:01Z"
      lastTransitionTime: "2024-10-26T05:36:01Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: FailureTarget
    - lastProbeTime: "2024-10-26T05:36:02Z"
      lastTransitionTime: "2024-10-26T05:36:02Z"
      message: Job has reached the specified backoff limit
      reason: BackoffLimitExceeded
      status: "True"
      type: Failed
    failed: 1
    ready: 0
    startTime: "2024-10-26T05:28:25Z"
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-01-19T06:30:48Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 5d676b5f77
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-5865d4fd69
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-5865d4fd69
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-5865d4fd69
      uid: 60aa0fb5-32ff-4f64-a75a-24a8e5a7c814
    resourceVersion: "43078909"
    uid: 3ee7082f-0aa9-4975-ba2b-85d5acdc2f77
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-5865d4fd69 in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-5865d4fd69 in
        cert-manager namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-5865d4fd69 in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-5865d4fd69 in
        cert-manager namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-5865d4fd69'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-12-09T05:27:13Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: f87769dc7
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-659dbd9c7f
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-659dbd9c7f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-659dbd9c7f
      uid: 22da70c6-97bc-4445-b5ae-16f4f847c2c1
    resourceVersion: "21928277"
    uid: 8c0c9952-9c7c-471a-ba29-5d0df9633594
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-659dbd9c7f in
        cert-manager namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-659dbd9c7f in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-659dbd9c7f in
        cert-manager namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-659dbd9c7f in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-659dbd9c7f'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:39Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 6bb7b598f7
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-68f6c5cb5
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-68f6c5cb5
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-68f6c5cb5
      uid: e8815c8e-1ac3-4d09-b313-644ad5e5ec81
    resourceVersion: "834677"
    uid: fc56462e-541c-4d67-852b-2290c4a88170
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-68f6c5cb5 in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-68f6c5cb5 in
        cert-manager namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-68f6c5cb5 in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-68f6c5cb5 in
        cert-manager namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-68f6c5cb5'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-26T08:37:50Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 68fbcdf489
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-6d6f549b9c
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-6d6f549b9c
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-6d6f549b9c
      uid: a1746c18-2116-4043-a5e0-c5e19d22ccbd
    resourceVersion: "95934150"
    uid: 0ee3c913-2989-4965-b8e3-be86e7921c92
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-6d6f549b9c in
        cert-manager namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-6d6f549b9c in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-6d6f549b9c in
        cert-manager namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-6d6f549b9c in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-6d6f549b9c'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:31Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 6fc97c5b69
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-cainjector-66785cb58f
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-cainjector-66785cb58f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-66785cb58f
      uid: 11f19997-23df-48ea-a747-91a6aa92d3de
    resourceVersion: "834630"
    uid: 1092365d-2074-4972-ad0c-8353724173b1
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-66785cb58f
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-66785cb58f
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-66785cb58f
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-66785cb58f
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-66785cb58f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-01-19T06:30:46Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 9548bc5cf
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-cainjector-69bf859c5f
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-cainjector-69bf859c5f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-69bf859c5f
      uid: 55bf4145-ebbb-41a6-9f23-36c22d4f6c90
    resourceVersion: "43078905"
    uid: f130813f-6bf0-4264-ae9e-ec7b94cab2df
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-69bf859c5f
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-69bf859c5f
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-69bf859c5f
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-69bf859c5f
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-69bf859c5f'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-26T08:37:51Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 7fc74b7c5f
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-cainjector-7cc5fd9895
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-cainjector-7cc5fd9895
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-7cc5fd9895
      uid: 86a775be-01f6-43a5-babf-e038c00ed5ba
    resourceVersion: "95934168"
    uid: 0388ad82-94ef-42d4-8141-c55fbce7f00f
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-7cc5fd9895
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-7cc5fd9895
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-7cc5fd9895
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-7cc5fd9895
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-7cc5fd9895'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T01:52:08Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 76fd97484d
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-cainjector-bc8dbfcdd
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-cainjector-bc8dbfcdd
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-bc8dbfcdd
      uid: bf7ff72d-7274-4104-b884-4e05f2b6c39b
    resourceVersion: "62246302"
    uid: bc37fd31-3912-42fd-9a42-d38e45c74ad5
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-bc8dbfcdd
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-bc8dbfcdd
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-bc8dbfcdd
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-bc8dbfcdd'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-bc8dbfcdd
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-12-09T05:27:15Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 7cf9fcd594
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-cainjector-c879b86d6
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-cainjector-c879b86d6
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-c879b86d6
      uid: fefc7dfd-700a-4a76-93cf-26017951fef4
    resourceVersion: "21928304"
    uid: 160a8760-7351-4bb9-8ac6-50331f6c3141
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-c879b86d6
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-c879b86d6
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-cainjector of replicaset cert-manager-cainjector-c879b86d6
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-cainjector' of ReplicaSet 'cert-manager-cainjector-c879b86d6'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-cainjector of replicaset cert-manager-cainjector-c879b86d6
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T01:52:09Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: fb47c549c
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-cc9ddc6c
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-cc9ddc6c
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-cc9ddc6c
      uid: 609ec917-20f1-4bff-91d2-e41262f4e40b
    resourceVersion: "62246303"
    uid: dabccb63-cdc9-411b-9129-e23785a0f1ec
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-cc9ddc6c in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-cc9ddc6c in cert-manager
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-controller of replicaset cert-manager-cc9ddc6c in
        cert-manager namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-controller of replicaset cert-manager-cc9ddc6c in cert-manager
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-controller' of ReplicaSet 'cert-manager-cc9ddc6c'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-01-19T06:30:47Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 79548f64fc
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-webhook-578f66dcd
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-webhook-578f66dcd
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-578f66dcd
      uid: b0476b6e-0077-43b5-9da9-9579d5d2f3da
    resourceVersion: "43078908"
    uid: 00cd7491-b77d-43a8-b3d2-e260dd03d9a4
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-578f66dcd
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-578f66dcd
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-578f66dcd
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-578f66dcd
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-578f66dcd'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T01:52:09Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 67dfb8fd4b
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-webhook-5f65ff988f
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-webhook-5f65ff988f
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-5f65ff988f
      uid: 95b0e706-dc64-4265-b53d-b4845d75d080
    resourceVersion: "62246305"
    uid: 1ffdbb49-1923-4fca-b505-787980e0e53a
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-5f65ff988f
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-5f65ff988f
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-5f65ff988f
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-5f65ff988f
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-5f65ff988f'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:36Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 75dc9cc59
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-webhook-74d876558d
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-webhook-74d876558d
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-74d876558d
      uid: 202391ef-90d6-4662-9233-11a1eb2de553
    resourceVersion: "834662"
    uid: 1aaa4996-7c24-4a7a-b38d-51a9e4773991
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-74d876558d
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-74d876558d
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-74d876558d
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-74d876558d
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-74d876558d'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-26T08:37:50Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 5bd5db4b7c
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-webhook-7996dff45d
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-webhook-7996dff45d
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-7996dff45d
      uid: 4d51dedf-4aee-4166-9bf8-6a5fd349a6ff
    resourceVersion: "95934159"
    uid: 53322acb-c9c0-4215-9a3c-87d9974b0095
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-7996dff45d
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-7996dff45d
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-7996dff45d
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-7996dff45d
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-7996dff45d'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-12-09T05:27:13Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 6bf4f6788
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cert-manager-webhook-857864cb8c
      starboard.resource.namespace: cert-manager
    name: replicaset-cert-manager-webhook-857864cb8c
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-857864cb8c
      uid: d48e5f96-29ff-4367-b7b6-d52d2dcf947a
    resourceVersion: "21928288"
    uid: 016fc8bc-0f2a-4d16-bea9-29848969bc09
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-857864cb8c
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-857864cb8c
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container cert-manager-webhook of replicaset cert-manager-webhook-857864cb8c
        in cert-manager namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container cert-manager-webhook of replicaset cert-manager-webhook-857864cb8c
        in cert-manager namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'cert-manager-webhook' of ReplicaSet 'cert-manager-webhook-857864cb8c'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 4
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-02T03:58:18Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 6cfc94769b
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: reflector-dcc5cf554
      starboard.resource.namespace: default
    name: replicaset-reflector-dcc5cf554
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: reflector-dcc5cf554
      uid: 29adb112-d75e-49d9-a967-681fec107d9d
    resourceVersion: "62868916"
    uid: f647e608-9738-4479-939f-813bc29c9764
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'reflector-dcc5cf554' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container reflector of replicaset reflector-dcc5cf554 in default namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container reflector of replicaset reflector-dcc5cf554 in default namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'reflector-dcc5cf554' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container reflector of replicaset reflector-dcc5cf554 in default namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'reflector' of ReplicaSet 'reflector-dcc5cf554' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container reflector of replicaset reflector-dcc5cf554 in default namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 5
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:33Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 8648f67d5f
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: helm-controller-64cd59b777
      starboard.resource.namespace: flux-system
    name: replicaset-helm-controller-64cd59b777
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: helm-controller-64cd59b777
      uid: 7fee9449-601b-4d57-a498-cf9009e8d129
    resourceVersion: "834636"
    uid: 2fe39399-5259-41e0-9dbb-aad0107553d0
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset helm-controller-64cd59b777 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'helm-controller-64cd59b777' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-64cd59b777' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset helm-controller-64cd59b777 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-64cd59b777' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset helm-controller-64cd59b777 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'helm-controller-64cd59b777' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-64cd59b777' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset helm-controller-64cd59b777 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-64cd59b777' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:25Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 684db9cd4d
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: helm-controller-79bb868f5d
      starboard.resource.namespace: flux-system
    name: replicaset-helm-controller-79bb868f5d
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: helm-controller-79bb868f5d
      uid: 99711b01-147f-40bd-a6f3-a9e5d7925535
    resourceVersion: "834541"
    uid: b96c4750-45cf-4fd4-ac56-14e4f40c7479
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset helm-controller-79bb868f5d in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset helm-controller-79bb868f5d in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-79bb868f5d' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-79bb868f5d' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'helm-controller-79bb868f5d' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset helm-controller-79bb868f5d in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset helm-controller-79bb868f5d in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-79bb868f5d' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-79bb868f5d' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'helm-controller-79bb868f5d' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-21T14:33:41Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: cb767c494
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: helm-controller-965c76748
      starboard.resource.namespace: flux-system
    name: replicaset-helm-controller-965c76748
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: helm-controller-965c76748
      uid: be248554-fcd8-4587-b6f6-2233b992cc2c
    resourceVersion: "92766788"
    uid: 648055d2-41b7-4530-a5c3-60304d6d5c38
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'helm-controller-965c76748' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-965c76748' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-965c76748' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset helm-controller-965c76748 in flux-system namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset helm-controller-965c76748 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'helm-controller-965c76748' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-965c76748' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'helm-controller-965c76748' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset helm-controller-965c76748 in flux-system namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset helm-controller-965c76748 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-21T14:33:43Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 74bbc67999
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: image-automation-controller-8697d7cb68
      starboard.resource.namespace: flux-system
    name: replicaset-image-automation-controller-8697d7cb68
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: image-automation-controller-8697d7cb68
      uid: dca5f91b-eab7-45cc-9463-43b0c7cc9ec3
    resourceVersion: "92766796"
    uid: 105a6f0f-fcbd-4d98-a965-f353b11c3847
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-automation-controller-8697d7cb68 in
        flux-system namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-automation-controller-8697d7cb68' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-8697d7cb68'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-8697d7cb68'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-automation-controller-8697d7cb68 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-automation-controller-8697d7cb68 in
        flux-system namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-automation-controller-8697d7cb68' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-8697d7cb68'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-8697d7cb68'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-automation-controller-8697d7cb68 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:34Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 7d8954ddc
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: image-automation-controller-bc8787464
      starboard.resource.namespace: flux-system
    name: replicaset-image-automation-controller-bc8787464
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: image-automation-controller-bc8787464
      uid: 483be5e8-a9f4-417f-870b-442adaae6004
    resourceVersion: "834642"
    uid: ba9d5a97-7dee-4505-837e-255bb77be8cd
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-automation-controller-bc8787464 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-bc8787464'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-automation-controller-bc8787464 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-automation-controller-bc8787464' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-bc8787464'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-automation-controller-bc8787464 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-bc8787464'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-automation-controller-bc8787464 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-automation-controller-bc8787464' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-bc8787464'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:34Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 696844f7bb
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: image-automation-controller-cb5ff5bf9
      starboard.resource.namespace: flux-system
    name: replicaset-image-automation-controller-cb5ff5bf9
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: image-automation-controller-cb5ff5bf9
      uid: 5c3bb5c2-deb4-45dd-b71f-7b0ea804e800
    resourceVersion: "834652"
    uid: e7b58131-409e-4693-89fe-f55fba9e3f7c
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-automation-controller-cb5ff5bf9' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-automation-controller-cb5ff5bf9 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-automation-controller-cb5ff5bf9 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-cb5ff5bf9'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-cb5ff5bf9'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-automation-controller-cb5ff5bf9' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-automation-controller-cb5ff5bf9 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-automation-controller-cb5ff5bf9 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-cb5ff5bf9'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-automation-controller-cb5ff5bf9'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:41Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 7c74886bd4
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: image-reflector-controller-568fc784cb
      starboard.resource.namespace: flux-system
    name: replicaset-image-reflector-controller-568fc784cb
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: image-reflector-controller-568fc784cb
      uid: c61105dc-684c-4a76-aca2-9ac3bc90838f
    resourceVersion: "834689"
    uid: 7c3a5e61-1203-40da-9f69-8f4044ddcc66
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-568fc784cb'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-reflector-controller-568fc784cb in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-reflector-controller-568fc784cb in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-reflector-controller-568fc784cb' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-568fc784cb'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-568fc784cb'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-reflector-controller-568fc784cb in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-reflector-controller-568fc784cb in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-reflector-controller-568fc784cb' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-568fc784cb'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-21T14:33:40Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 748869c5f6
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: image-reflector-controller-6cf5d6c6b8
      starboard.resource.namespace: flux-system
    name: replicaset-image-reflector-controller-6cf5d6c6b8
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: image-reflector-controller-6cf5d6c6b8
      uid: f5602c0f-9a23-4211-831f-da8125d15398
    resourceVersion: "92766771"
    uid: 5c9b8471-72b6-404e-a7b9-b29c329ea7b6
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-6cf5d6c6b8'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-reflector-controller-6cf5d6c6b8 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-6cf5d6c6b8'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-reflector-controller-6cf5d6c6b8 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-reflector-controller-6cf5d6c6b8' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-6cf5d6c6b8'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-reflector-controller-6cf5d6c6b8 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-6cf5d6c6b8'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-reflector-controller-6cf5d6c6b8 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-reflector-controller-6cf5d6c6b8' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:35Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 67ff8c59f5
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: image-reflector-controller-7cdc88c5c7
      starboard.resource.namespace: flux-system
    name: replicaset-image-reflector-controller-7cdc88c5c7
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: image-reflector-controller-7cdc88c5c7
      uid: dab82c09-639a-44f4-870c-ba0a716577d8
    resourceVersion: "834655"
    uid: 01aba153-b373-48ed-9e7f-e6dd9b2ceeff
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-reflector-controller-7cdc88c5c7' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-reflector-controller-7cdc88c5c7 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-7cdc88c5c7'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-reflector-controller-7cdc88c5c7 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-7cdc88c5c7'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'image-reflector-controller-7cdc88c5c7' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset image-reflector-controller-7cdc88c5c7 in
        flux-system namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-7cdc88c5c7'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset image-reflector-controller-7cdc88c5c7 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'image-reflector-controller-7cdc88c5c7'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:55Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 5dbf677749
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: kustomize-controller-54f65db458
      starboard.resource.namespace: flux-system
    name: replicaset-kustomize-controller-54f65db458
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: kustomize-controller-54f65db458
      uid: 3a1e4650-d4ae-4796-9a04-aa9a8f253495
    resourceVersion: "834724"
    uid: afc99e46-85f3-47f5-bdb9-22b68bb2fa79
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'kustomize-controller-54f65db458' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset kustomize-controller-54f65db458 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-54f65db458' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset kustomize-controller-54f65db458 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-54f65db458' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'kustomize-controller-54f65db458' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset kustomize-controller-54f65db458 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-54f65db458' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset kustomize-controller-54f65db458 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-54f65db458' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-21T14:33:42Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 546bfb7ffc
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: kustomize-controller-66f7cb4d86
      starboard.resource.namespace: flux-system
    name: replicaset-kustomize-controller-66f7cb4d86
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: kustomize-controller-66f7cb4d86
      uid: 58c8f13d-77d3-4a66-a0ad-aaec163ca8df
    resourceVersion: "92766792"
    uid: dd5cb46f-9810-4dda-bdf8-1843c7962e72
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset kustomize-controller-66f7cb4d86 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset kustomize-controller-66f7cb4d86 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-66f7cb4d86' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-66f7cb4d86' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'kustomize-controller-66f7cb4d86' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset kustomize-controller-66f7cb4d86 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset kustomize-controller-66f7cb4d86 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-66f7cb4d86' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-66f7cb4d86' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'kustomize-controller-66f7cb4d86' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:55Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 585456fb6b
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: kustomize-controller-866fbd5855
      starboard.resource.namespace: flux-system
    name: replicaset-kustomize-controller-866fbd5855
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: kustomize-controller-866fbd5855
      uid: 4fc0682a-6979-4e05-8808-be21c8c0198a
    resourceVersion: "834732"
    uid: 23c0db8c-1ad2-4c3e-a4d8-d5463bf987cf
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-866fbd5855' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-866fbd5855' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset kustomize-controller-866fbd5855 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset kustomize-controller-866fbd5855 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'kustomize-controller-866fbd5855' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-866fbd5855' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'kustomize-controller-866fbd5855' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset kustomize-controller-866fbd5855 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset kustomize-controller-866fbd5855 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'kustomize-controller-866fbd5855' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:56Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 54f9455c89
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: notification-controller-556b8867f8
      starboard.resource.namespace: flux-system
    name: replicaset-notification-controller-556b8867f8
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: notification-controller-556b8867f8
      uid: 1351ed00-427f-42b5-81fe-63d3761f5de8
    resourceVersion: "834735"
    uid: 1630457d-3988-49da-9ce8-bdd854e3517e
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-556b8867f8' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-556b8867f8' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset notification-controller-556b8867f8 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset notification-controller-556b8867f8 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'notification-controller-556b8867f8' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-556b8867f8' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-556b8867f8' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset notification-controller-556b8867f8 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset notification-controller-556b8867f8 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'notification-controller-556b8867f8' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:56Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 5df9468564
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: notification-controller-75846575bf
      starboard.resource.namespace: flux-system
    name: replicaset-notification-controller-75846575bf
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: notification-controller-75846575bf
      uid: 305cfc2a-208d-4dbd-96eb-520778e1df5d
    resourceVersion: "834737"
    uid: f4e95e4e-2f64-4de1-adc5-0c9615b32c1e
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset notification-controller-75846575bf in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'notification-controller-75846575bf' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-75846575bf' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-75846575bf' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset notification-controller-75846575bf in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset notification-controller-75846575bf in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'notification-controller-75846575bf' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-75846575bf' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-75846575bf' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset notification-controller-75846575bf in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-21T14:33:41Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 56b7cd6546
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: notification-controller-f9dc675b9
      starboard.resource.namespace: flux-system
    name: replicaset-notification-controller-f9dc675b9
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: notification-controller-f9dc675b9
      uid: 1ec5baae-61c1-4a4b-8c50-392509223d84
    resourceVersion: "92766783"
    uid: 6ed7e291-3d4f-4229-b06a-36d9b53aa7c7
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'notification-controller-f9dc675b9' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset notification-controller-f9dc675b9 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset notification-controller-f9dc675b9 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-f9dc675b9' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-f9dc675b9' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'notification-controller-f9dc675b9' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset notification-controller-f9dc675b9 in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset notification-controller-f9dc675b9 in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-f9dc675b9' should
        set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'notification-controller-f9dc675b9' should
        set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-21T14:33:45Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 59f5cc955b
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: source-controller-7ddc4d4f4c
      starboard.resource.namespace: flux-system
    name: replicaset-source-controller-7ddc4d4f4c
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: source-controller-7ddc4d4f4c
      uid: 8f1a1556-6fca-4dfa-ac3f-04511f988635
    resourceVersion: "92766816"
    uid: 136518eb-dd08-47dd-93c5-073480c1ab41
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-7ddc4d4f4c' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'source-controller-7ddc4d4f4c' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset source-controller-7ddc4d4f4c in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-7ddc4d4f4c' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset source-controller-7ddc4d4f4c in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-7ddc4d4f4c' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'source-controller-7ddc4d4f4c' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset source-controller-7ddc4d4f4c in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-7ddc4d4f4c' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset source-controller-7ddc4d4f4c in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:26Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 558b59cb4d
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: source-controller-865dd7cff
      starboard.resource.namespace: flux-system
    name: replicaset-source-controller-865dd7cff
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: source-controller-865dd7cff
      uid: a4e4dcb9-028f-41dd-9fa1-d753bab80f55
    resourceVersion: "834565"
    uid: 900d4d8a-db36-49d8-81d5-e72b6d6c0287
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'source-controller-865dd7cff' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset source-controller-865dd7cff in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset source-controller-865dd7cff in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-865dd7cff' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-865dd7cff' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'source-controller-865dd7cff' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset source-controller-865dd7cff in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset source-controller-865dd7cff in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-865dd7cff' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-865dd7cff' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:44Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 56c458689f
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: source-controller-cc7bd674d
      starboard.resource.namespace: flux-system
    name: replicaset-source-controller-cc7bd674d
    namespace: flux-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: source-controller-cc7bd674d
      uid: 28d076af-c588-4216-af09-539433864062
    resourceVersion: "834700"
    uid: fa2d1a1f-5063-498a-8052-a7bb34d4abbe
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset source-controller-cc7bd674d in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'source-controller-cc7bd674d' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-cc7bd674d' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-cc7bd674d' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset source-controller-cc7bd674d in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container manager of replicaset source-controller-cc7bd674d in flux-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'source-controller-cc7bd674d' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-cc7bd674d' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'manager' of ReplicaSet 'source-controller-cc7bd674d' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container manager of replicaset source-controller-cc7bd674d in flux-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:22Z"
    generation: 1
    labels:
      plugin-config-hash: 66f8c95ffd
      resource-spec-hash: 594f999949
      starboard.resource.kind: ResourceQuota
      starboard.resource.name: critical-pods-flux-system
      starboard.resource.namespace: flux-system
    name: resourcequota-critical-pods-flux-system
    namespace: flux-system
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: false
      controller: true
      kind: ResourceQuota
      name: critical-pods-flux-system
      uid: a9849d69-6efc-4cc0-b097-5a807b9ab6ed
    resourceVersion: "92769420"
    uid: bed325a9-3bf5-4046-a4d5-c5cbb67a9d57
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV040
      description: ensure resource quota policy has configure in order to limit aggregate
        resource usage within namespace
      messages:
      - resource quota policy with hard memory and cpu quota per namespace should
        be configure
      severity: LOW
      success: false
      title: resource quota usage
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV040
      description: ensure resource quota policy has configure in order to limit aggregate
        resource usage within namespace
      messages:
      - resource quota policy with hard memory and cpu quota per namespace should
        be configure
      severity: LOW
      success: false
      title: resource quota usage
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 1
      mediumCount: 0
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-16T17:48:57Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: b9444d45c
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: homepage-6b57c9c69b
      starboard.resource.namespace: myapps
    name: replicaset-homepage-6b57c9c69b
    namespace: myapps
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: homepage-6b57c9c69b
      uid: 08e71c94-333a-47fa-a36a-ae1414b91ebb
    resourceVersion: "70214207"
    uid: 2a028099-8954-47eb-af73-e417b1b9e883
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.runAsNonRoot'
        to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.readOnlyRootFilesystem'
        to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should add 'ALL'
        to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'homepage' of 'replicaset' 'homepage-6b57c9c69b' in 'myapps' namespace
        should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should specify an
        image tag
      severity: LOW
      success: false
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container homepage of replicaset homepage-6b57c9c69b in myapps namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container homepage of replicaset homepage-6b57c9c69b in myapps namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.runAsNonRoot'
        to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.readOnlyRootFilesystem'
        to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should add 'ALL'
        to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'homepage' of 'replicaset' 'homepage-6b57c9c69b' in 'myapps' namespace
        should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should specify an
        image tag
      severity: LOW
      success: false
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container homepage of replicaset homepage-6b57c9c69b in myapps namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-6b57c9c69b' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container homepage of replicaset homepage-6b57c9c69b in myapps namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 6
      mediumCount: 6
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-16T17:42:07Z"
    generation: 2
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 675456b6f7
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: homepage-7b5d6565d4
      starboard.resource.namespace: myapps
    name: replicaset-homepage-7b5d6565d4
    namespace: myapps
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: homepage-7b5d6565d4
      uid: 80f6fc92-5e74-4e83-a622-6975169f501c
    resourceVersion: "70211146"
    uid: 34efad3f-4b75-43c3-8381-1c62a43fd73b
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.runAsNonRoot'
        to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'homepage' of 'replicaset' 'homepage-7b5d6565d4' in 'myapps' namespace
        should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.readOnlyRootFilesystem'
        to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container homepage of replicaset homepage-7b5d6565d4 in myapps namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container homepage of replicaset homepage-7b5d6565d4 in myapps namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should specify an
        image tag
      severity: LOW
      success: false
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should add 'ALL'
        to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.runAsNonRoot'
        to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'homepage' of 'replicaset' 'homepage-7b5d6565d4' in 'myapps' namespace
        should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.readOnlyRootFilesystem'
        to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container homepage of replicaset homepage-7b5d6565d4 in myapps namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container homepage of replicaset homepage-7b5d6565d4 in myapps namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should specify an
        image tag
      severity: LOW
      success: false
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'homepage' of ReplicaSet 'homepage-7b5d6565d4' should add 'ALL'
        to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 6
      mediumCount: 6
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-12-20T00:05:19Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 655b967f8c
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cloudflared-54664d979c
      starboard.resource.namespace: network
    name: replicaset-cloudflared-54664d979c
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cloudflared-54664d979c
      uid: 45df3314-2fd5-41e7-a853-0d02e478b1f5
    resourceVersion: "27489413"
    uid: 233a4f1b-931d-43f1-855e-60dae5a412e1
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-54664d979c' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset cloudflared-54664d979c in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-54664d979c' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset cloudflared-54664d979c in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-54664d979c' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-54664d979c' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-54664d979c' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset cloudflared-54664d979c in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-54664d979c' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset cloudflared-54664d979c in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-54664d979c' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-54664d979c' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-12-09T05:27:14Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 556f9dddc5
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cloudflared-5b56f4877
      starboard.resource.namespace: network
    name: replicaset-cloudflared-5b56f4877
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cloudflared-5b56f4877
      uid: 55929185-26b4-424b-aacb-0253eb7b0e46
    resourceVersion: "21928296"
    uid: 90729c5b-ea4c-4390-8bcd-00ec79e2b8cc
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset cloudflared-5b56f4877 in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-5b56f4877' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-5b56f4877' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-5b56f4877' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-5b56f4877' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset cloudflared-5b56f4877 in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset cloudflared-5b56f4877 in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-5b56f4877' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-5b56f4877' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-5b56f4877' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-5b56f4877' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset cloudflared-5b56f4877 in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T02:27:58Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 5dcd848b6b
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cloudflared-6475d654f4
      starboard.resource.namespace: network
    name: replicaset-cloudflared-6475d654f4
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cloudflared-6475d654f4
      uid: 20171bfc-163d-49b6-a843-be6a3334af70
    resourceVersion: "62260606"
    uid: 380d28c0-cced-4ee9-81df-cfc8f5ebaa9d
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-6475d654f4' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-6475d654f4' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset cloudflared-6475d654f4 in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset cloudflared-6475d654f4 in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-6475d654f4' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-6475d654f4' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-6475d654f4' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-6475d654f4' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset cloudflared-6475d654f4 in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset cloudflared-6475d654f4 in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-6475d654f4' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-6475d654f4' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-01-15T05:44:49Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 755b5f8676
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: cloudflared-65d489f956
      starboard.resource.namespace: network
    name: replicaset-cloudflared-65d489f956
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: cloudflared-65d489f956
      uid: 07146bb2-8b22-4e3c-8694-fbdf0888e1fe
    resourceVersion: "40996485"
    uid: 02f486fd-fa47-411e-be85-382b8e8eff32
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset cloudflared-65d489f956 in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-65d489f956' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-65d489f956' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset cloudflared-65d489f956 in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-65d489f956' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-65d489f956' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset cloudflared-65d489f956 in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-65d489f956' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-65d489f956' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset cloudflared-65d489f956 in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-65d489f956' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'cloudflared-65d489f956' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-14T00:31:40Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 879496c98
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: echo-server-67ddcf754d
      starboard.resource.namespace: network
    name: replicaset-echo-server-67ddcf754d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: echo-server-67ddcf754d
      uid: a51b3112-9ea3-4158-93a8-ee6f5ea2167e
    resourceVersion: "88092567"
    uid: ad3dbf9a-b732-405a-9789-651a46561adf
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-67ddcf754d' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset echo-server-67ddcf754d in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-67ddcf754d' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset echo-server-67ddcf754d in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-67ddcf754d' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-67ddcf754d' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-67ddcf754d' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset echo-server-67ddcf754d in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-67ddcf754d' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset echo-server-67ddcf754d in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-67ddcf754d' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-67ddcf754d' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:56Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: b76cf59c9
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: echo-server-7bfc9b45c9
      starboard.resource.namespace: network
    name: replicaset-echo-server-7bfc9b45c9
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: echo-server-7bfc9b45c9
      uid: 5036f813-86bc-46bb-9105-3fd0de5ed585
    resourceVersion: "834738"
    uid: e497cfa4-07d1-4075-9287-d6f1af6bbc59
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset echo-server-7bfc9b45c9 in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-7bfc9b45c9' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-7bfc9b45c9' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset echo-server-7bfc9b45c9 in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-7bfc9b45c9' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-7bfc9b45c9' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container app of replicaset echo-server-7bfc9b45c9 in network namespace should
        restrict container image to your specific registry domain. See the full GCR
        list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-7bfc9b45c9' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-7bfc9b45c9' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container app of replicaset echo-server-7bfc9b45c9 in network namespace should
        restrict container image to your specific registry domain. For Azure any domain
        ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-7bfc9b45c9' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'app' of ReplicaSet 'echo-server-7bfc9b45c9' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 4
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T01:52:06Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 545994d66b
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: external-dns-58bb85df98
      starboard.resource.namespace: network
    name: replicaset-external-dns-58bb85df98
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: external-dns-58bb85df98
      uid: 9442bc3a-70e3-46ac-9081-db415fc87c73
    resourceVersion: "62246289"
    uid: c41d9016-0ae1-4338-a974-8ab65b161172
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'external-dns-58bb85df98' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container external-dns of replicaset external-dns-58bb85df98 in network namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-58bb85df98' should set
        'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-58bb85df98' should set
        'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container external-dns of replicaset external-dns-58bb85df98 in network namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-58bb85df98' should set
        'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-58bb85df98' should set
        'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'external-dns-58bb85df98' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container external-dns of replicaset external-dns-58bb85df98 in network namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-58bb85df98' should set
        'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-58bb85df98' should set
        'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container external-dns of replicaset external-dns-58bb85df98 in network namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-58bb85df98' should set
        'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-58bb85df98' should set
        'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 5
      mediumCount: 2
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:22Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 69b7fbc5f9
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: external-dns-87c64b58f
      starboard.resource.namespace: network
    name: replicaset-external-dns-87c64b58f
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: external-dns-87c64b58f
      uid: 05e5ed67-7765-4bd5-bdce-1481668f4fed
    resourceVersion: "834513"
    uid: 12754a1c-4cf5-48c5-9912-328a5212fe2e
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container external-dns of replicaset external-dns-87c64b58f in network namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'external-dns-87c64b58f' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-87c64b58f' should set
        'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container external-dns of replicaset external-dns-87c64b58f in network namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-87c64b58f' should set
        'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-87c64b58f' should set
        'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-87c64b58f' should set
        'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container external-dns of replicaset external-dns-87c64b58f in network namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'external-dns-87c64b58f' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-87c64b58f' should set
        'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container external-dns of replicaset external-dns-87c64b58f in network namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-87c64b58f' should set
        'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-87c64b58f' should set
        'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-87c64b58f' should set
        'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 5
      mediumCount: 2
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-21T14:27:26Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 94db5f986
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: external-dns-c6cc76596
      starboard.resource.namespace: network
    name: replicaset-external-dns-c6cc76596
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: external-dns-c6cc76596
      uid: 2b92e5cd-7ba5-4efc-a88a-9bed1e70dae5
    resourceVersion: "92764558"
    uid: b2484388-9be2-4947-b46f-50fdde3a5025
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-c6cc76596' should set
        'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-c6cc76596' should set
        'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-c6cc76596' should set
        'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container external-dns of replicaset external-dns-c6cc76596 in network namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-c6cc76596' should set
        'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'external-dns-c6cc76596' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container external-dns of replicaset external-dns-c6cc76596 in network namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-c6cc76596' should set
        'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-c6cc76596' should set
        'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-c6cc76596' should set
        'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container external-dns of replicaset external-dns-c6cc76596 in network namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      severity: MEDIUM
      success: true
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'external-dns' of ReplicaSet 'external-dns-c6cc76596' should set
        'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      messages:
      - ReplicaSet 'external-dns-c6cc76596' should set 'spec.securityContext.runAsGroup',
        'spec.securityContext.supplementalGroups[*]' and 'spec.securityContext.fsGroup'
        to integer greater than 0
      severity: LOW
      success: false
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container external-dns of replicaset external-dns-c6cc76596 in network namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 5
      mediumCount: 2
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T02:27:56Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 84875d576c
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-external-controller-56ff4d894f
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-external-controller-56ff4d894f
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-external-controller-56ff4d894f
      uid: 5c04e37e-ecab-4a45-8929-32c5e94c489c
    resourceVersion: "62260587"
    uid: 4b6a8d58-ccb2-4822-af0d-cd384f799ff3
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-56ff4d894f
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-56ff4d894f
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-56ff4d894f
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-56ff4d894f
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-56ff4d894f'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:43Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 7889b6ddcb
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-external-controller-7b97c4b4cb
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-external-controller-7b97c4b4cb
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-external-controller-7b97c4b4cb
      uid: c14e3326-d36a-47d2-9cd2-2b6858d36912
    resourceVersion: "834695"
    uid: b98c18a4-136a-4fa1-85f6-6d254f9cdb41
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-7b97c4b4cb
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-7b97c4b4cb
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-7b97c4b4cb
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-7b97c4b4cb
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7b97c4b4cb'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-14T18:41:03Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 7d9fdc4975
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-external-controller-7c88d5d6c9
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-external-controller-7c88d5d6c9
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-external-controller-7c88d5d6c9
      uid: 463984b3-e95c-4f9c-baba-210bb46889d7
    resourceVersion: "88592725"
    uid: f270f1ad-790e-48e6-bb19-48a5b02c177a
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-7c88d5d6c9
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-7c88d5d6c9
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-7c88d5d6c9
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-7c88d5d6c9
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7c88d5d6c9'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:44Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 698878f7
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-external-controller-7f99bc94cf
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-external-controller-7f99bc94cf
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-external-controller-7f99bc94cf
      uid: 3e517d19-215a-463a-a719-ddb5a093bfdb
    resourceVersion: "834699"
    uid: 2b8f6f02-f9ce-43ca-ad1d-c7a687357fa0
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-7f99bc94cf
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-7f99bc94cf
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-7f99bc94cf
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-7f99bc94cf
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-7f99bc94cf'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:25Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 86468f5956
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-external-controller-94c776b7d
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-external-controller-94c776b7d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-external-controller-94c776b7d
      uid: b9b3f3f0-1631-4840-ad06-f539d62863c3
    resourceVersion: "834531"
    uid: 30373640-e00d-4cac-b945-9bd2d649d21a
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-94c776b7d
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-94c776b7d
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-external-controller-94c776b7d
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-external-controller-94c776b7d
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-external-controller-94c776b7d'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:31Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 84787856bc
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-internal-controller-54876f9f59
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-internal-controller-54876f9f59
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-internal-controller-54876f9f59
      uid: 65b0aece-b77b-4240-9314-9ab4a33ba284
    resourceVersion: "834624"
    uid: 3157c3a1-8c38-48cd-b5aa-bd1fb027f80a
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-54876f9f59
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-54876f9f59
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-54876f9f59
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-54876f9f59
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54876f9f59'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:45Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 7cc86b8c9d
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-internal-controller-54c96f7f46
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-internal-controller-54c96f7f46
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-internal-controller-54c96f7f46
      uid: 4da14976-d30b-496f-85a7-c9856ce3b670
    resourceVersion: "834702"
    uid: fe3a967d-d970-4603-8820-bf00003361ed
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-54c96f7f46
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-54c96f7f46
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-54c96f7f46
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-54c96f7f46'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-54c96f7f46
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-04-14T18:41:03Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 789f5d658f
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-internal-controller-5b84f885c5
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-internal-controller-5b84f885c5
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-internal-controller-5b84f885c5
      uid: cc568b1d-e1ba-4314-995c-6fd0b91b6e8d
    resourceVersion: "88592728"
    uid: 0656f3b1-a628-46b1-8b92-62de23287b2b
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-5b84f885c5
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-5b84f885c5
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-5b84f885c5
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-5b84f885c5
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-5b84f885c5'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T02:27:57Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 678c6ddf69
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-internal-controller-744d5fd4df
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-internal-controller-744d5fd4df
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-internal-controller-744d5fd4df
      uid: 86ac8182-47e3-4d4e-810f-ae2d56d7f588
    resourceVersion: "62260599"
    uid: a8694387-723b-4f5d-aced-190116b23c11
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-744d5fd4df
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-744d5fd4df
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-744d5fd4df
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-744d5fd4df'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-744d5fd4df
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:38Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 7b67f88bc8
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: ingress-nginx-internal-controller-ddfcdb79b
      starboard.resource.namespace: network
    name: replicaset-ingress-nginx-internal-controller-ddfcdb79b
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-internal-controller-ddfcdb79b
      uid: c716f730-0a85-4e77-8cbe-3d30042f0b18
    resourceVersion: "834672"
    uid: ade342aa-5ecd-413d-b510-4e5207ebc9ac
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-ddfcdb79b
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-ddfcdb79b
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container controller of replicaset ingress-nginx-internal-controller-ddfcdb79b
        in network namespace should restrict container image to your specific registry
        domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should not set 'securityContext.capabilities.add'
      severity: MEDIUM
      success: false
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container controller of replicaset ingress-nginx-internal-controller-ddfcdb79b
        in network namespace should restrict container image to your specific registry
        domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'controller' of ReplicaSet 'ingress-nginx-internal-controller-ddfcdb79b'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 2
      mediumCount: 5
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2024-10-26T05:28:27Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 677b69f65c
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: k8s-gateway-6bc954c59d
      starboard.resource.namespace: network
    name: replicaset-k8s-gateway-6bc954c59d
    namespace: network
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: k8s-gateway-6bc954c59d
      uid: b06dc1f1-ca03-4530-8b95-ec708a3b4738
    resourceVersion: "834579"
    uid: e879e314-88cb-4c98-ad10-4540efef8e56
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container k8s-gateway of replicaset k8s-gateway-6bc954c59d in network namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should add
        'ALL' to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.runAsNonRoot' to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.allowPrivilegeEscalation' to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container k8s-gateway of replicaset k8s-gateway-6bc954c59d in network namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'k8s-gateway' of 'replicaset' 'k8s-gateway-6bc954c59d' in 'network'
        namespace should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container k8s-gateway of replicaset k8s-gateway-6bc954c59d in network namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should add
        'ALL' to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.runAsNonRoot' to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.allowPrivilegeEscalation' to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container k8s-gateway of replicaset k8s-gateway-6bc954c59d in network namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'k8s-gateway' of 'replicaset' 'k8s-gateway-6bc954c59d' in 'network'
        namespace should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'k8s-gateway' of ReplicaSet 'k8s-gateway-6bc954c59d' should set
        'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 7
      mediumCount: 6
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T01:52:08Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 5c4d85c48d
      starboard.resource.kind: Job
      starboard.resource.name: openebs-pre-upgrade-hook
      starboard.resource.namespace: openebs-system
    name: job-openebs-pre-upgrade-hook
    namespace: openebs-system
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: false
      controller: true
      kind: Job
      name: openebs-pre-upgrade-hook
      uid: a54bd177-db76-4dd8-9ae9-acf1423bbae3
    resourceVersion: "62246301"
    uid: 4013b281-4532-4bb3-b07a-d60ffe9df763
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container pre-upgrade-job of job openebs-pre-upgrade-hook in openebs-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.runAsNonRoot'
        to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'pre-upgrade-job' of 'job' 'openebs-pre-upgrade-hook' in 'openebs-system'
        namespace should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.readOnlyRootFilesystem'
        to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container pre-upgrade-job of job openebs-pre-upgrade-hook in openebs-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should add 'ALL'
        to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container pre-upgrade-job of job openebs-pre-upgrade-hook in openebs-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.runAsNonRoot'
        to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'pre-upgrade-job' of 'job' 'openebs-pre-upgrade-hook' in 'openebs-system'
        namespace should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.readOnlyRootFilesystem'
        to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container pre-upgrade-job of job openebs-pre-upgrade-hook in openebs-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should add 'ALL'
        to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'pre-upgrade-job' of Job 'openebs-pre-upgrade-hook' should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 7
      mediumCount: 6
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-01T01:59:13Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 55bfb8b69
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: openebs-localpv-provisioner-56d8447b9
      starboard.resource.namespace: openebs-system
    name: replicaset-openebs-localpv-provisioner-56d8447b9
    namespace: openebs-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: openebs-localpv-provisioner-56d8447b9
      uid: bb0ef625-6b8f-4566-aad6-e242ad1a360f
    resourceVersion: "62248834"
    uid: 72e5f3fa-9306-400b-a26f-59bb81de1f0a
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should add 'ALL' to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.runAsNonRoot' to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container openebs-localpv-provisioner of replicaset openebs-localpv-provisioner-56d8447b9
        in openebs-system namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.allowPrivilegeEscalation' to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container openebs-localpv-provisioner of replicaset openebs-localpv-provisioner-56d8447b9
        in openebs-system namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'openebs-localpv-provisioner' of 'replicaset' 'openebs-localpv-provisioner-56d8447b9'
        in 'openebs-system' namespace should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should add 'ALL' to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.runAsUser' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.runAsNonRoot' to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container openebs-localpv-provisioner of replicaset openebs-localpv-provisioner-56d8447b9
        in openebs-system namespace should restrict container image to your specific
        registry domain. See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.runAsGroup' > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.readOnlyRootFilesystem' to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'openebs-localpv-provisioner' of ReplicaSet 'openebs-localpv-provisioner-56d8447b9'
        should set 'securityContext.allowPrivilegeEscalation' to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container openebs-localpv-provisioner of replicaset openebs-localpv-provisioner-56d8447b9
        in openebs-system namespace should restrict container image to your specific
        registry domain. For Azure any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'openebs-localpv-provisioner' of 'replicaset' 'openebs-localpv-provisioner-56d8447b9'
        in 'openebs-system' namespace should set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 7
      mediumCount: 6
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-03-02T17:17:01Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 79c6d445dc
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: qrapp-579c8c86c
      starboard.resource.namespace: qrapp
    name: replicaset-qrapp-579c8c86c
    namespace: qrapp
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: qrapp-579c8c86c
      uid: da7ca652-c7ea-45ac-bc78-d4c604667677
    resourceVersion: "63186438"
    uid: c0474d63-c7e7-47a6-886e-579bd62a3917
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.runAsNonRoot'
        to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container qrapp of replicaset qrapp-579c8c86c in qrapp namespace should restrict
        container image to your specific registry domain. For Azure any domain ending
        in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container qrapp of replicaset qrapp-579c8c86c in qrapp namespace should restrict
        container image to your specific registry domain. See the full GCR list here:
        https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.readOnlyRootFilesystem'
        to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'qrapp' of 'replicaset' 'qrapp-579c8c86c' in 'qrapp' namespace should
        set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should add 'ALL' to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.runAsNonRoot'
        to true
      severity: MEDIUM
      success: false
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container qrapp of replicaset qrapp-579c8c86c in qrapp namespace should restrict
        container image to your specific registry domain. For Azure any domain ending
        in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'resources.limits.memory'
      severity: LOW
      success: false
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container qrapp of replicaset qrapp-579c8c86c in qrapp namespace should restrict
        container image to your specific registry domain. See the full GCR list here:
        https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.readOnlyRootFilesystem'
        to true
      severity: LOW
      success: false
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'resources.requests.cpu'
      severity: LOW
      success: false
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      messages:
      - Container 'qrapp' of 'replicaset' 'qrapp-579c8c86c' in 'qrapp' namespace should
        set securityContext.capabilities.drop
      severity: LOW
      success: false
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'securityContext.allowPrivilegeEscalation'
        to false
      severity: MEDIUM
      success: false
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'resources.limits.cpu'
      severity: LOW
      success: false
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should set 'resources.requests.memory'
      severity: LOW
      success: false
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      messages:
      - Container 'qrapp' of ReplicaSet 'qrapp-579c8c86c' should add 'ALL' to 'securityContext.capabilities.drop'
      severity: LOW
      success: false
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 7
      mediumCount: 6
    updateTimestamp: null
- apiVersion: aquasecurity.github.io/v1alpha1
  kind: ConfigAuditReport
  metadata:
    creationTimestamp: "2025-05-07T03:02:09Z"
    generation: 1
    labels:
      plugin-config-hash: 669cfcf6ff
      resource-spec-hash: 795679778f
      starboard.resource.kind: ReplicaSet
      starboard.resource.name: volsync-5cfbddb45c
      starboard.resource.namespace: volsync-system
    name: replicaset-volsync-5cfbddb45c
    namespace: volsync-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: false
      controller: true
      kind: ReplicaSet
      name: volsync-5cfbddb45c
      uid: d6797c3b-a886-41d0-b600-729a950d0588
    resourceVersion: "102246345"
    uid: a27f1749-c768-40e1-ae2e-e719c14104a7
  report:
    checks:
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container kube-rbac-proxy of replicaset volsync-5cfbddb45c in volsync-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      - container manager of replicaset volsync-5cfbddb45c in volsync-system namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container kube-rbac-proxy of replicaset volsync-5cfbddb45c in volsync-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      - 'container manager of replicaset volsync-5cfbddb45c in volsync-system namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'kube-rbac-proxy' of ReplicaSet 'volsync-5cfbddb45c' should set
        'securityContext.runAsGroup' > 10000
      - Container 'manager' of ReplicaSet 'volsync-5cfbddb45c' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'kube-rbac-proxy' of ReplicaSet 'volsync-5cfbddb45c' should set
        'securityContext.runAsUser' > 10000
      - Container 'manager' of ReplicaSet 'volsync-5cfbddb45c' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    containerChecks: {}
    podChecks:
    - category: Kubernetes Security Check
      checkID: KSV036
      description: 'ensure that Pod specifications disable the secret token being
        mounted by setting automountServiceAccountToken: false'
      severity: MEDIUM
      success: true
      title: Protecting Pod service account tokens
    - category: Kubernetes Security Check
      checkID: KSV016
      description: When containers have memory requests specified, the scheduler can
        make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: Memory requests not specified
    - category: Kubernetes Security Check
      checkID: KSV028
      description: In addition to restricting HostPath volumes, usage of non-ephemeral
        volume types should be limited to those defined through PersistentVolumes.
      severity: LOW
      success: true
      title: Non-ephemeral volume types used
    - category: Kubernetes Security Check
      checkID: KSV014
      description: An immutable root file system prevents applications from writing
        to their local disk. This can limit intrusions, as attackers will not be able
        to tamper with the file system or write foreign executables to disk.
      severity: LOW
      success: true
      title: Root file system is not read-only
    - category: Kubernetes Security Check
      checkID: KSV023
      description: HostPath volumes must be forbidden.
      severity: MEDIUM
      success: true
      title: hostPath volumes mounted
    - category: Kubernetes Security Check
      checkID: KSV007
      description: Managing /etc/hosts aliases can prevent the container engine from
        modifying the file after a pod’s containers have already been started.
      severity: LOW
      success: true
      title: hostAliases is set
    - category: Kubernetes Security Check
      checkID: KSV002
      description: A program inside the container can bypass AppArmor protection policies.
      severity: MEDIUM
      success: true
      title: Default AppArmor profile not set
    - category: Kubernetes Security Check
      checkID: KSV032
      description: Containers should only use images from trusted registries.
      messages:
      - container kube-rbac-proxy of replicaset volsync-5cfbddb45c in volsync-system
        namespace should restrict container image to your specific registry domain.
        For Azure any domain ending in 'azurecr.io'
      - container manager of replicaset volsync-5cfbddb45c in volsync-system namespace
        should restrict container image to your specific registry domain. For Azure
        any domain ending in 'azurecr.io'
      severity: MEDIUM
      success: false
      title: All container images must start with the *.azurecr.io domain
    - category: Kubernetes Security Check
      checkID: KSV026
      description: Sysctls can disable security mechanisms or affect all containers
        on a host, and should be disallowed except for an allowed 'safe' subset. A
        sysctl is considered safe if it is namespaced in the container or the Pod,
        and it is isolated from other Pods or processes on the same Node.
      severity: MEDIUM
      success: true
      title: Unsafe sysctl options set
    - category: Kubernetes Security Check
      checkID: KSV017
      description: Privileged containers share namespaces with the host system and
        do not offer any security. They should be used exclusively for system containers
        that require high privileges.
      severity: HIGH
      success: true
      title: Privileged container
    - category: Kubernetes Security Check
      checkID: KSV022
      description: Adding NET_RAW or capabilities beyond the default set must be disallowed.
      severity: MEDIUM
      success: true
      title: Non-default capabilities added
    - category: Kubernetes Security Check
      checkID: KSV008
      description: Sharing the host’s IPC namespace allows container processes to
        communicate with processes on the host.
      severity: HIGH
      success: true
      title: Access to host IPC namespace
    - category: Kubernetes Security Check
      checkID: KSV013
      description: It is best to avoid using the ':latest' image tag when deploying
        containers in production. Doing so makes it hard to track which version of
        the image is running, and hard to roll back the version.
      severity: LOW
      success: true
      title: Image tag ':latest' used
    - category: Kubernetes Security Check
      checkID: KSV037
      description: ensure that User pods are not placed in kube-system namespace
      severity: MEDIUM
      success: true
      title: User Pods should not be placed in kube-system namespace
    - category: Kubernetes Security Check
      checkID: KSV005
      description: SYS_ADMIN gives the processes running inside the container privileges
        that are equivalent to root.
      severity: HIGH
      success: true
      title: SYS_ADMIN capability added
    - category: Kubernetes Security Check
      checkID: KSV009
      description: Sharing the host’s network namespace permits processes in the pod
        to communicate with processes bound to the host’s loopback adapter.
      severity: HIGH
      success: true
      title: Access to host network
    - category: Kubernetes Security Check
      checkID: KSV024
      description: HostPorts should be disallowed, or at minimum restricted to a known
        list.
      severity: HIGH
      success: true
      title: Access to host ports
    - category: Kubernetes Security Check
      checkID: KSV010
      description: Sharing the host’s PID namespace allows visibility on host processes,
        potentially leaking information such as environment variables and configuration.
      severity: HIGH
      success: true
      title: Access to host PID
    - category: Kubernetes Security Check
      checkID: KSV001
      description: A program inside the container can elevate its own privileges and
        run as root, which might give the program control over the container and node.
      severity: MEDIUM
      success: true
      title: Process can elevate its own privileges
    - category: Kubernetes Security Check
      checkID: KSV027
      description: The default /proc masks are set up to reduce attack surface, and
        should be required.
      severity: MEDIUM
      success: true
      title: Non-default /proc masks set
    - category: Kubernetes Security Check
      checkID: KSV018
      description: Enforcing memory limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: Memory not limited
    - category: Kubernetes Security Check
      checkID: KSV033
      description: Containers should only use images from trusted GCR registries.
      messages:
      - 'container kube-rbac-proxy of replicaset volsync-5cfbddb45c in volsync-system
        namespace should restrict container image to your specific registry domain.
        See the full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      - 'container manager of replicaset volsync-5cfbddb45c in volsync-system namespace
        should restrict container image to your specific registry domain. See the
        full GCR list here: https://cloud.google.com/container-registry/docs/overview#registries'
      severity: MEDIUM
      success: false
      title: All container images must start with a GCR domain
    - category: Kubernetes Security Check
      checkID: KSV011
      description: Enforcing CPU limits prevents DoS via resource exhaustion.
      severity: LOW
      success: true
      title: CPU not limited
    - category: Kubernetes Security Check
      checkID: KSV102
      description: Check if Helm Tiller component is deployed.
      severity: CRITICAL
      success: true
      title: Tiller Is Deployed
    - category: Kubernetes Security Check
      checkID: KSV015
      description: When containers have resource requests specified, the scheduler
        can make better decisions about which nodes to place pods on, and how to deal
        with resource contention.
      severity: LOW
      success: true
      title: CPU requests not specified
    - category: Kubernetes Security Check
      checkID: KSV030
      description: The RuntimeDefault seccomp profile must be required, or allow specific
        additional profiles.
      severity: LOW
      success: true
      title: Default Seccomp profile not set
    - category: Kubernetes Security Check
      checkID: KSV025
      description: Setting a custom SELinux user or role option should be forbidden.
      severity: MEDIUM
      success: true
      title: SELinux custom options set
    - category: Kubernetes Security Check
      checkID: KSV006
      description: Mounting docker.sock from the host can give the container full
        root access to the host.
      severity: HIGH
      success: true
      title: hostPath volume mounted with docker.sock
    - category: Kubernetes Security Check
      checkID: KSV021
      description: Force the container to run with group ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'kube-rbac-proxy' of ReplicaSet 'volsync-5cfbddb45c' should set
        'securityContext.runAsGroup' > 10000
      - Container 'manager' of ReplicaSet 'volsync-5cfbddb45c' should set 'securityContext.runAsGroup'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low group ID
    - category: Kubernetes Security Check
      checkID: KSV012
      description: '''runAsNonRoot'' forces the running image to run as a non-root
        user to ensure least privileges.'
      severity: MEDIUM
      success: true
      title: Runs as root user
    - category: Kubernetes Security Check
      checkID: KSV003
      description: The container should drop all default capabilities and add only
        those that are needed for its execution.
      severity: LOW
      success: true
      title: Default capabilities not dropped
    - category: Kubernetes Security Check
      checkID: KSV029
      description: Containers should be forbidden from running with a root primary
        or supplementary GID.
      severity: LOW
      success: true
      title: A root primary or supplementary GID set
    - category: Kubernetes Security Check
      checkID: KSV004
      description: Security best practices require containers to run with minimal
        required capabilities.
      severity: LOW
      success: true
      title: Unused capabilities should be dropped (drop any)
    - category: Kubernetes Security Check
      checkID: KSV020
      description: Force the container to run with user ID > 10000 to avoid conflicts
        with the host’s user table.
      messages:
      - Container 'kube-rbac-proxy' of ReplicaSet 'volsync-5cfbddb45c' should set
        'securityContext.runAsUser' > 10000
      - Container 'manager' of ReplicaSet 'volsync-5cfbddb45c' should set 'securityContext.runAsUser'
        > 10000
      severity: MEDIUM
      success: false
      title: Runs with low user ID
    scanner:
      name: Starboard
      vendor: Aqua Security
      version: 0.15.3
    summary:
      criticalCount: 0
      highCount: 0
      lowCount: 0
      mediumCount: 4
    updateTimestamp: null
kind: List
metadata:
  resourceVersion: ""
